{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'PIPEDREAMS2/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nLODASH                    = CND.LODASH\n#...........................................................................................................\n# ### https://github.com/dominictarr/event-stream ###\n# ES                        = require 'event-stream'\ntest                      = require 'guy-test'\n# A                         = T.asynchronous\nDS                        = require './densort'\n\n#-----------------------------------------------------------------------------------------------------------\nget_index = ( element, key ) -> if ( CND.isa_function key ) then key element else element[ key ]\n\n#-----------------------------------------------------------------------------------------------------------\ncollect_and_check = ( T, key, first_idx, input, max_buffer_size = null ) ->\n  output        = []\n  target        = LODASH.sortBy ( LODASH.cloneDeep input ), key\n  element_count = input.length\n  ds            = DS.new_densort key, first_idx, ( stats ) ->\n    # info \"densort report:\", stats\n    T.eq stats, [ element_count, max_buffer_size, ] if max_buffer_size?\n  #.........................................................................................................\n  for collection in [ input, [ null, ], ]\n    for input_element in collection\n      ds input_element, ( error, output_element ) ->\n        throw error if error?\n        if output_element?\n          output.push output_element\n        else\n          T.eq output, target\n  #.........................................................................................................\n  last_idx    = element_count + first_idx - 1\n  target_idxs = (                       idx                 for idx in [ first_idx .. last_idx ] by +1 )\n  output_idxs = ( ( get_index ( output[ idx ] ? [] ), key ) for idx in [ first_idx .. last_idx ] by +1 )\n  T.eq output_idxs, target_idxs\n  #.........................................................................................................\n  return output\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 0\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 0\n  input           = []\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 1\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 0\n  input           = [\n    [ 0,  'A', ]\n    [ 1,  'B', ]\n    [ 2,  'C', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 2\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  inputs          = [\n    [ [ [ 0, 'A' ], [ 1, 'B' ], [ 2, 'C' ] ], 0 ]\n    [ [ [ 0, 'A' ], [ 2, 'C' ], [ 1, 'B' ] ], 2 ]\n    [ [ [ 1, 'B' ], [ 0, 'A' ], [ 2, 'C' ] ], 2 ]\n    [ [ [ 1, 'B' ], [ 2, 'C' ], [ 0, 'A' ] ], 3 ]\n    [ [ [ 2, 'C' ], [ 0, 'A' ], [ 1, 'B' ] ], 2 ]\n    [ [ [ 2, 'C' ], [ 1, 'B' ], [ 0, 'A' ] ], 3 ]\n    ]\n  #.........................................................................................................\n  for [ input, max_buffer_size, ] in inputs\n    output = collect_and_check T, key, first_idx, input, max_buffer_size\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 3\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  input           = [\n    [ 0,  'a', ]\n    [ 1,  'b', ]\n    [ 2,  'c', ]\n    [ 3,  'd', ]\n    [ 4,  'e', ]\n    [ 5,  'f', ]\n    [ 6,  'g', ]\n    # [ 7,  'h', ]\n    ]\n  #.........................................................................................................\n  count     = 0\n  messages  = []\n  loop\n    count += +1\n    whisper count if count % 1e5 is 0\n    # input_txt = ( \"#{idx}#{chr}\" for [ idx, chr, ] in input ).join ' '\n    input_txt = ( \"#{idx}\" for [ idx, chr, ] in input ).join ''\n    try\n      collect_and_check T, key, first_idx, input\n      # help input_txt\n    catch error\n      message   = \"#{error[ 'message' ]}: #{input_txt}\"\n      messages.push message\n      warn input_txt\n      T.fail message\n    break unless CND.ez_permute input\n  #.........................................................................................................\n  # help '\\n' + messages.join '\\n'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 4\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  inputs          = [\n    '012345'\n    '102354'\n    '1032'\n    '10243'\n    ]\n  #.........................................................................................................\n  for input in inputs\n    input_txt = input\n    input     = ( [ parseInt chr, 10 ] for chr in input )\n    try\n      output  = collect_and_check T, key, first_idx, input\n    catch error\n      message   = \"#{error[ 'message' ]}: #{input_txt}\"\n      # messages.push message\n      warn input_txt\n      T.fail message\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 5\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 13\n  input           = [\n    [ 1,  'B', ]\n    [ 2,  'C', ]\n    [ 3,  'D', ]\n    [ 4,  'E', ]\n    [ 5,  'F', ]\n    [ 6,  'G', ]\n    [ 7,  'H', ]\n    [ 8,  'I', ]\n    [ 9,  'J', ]\n    [ 10, 'K', ]\n    [ 11, 'L', ]\n    [ 12, 'M', ]\n    [ 0,  'A', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 6\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 7\n  input           = [\n    [ 2,  'C', ]\n    [ 3,  'D', ]\n    [ 4,  'E', ]\n    [ 5,  'F', ]\n    [ 6,  'G', ]\n    [ 1,  'B', ]\n    [ 0,  'A', ]\n    [ 7,  'H', ]\n    [ 8,  'I', ]\n    [ 9,  'J', ]\n    [ 10, 'K', ]\n    [ 11, 'L', ]\n    [ 12, 'M', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 7\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 1\n  max_buffer_size = null\n  input           = [\n    [ 0, 'A', ], [ 1, 'B', ], [ 2, 'C', ], [ 3, 'D', ], [ 4, 'E', ], ]\n  #.........................................................................................................\n  T.throws 'index too small: 0', -> collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 7\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = null\n  input           = [\n    [ 0, 'A', ], [ 1, 'B', ], [ 2, 'C', ], [ 4, 'E', ], ]\n  #.........................................................................................................\n  T.throws 'detected missing elements', -> collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n\n\n\n\n\n############################################################################################################\nsettings = 'timeout': 2500\ntest @, settings\n\n"]}