{"version":3,"sources":["tests.coffee"],"names":[],"mappings":"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","file":"tests.js","sourceRoot":"/source/","sourcesContent":["\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr.bind CND\nbadge                     = 'PIPEDREAMS2/tests'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nLODASH                    = CND.LODASH\n#...........................................................................................................\n# ### https://github.com/dominictarr/event-stream ###\n# ES                        = require 'event-stream'\ntest                      = require 'guy-test'\n# A                         = T.asynchronous\nDS                        = require './densort'\n#...........................................................................................................\nD                         = require './main'\n$                         = D.remit.bind D\n$async                    = D.remit_async.bind D\n\n\n#-----------------------------------------------------------------------------------------------------------\nget_index = ( element, key ) -> if ( CND.isa_function key ) then key element else element[ key ]\n\n#-----------------------------------------------------------------------------------------------------------\ncollect_and_check = ( T, key, first_idx, input, max_buffer_size = null ) ->\n  output        = []\n  target        = LODASH.sortBy ( LODASH.cloneDeep input ), key\n  element_count = input.length\n  ds            = DS.new_densort key, first_idx, ( stats ) ->\n    # info \"densort report:\", stats\n    T.eq stats, [ element_count, max_buffer_size, ] if max_buffer_size?\n  #.........................................................................................................\n  for collection in [ input, [ null, ], ]\n    for input_element in collection\n      ds input_element, ( error, output_element ) ->\n        throw error if error?\n        if output_element?\n          output.push output_element\n        else\n          T.eq output, target\n  #.........................................................................................................\n  last_idx    = element_count + first_idx - 1\n  target_idxs = (                       idx                 for idx in [ first_idx .. last_idx ] by +1 )\n  output_idxs = ( ( get_index ( output[ idx ] ? [] ), key ) for idx in [ first_idx .. last_idx ] by +1 )\n  T.eq output_idxs, target_idxs\n  #.........................................................................................................\n  return output\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 0\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 0\n  input           = []\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 1\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 0\n  input           = [\n    [ 0,  'A', ]\n    [ 1,  'B', ]\n    [ 2,  'C', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 2\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  inputs          = [\n    [ [ [ 0, 'A' ], [ 1, 'B' ], [ 2, 'C' ] ], 0 ]\n    [ [ [ 0, 'A' ], [ 2, 'C' ], [ 1, 'B' ] ], 2 ]\n    [ [ [ 1, 'B' ], [ 0, 'A' ], [ 2, 'C' ] ], 2 ]\n    [ [ [ 1, 'B' ], [ 2, 'C' ], [ 0, 'A' ] ], 3 ]\n    [ [ [ 2, 'C' ], [ 0, 'A' ], [ 1, 'B' ] ], 2 ]\n    [ [ [ 2, 'C' ], [ 1, 'B' ], [ 0, 'A' ] ], 3 ]\n    ]\n  #.........................................................................................................\n  for [ input, max_buffer_size, ] in inputs\n    output = collect_and_check T, key, first_idx, input, max_buffer_size\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 3\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  input           = [\n    [ 0,  'a', ]\n    [ 1,  'b', ]\n    [ 2,  'c', ]\n    [ 3,  'd', ]\n    [ 4,  'e', ]\n    [ 5,  'f', ]\n    [ 6,  'g', ]\n    # [ 7,  'h', ]\n    ]\n  #.........................................................................................................\n  count     = 0\n  messages  = []\n  loop\n    count += +1\n    whisper count if count % 1e5 is 0\n    # input_txt = ( \"#{idx}#{chr}\" for [ idx, chr, ] in input ).join ' '\n    input_txt = ( \"#{idx}\" for [ idx, chr, ] in input ).join ''\n    try\n      collect_and_check T, key, first_idx, input\n      # help input_txt\n    catch error\n      message   = \"#{error[ 'message' ]}: #{input_txt}\"\n      messages.push message\n      warn input_txt\n      T.fail message\n    break unless CND.ez_permute input\n  #.........................................................................................................\n  # help '\\n' + messages.join '\\n'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 4\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  inputs          = [\n    '012345'\n    '102354'\n    '1032'\n    '10243'\n    ]\n  #.........................................................................................................\n  for input in inputs\n    input_txt = input\n    input     = ( [ parseInt chr, 10 ] for chr in input )\n    try\n      output  = collect_and_check T, key, first_idx, input\n    catch error\n      message   = \"#{error[ 'message' ]}: #{input_txt}\"\n      # messages.push message\n      warn input_txt\n      T.fail message\n  #.........................................................................................................\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 5\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 13\n  input           = [\n    [ 1,  'B', ]\n    [ 2,  'C', ]\n    [ 3,  'D', ]\n    [ 4,  'E', ]\n    [ 5,  'F', ]\n    [ 6,  'G', ]\n    [ 7,  'H', ]\n    [ 8,  'I', ]\n    [ 9,  'J', ]\n    [ 10, 'K', ]\n    [ 11, 'L', ]\n    [ 12, 'M', ]\n    [ 0,  'A', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 6\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = 7\n  input           = [\n    [ 2,  'C', ]\n    [ 3,  'D', ]\n    [ 4,  'E', ]\n    [ 5,  'F', ]\n    [ 6,  'G', ]\n    [ 1,  'B', ]\n    [ 0,  'A', ]\n    [ 7,  'H', ]\n    [ 8,  'I', ]\n    [ 9,  'J', ]\n    [ 10, 'K', ]\n    [ 11, 'L', ]\n    [ 12, 'M', ]\n    ]\n  #.........................................................................................................\n  output = collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 7\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 1\n  max_buffer_size = null\n  input           = [\n    [ 0, 'A', ], [ 1, 'B', ], [ 2, 'C', ], [ 3, 'D', ], [ 4, 'E', ], ]\n  #.........................................................................................................\n  T.throws 'index too small: 0', -> collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"densort 7\" ] = ( T, done ) ->\n  key             = 0\n  first_idx       = 0\n  max_buffer_size = null\n  input           = [\n    [ 0, 'A', ], [ 1, 'B', ], [ 2, 'C', ], [ 4, 'E', ], ]\n  #.........................................................................................................\n  T.throws 'detected missing elements', -> collect_and_check T, key, first_idx, input, max_buffer_size\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_pipeline accepts missing settings argument\" ] = ( T, done ) ->\n  create_frob_tee = null\n  #.........................................................................................................\n  do ->\n    create_frob_tee = ( settings ) ->\n      multiply      = $ ( data, send ) => send data * 2\n      add           = $ ( data, send ) => send data + 2\n      square        = $ ( data, send ) => send data ** 2\n      unsquared     = D.create_throughstream()\n      #.....................................................................................................\n      transforms    = [ multiply, add, unsquared, square, ]\n      #.....................................................................................................\n      return D.TEE.from_pipeline transforms\n  #.........................................................................................................\n  do ->\n    probes              = [ 1 ... 10 ]\n    output_matchers     = [ 16, 36, 64, 100, 144, 196, 256, 324, 400, ]\n    output_results      = []\n    tee                 = create_frob_tee()\n    { input, output, }  = tee\n    #.......................................................................................................\n    output\n      .pipe $ ( data, send ) =>\n        output_results.push data\n        send data\n      #.....................................................................................................\n      # .pipe D.$show()\n      #.....................................................................................................\n      output.on 'end', =>\n        T.eq output_results, output_matchers\n        done()\n    #.......................................................................................................\n    input.write n for n in probes\n    input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_pipeline reflects extra settings\" ] = ( T, done ) ->\n  settings  =\n    inputs:\n      foo:    D.create_throughstream()\n    bar:      []\n    baz:      42\n  pipeline  = [ D.$show(), ]\n  tee       = D.TEE.from_pipeline pipeline, settings\n  T.eq tee[ 'inputs' ][ 'foo' ], settings[ 'inputs' ][ 'foo' ]\n  T.eq tee[ 'bar' ], settings[ 'bar' ]\n  T.eq tee[ 'baz' ], settings[ 'baz' ]\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_pipeline 1\" ] = ( T, done ) ->\n  create_frob_tee = null\n  #.........................................................................................................\n  do ->\n    create_frob_tee = ( settings ) ->\n      multiply      = $ ( data, send ) => send data * 2\n      add           = $ ( data, send ) => send data + 2\n      square        = $ ( data, send ) => send data ** 2\n      unsquared     = D.create_throughstream()\n      #.....................................................................................................\n      inputs        = { add, }\n      outputs       = { unsquared, }\n      transforms    = [ multiply, add, unsquared, square, ]\n      #.....................................................................................................\n      return D.TEE.from_pipeline transforms, { inputs, outputs, }\n  #.........................................................................................................\n  do ->\n    probes              = [ 1 ... 10 ]\n    output_matchers     = [ 16, 36, 64, 64, 100, 144, 196, 256, 324, 400, ]\n    output_results      = []\n    unsquared_matchers  = [ 4, 6, 8, -8, 10, 12, 14, 16, 18, 20, ]\n    unsquared_results   = []\n    tee                 = create_frob_tee()\n    { input, output, inputs, outputs, } = tee\n    outputs[ 'unsquared' ].pipe $ ( data, send ) =>\n      unsquared_results.push data\n    #.......................................................................................................\n    output\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        inputs[ 'add' ].write -10 if data is 100\n        send data\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        output_results.push data\n        send data\n      #.....................................................................................................\n      .pipe D.$show()\n      #.....................................................................................................\n      output.on 'end', =>\n        T.eq unsquared_results, unsquared_matchers\n        T.eq    output_results,    output_matchers\n        done()\n    #.......................................................................................................\n    input.write n for n in probes\n    input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_pipeline 2\" ] = ( T, done ) ->\n  create_frob_tee = null\n  #.........................................................................................................\n  do ->\n    create_frob_tee = ( settings ) ->\n      multiply      = $ ( data, send ) => send data * 2\n      add           = $ ( data, send ) => send data + 2\n      square        = $ ( data, send ) => send data ** 2\n      unsquared     = D.create_throughstream()\n      #.....................................................................................................\n      inputs        = { add, }\n      outputs       = { unsquared, }\n      transforms    = [ multiply, add, unsquared, square, ]\n      #.....................................................................................................\n      return D.TEE.from_pipeline transforms, { inputs, outputs, }\n  #.........................................................................................................\n  do ->\n    probes              = [ 1 ... 10 ]\n    matchers            = [ 16, 36, 64, 100, 144, 196, 256, 324, 400, ]\n    results             = []\n    tee                 = create_frob_tee()\n    input               = D.create_throughstream()\n    output              = D.create_throughstream()\n    #.......................................................................................................\n    input\n      .pipe tee[ 'confluence' ]\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        results.push data\n        send data\n      #.....................................................................................................\n      .pipe D.$show()\n      .pipe output\n      #.....................................................................................................\n      .pipe D.$on_end =>\n        T.eq results, matchers\n        done()\n    #.......................................................................................................\n    input.write n for n in probes\n    input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"D.combine produces new stream from existing ones 1\" ] = ( T, done ) ->\n  probes      = [ 10 .. 20 ]\n  matchers    = [20,22,24,26,28,30,32,34,36,38,40]\n  results     = []\n  input       = D.create_throughstream()\n  output      = D.create_throughstream()\n  confluence  = D.combine input, output\n  input\n    .pipe $ ( data, send ) => send n * 2\n    .pipe $ ( data, send ) => results.push data; send data\n    .pipe D.$show()\n  for n in probes\n    input.write n\n  input.end()\n  # debug '©ΧΞΩΞΒ', JSON.stringify results\n  T.eq results, matchers\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"D.combine produces new stream from existing ones 2\" ] = ( T, done ) ->\n  probes      = [ 10 .. 20 ]\n  matchers    = [20,22,24,26,28,30,32,34,36,38,40]\n  results     = []\n  input       = D.create_throughstream()\n  # output      = D.create_throughstream()\n  transforms = [\n    ( $ ( data, send ) => send n + 2 )\n    ( $ ( data, send ) => send n * 2 )\n    ]\n  confluence  = D.combine input, transforms...\n  confluence\n    .pipe $ ( data, send ) => results.push data; send data\n    .pipe D.$show()\n  for n in probes\n    input.write n\n  input.end()\n  # debug '©ΧΞΩΞΒ', JSON.stringify results\n  T.eq results, matchers\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_readwritestreams 1\" ] = ( T, done ) ->\n  create_frob_tee       = null\n  #.........................................................................................................\n  do ->\n    create_frob_tee = ( settings ) ->\n      multiply      = $ ( data, send ) => send data * 2\n      add           = $ ( data, send ) => send data + 2\n      square        = $ ( data, send ) => send data ** 2\n      unsquared     = D.create_throughstream()\n      #.....................................................................................................\n      inputs        = { add, }\n      outputs       = { unsquared, }\n      readstream    = D.create_throughstream()\n      writestream   = D.create_throughstream()\n      readstream\n        .pipe multiply\n        .pipe add\n        .pipe unsquared\n        .pipe square\n        .pipe writestream\n      #.......................................................................................................\n      return D.TEE.from_readwritestreams readstream, writestream, { inputs, outputs, }\n  #.........................................................................................................\n  do ->\n    probes              = [ 1 ... 10 ]\n    output_matchers     = [ 16, 36, 64, 64, 100, 144, 196, 256, 324, 400, ]\n    output_results      = []\n    unsquared_matchers  = [ 4, 6, 8, -8, 10, 12, 14, 16, 18, 20, ]\n    unsquared_results   = []\n    tee                 = create_frob_tee()\n    { input, output, inputs, outputs, } = tee\n    outputs[ 'unsquared' ].pipe $ ( data, send ) =>\n      unsquared_results.push data\n    #.......................................................................................................\n    output\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        inputs[ 'add' ].write -10 if data is 100\n        send data\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        output_results.push data\n        send data\n      #.....................................................................................................\n      # .pipe D.$show()\n      #.....................................................................................................\n      output.on 'end', =>\n        # T.fail \"not yet ready\"\n        T.eq unsquared_results, unsquared_matchers\n        T.eq    output_results,    output_matchers\n        done()\n    #.......................................................................................................\n    input.write n for n in probes\n    input.end()\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"TEE.from_readwritestreams 2\" ] = ( T, done ) ->\n  create_frob_tee       = null\n  #.........................................................................................................\n  do ->\n    create_frob_tee = ( settings ) ->\n      multiply      = $ ( data, send ) => send data * 2\n      add           = $ ( data, send ) => send data + 2\n      square        = $ ( data, send ) => send data ** 2\n      unsquared     = D.create_throughstream()\n      #.....................................................................................................\n      inputs        = { add, }\n      outputs       = { unsquared, }\n      readstream    = D.create_throughstream()\n      writestream   = D.create_throughstream()\n      readstream\n        .pipe multiply\n        .pipe add\n        .pipe unsquared\n        .pipe square\n        .pipe writestream\n      #.......................................................................................................\n      return D.TEE.from_readwritestreams readstream, writestream, { inputs, outputs, }\n  #.........................................................................................................\n  do ->\n    probes              = [ 1 ... 10 ]\n    matchers            = [ 16, 36, 64, 100, 144, 196, 256, 324, 400, ]\n    results             = []\n    tee                 = create_frob_tee()\n    input               = D.create_throughstream()\n    #.......................................................................................................\n    input\n      .pipe tee[ 'confluence' ]\n      #.....................................................................................................\n      .pipe $ ( data, send ) =>\n        results.push data\n        send data\n      #.....................................................................................................\n      .pipe D.$show()\n      #.....................................................................................................\n      .pipe D.$on_end =>\n        # T.fail \"not yet ready\"\n        T.eq results, matchers\n        done()\n    #.......................................................................................................\n    input.write n for n in probes\n    input.end()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"stream_from_text\" ] = ( T, done ) ->\n  text = \"\"\"\n    Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\n    codepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\n    as five characters. Dictionaries will list 馬马 as 'one character with two variants’\n    and 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\n    here.\n    \"\"\"\n  input     = D.stream_from_text text\n  count     = 0\n  input\n    .pipe $ ( data, send, end ) ->\n      if data?\n        T.eq data, text\n        count += +1\n      if end?\n        T.eq count, 1\n        end()\n        done()\n  input.resume()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"synchronous collect\" ] = ( T, done ) ->\n  text = \"\"\"\n    Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\n    codepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\n    as five characters. Dictionaries will list 馬马 as 'one character with two variants’\n    and 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\n    here.\n    \"\"\"\n  input   = D.stream_from_text text\n  input   = input.pipe D.$split()\n  result  = D.collect input\n  input.resume()\n  T.eq result, text.split '\\n'\n  done()\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"asynchronous collect\" ] = ( T, done ) ->\n  text = \"\"\"\n    Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\n    codepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\n    as five characters. Dictionaries will list 馬马 as 'one character with two variants’\n    and 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\n    here.\n    \"\"\"\n  input   = D.stream_from_text text\n  #.........................................................................................................\n  stream  = input\n    .pipe D.$split()\n    .pipe $async ( line, D_done ) => setTimeout ( => D_done line ), 200\n  #.........................................................................................................\n  D.collect stream, ( error, result ) =>\n    T.eq result, text.split '\\n'\n    debug '©4D8tA', 'done'\n    done()\n  #.........................................................................................................\n  input.resume()\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"stream_from_text\" ] = ( T, done ) ->\n#   text = \"\"\"\n#     Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\n#     codepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\n#     as five characters. Dictionaries will list 馬马 as 'one character with two variants’\n#     and 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\n#     here.\n#     \"\"\"\n#   input = D.stream_from_text text\n#   input\n#     .pipe D.$split()\n#     .pipe D.$join '--\\n'\n#     .pipe D.$observe ( data ) -> urge data\n#   input.resume()\n\n\n############################################################################################################\n@_main = ->\n  settings = 'timeout': 2500\n  test @, settings\n\n@_main() unless module.parent?\n\n\n\n"]}