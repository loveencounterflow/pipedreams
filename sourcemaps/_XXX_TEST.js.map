{"version":3,"sources":["_XXX_TEST.coffee"],"names":[],"mappings":"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","file":"_XXX_TEST.js","sourceRoot":"/source/","sourcesContent":["\n\n\n############################################################################################################\nTRM                       = require 'coffeenode-trm'\nrpr                       = TRM.rpr.bind TRM\nbadge                     = 'TEST'\nlog                       = TRM.get_logger 'plain',     badge\ninfo                      = TRM.get_logger 'info',      badge\nwhisper                   = TRM.get_logger 'whisper',   badge\nalert                     = TRM.get_logger 'alert',     badge\ndebug                     = TRM.get_logger 'debug',     badge\nwarn                      = TRM.get_logger 'warn',      badge\nhelp                      = TRM.get_logger 'help',      badge\nurge                      = TRM.get_logger 'urge',      badge\necho                      = TRM.echo.bind TRM\n#...........................................................................................................\nBNP                       = require 'coffeenode-bitsnpieces'\nASYNC                     = require 'async'\n\n\n#-----------------------------------------------------------------------------------------------------------\nME = @\n\n#-----------------------------------------------------------------------------------------------------------\n@get_caller_description = ( delta = 1 ) ->\n  locator = ( BNP.get_caller_locators delta + 1 )[ 0 ]\n  return BNP.caller_description_from_locator locator\n\n#-----------------------------------------------------------------------------------------------------------\nmodule.exports = run = ( x ) ->\n  T             = {}\n  test_count    = 0\n  check_count   = 0\n  pass_count    = 0\n  fail_count    = 0\n  failures      = {}\n\n  #=========================================================================================================\n  # ERROR HANDLING\n  #---------------------------------------------------------------------------------------------------------\n  error_handler = ( error ) =>\n    # throw error if error?\n    ### NB `entry[ 'name' ]` should normally match `entry[ 'caller' ][ 'function-name' ]`\n    and `entry[ 'caller' ][ 'method-name' ]` ###\n    # caller      = error[ 'caller'  ] ? ( supply_caller_to_error error )[ 'caller' ]\n    caller      = error[ 'caller'  ]\n    entry       =\n      'name':     name\n      'message':  error[ 'message' ]\n      'caller':   caller\n    fail_count += 1 unless caller?\n    target      = failures[ name ]?= []\n    target.push [ entry, ]\n\n  #---------------------------------------------------------------------------------------------------------\n  supply_caller_to_error = ( delta, error = null ) =>\n    delta            += +1 unless error?\n    error[ 'caller' ] = BNP.get_caller_info delta, error, yes\n    fail_count       += 1\n    return error\n\n  #---------------------------------------------------------------------------------------------------------\n  process.on 'uncaughtException', ( error ) ->\n    ### TAINT code duplication ###\n    supply_caller_to_error 0, error unless error[ 'caller' ]?\n    debug '©ZBBpY', error\n    error_handler error\n\n  #=========================================================================================================\n  # TEST METHODS\n  #---------------------------------------------------------------------------------------------------------\n  T.eq = ( P... ) ->\n    ### Tests whether all arguments are pairwise and deeply equal. Uses CoffeeNode Bits'n'Pieces' `equal`\n    for testing as (1) Node's `assert` distinguishes—unnecessarily—between shallow and deep equality, and,\n    worse, [`assert.equal` and `assert.deepEqual` are broken](https://github.com/joyent/node/issues/7161),\n    as they use JavaScript's broken `==` equality operator instead of `===`. ###\n    check_count += 1\n    if BNP.equals P...\n      pass_count       += 1\n    else\n      error = new Error \"not equal: #{rpr P}\"\n      throw supply_caller_to_error 1, error\n\n  #---------------------------------------------------------------------------------------------------------\n  T.rsvp = ( callback ) ->\n    return ( error, P... ) =>\n      ### TAINT need better error handling ###\n      throw error if error?\n      return callback P...\n\n  #---------------------------------------------------------------------------------------------------------\n  T.ok = ( result ) ->\n    ### Tests whether `result` is strictly `true` (not only true-ish). ###\n    check_count += 1\n    if result is true\n      pass_count       += 1\n    else\n      fail_count       += 1\n      error             = new Error \"not OK: #{rpr result}\"\n      error[ 'caller' ] = ME.get_caller_description 1\n      debug '©zYIQA', error\n      throw error\n\n  #---------------------------------------------------------------------------------------------------------\n  T.fail = ( message ) ->\n    throw new Error message\n\n  #=========================================================================================================\n  # TEST EXECUTION\n  #---------------------------------------------------------------------------------------------------------\n  run = ->\n    for name, test of x\n      test = test.bind x\n      test_count += 1\n      #.......................................................................................................\n      switch arity = test.length\n        #.....................................................................................................\n        when 1\n          try\n            test T\n          catch error\n            ### TAINT code duplication ###\n            supply_caller_to_error 0, error unless error[ 'caller' ]?\n            error_handler error\n        #.....................................................................................................\n        when 2\n          ### TAINT need ASYNC or similar to manage callbacks in concert with synhronous code ###\n          try\n            test T, error_handler\n          catch error\n            ### TAINT code duplication ###\n            supply_caller_to_error 0, error unless error[ 'caller' ]?\n            error_handler error\n        #.....................................................................................................\n        else\n          throw new Error \"expected test with 1 or 2 arguments, got one with #{arity}\"\n\n  #---------------------------------------------------------------------------------------------------------\n  report = ->\n    info 'test_count:   ',   test_count\n    info 'check_count:  ',   check_count\n    info 'pass_count:   ',   pass_count\n    info 'fail_count:   ',   fail_count\n    info 'failures:     ',   failures\n\n  #---------------------------------------------------------------------------------------------------------\n  ### TANT `report` must only run on callback from `run` because async ###\n  run()\n  report()\n\n\n"]}