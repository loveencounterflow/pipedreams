{
  "version": 3,
  "file": "events.js",
  "sourceRoot": "..",
  "sources": [
    "src/events.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/EVENTS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( d ) ->\n  ### Set the `stamped` attribute on event to sigil it as processed. Stamped events will not be selected\n  by the `select` method unless tag '#stamped' is used. ###\n  d.stamped = true\n  return d\n\n#-----------------------------------------------------------------------------------------------------------\n@is_system = ( d ) ->\n  ### Return whether event is a system event (i.e. whether its `sigil` equals `'~'`). ###\n  return d.key.match /^[~\\[\\]]/\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped = ( d ) ->\n  ### Return whether event is stamped (i.e. already processed). ###\n  return d.stamped ? false\n\n#-----------------------------------------------------------------------------------------------------------\n@new_event = ( key, value, other... ) ->\n  ### TAINT should validate key ###\n  ### When `other` contains a key `$`, it is treated as a hint to copy\n  system-level attributes; if the value of key `$` is a POD that has itself a\n  key `$`, then a copy of that value is used. This allows to write `new_event\n  ..., $: d` to copy system-level attributes such as source locations to a new\n  event. ###\n  if value? then  R = assign { key, value, }, other...\n  else            R = assign { key,        }, other...\n  ### TAINT consider to resolve recursively ###\n  if ( CND.isa_pod R.$ ) and ( CND.isa_pod R.$.$ ) then R.$ = copy R.$.$\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_single_event   = ( key, value, other...  ) -> @new_event         \"^#{key}\",  value, other...\n@new_open_event     = ( key, value, other...  ) -> @new_event         \"<#{key}\",  value, other...\n@new_close_event    = ( key, value, other...  ) -> @new_event         \">#{key}\",  value, other...\n@new_system_event   = ( key, value, other...  ) -> @new_event         \"~#{key}\",  value, other...\n@new_text_event     = (      value, other...  ) -> @new_single_event  'text',     value, other...\n@new_end_event      =                           -> @new_system_event  'end'\n@new_flush_event    =                           -> @new_system_event  'flush'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_warning = ( ref, message, d, other...  ) ->\n  @new_system_event 'warning', d, { ref, message, }, other...\n\n\n\n"
  ]
}