// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, L, PATH, assign, badge, debug, echo, glob, help, info, isa, jr, minimatch, override_sym, rpr, type_of, types, urge, validate, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/ADD_POSITION';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  glob = require('glob');

  minimatch = require('minimatch');

  ({assign, jr} = CND);

  override_sym = Symbol.for('override');

  L = this;

  //...........................................................................................................
  types = require('./_types');

  ({isa, validate, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  this.$add_position = function() {
    /*

    ```
    {"value":1,"$first":true,"$last":true}
    ```

    ```
    {"value":1,"$first":true}
    {"value":2,"$last":true}
    ```

    ```
    {"value":1,"$first":true}
    {"value":2}
    {"value":3}
    {"value":4}
    {"value":5,"$last":true}
    ```

    */
    var is_first, last, prv_d;
    is_first = true;
    prv_d = null;
    last = Symbol('last');
    //.........................................................................................................
    return this.$({last}, (d, send) => {
      //.......................................................................................................
      if (d === last) {
        if (prv_d != null) {
          if (is_first) {
            prv_d = this.set(prv_d, '$first', true);
          }
          prv_d = this.set(prv_d, '$last', true);
          send(prv_d);
        }
      } else {
        //.......................................................................................................
        if (prv_d != null) {
          send(prv_d);
        }
        prv_d = (isa.object(d)) ? d : this.freeze({
          value: d,
          key: '^value'
        });
        if (is_first) {
          prv_d = this.set(prv_d, '$first', true);
        }
        is_first = false;
      }
      //.......................................................................................................
      return null;
    });
  };

}).call(this);

//# sourceMappingURL=add_position.js.map
