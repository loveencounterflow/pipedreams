// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, badge, debug, echo, help, info, rpr, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/SELECT';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //-----------------------------------------------------------------------------------------------------------
  this._keypattern = /^(?<sigils>[<^>~]*)\s*(?:(?<prefix>[^:<^>~\s]+?):)?\s*(?<name>[^:<^>~\s]*)$/;

  //-----------------------------------------------------------------------------------------------------------
  this._tag_from_selector = function(selector) {
    if (!((CND.isa_text(selector)) && (selector.startsWith('#')) && (selector.length > 1))) {
      /* Return tag if `selector` is marked as tag selector, `null` otherwise. */
      return null;
    }
    return selector.slice(1);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._classify_selector = function(selector) {
    var match, tag, type;
    if (CND.isa_function(selector)) {
      return ['function', selector];
    }
    if ((type = CND.type_of(selector)) !== 'text') {
      throw new Error(`µ99843 expected a text, got a ${type}`);
    }
    if ((tag = this._tag_from_selector(selector)) != null) {
      return ['tag', tag];
    }
    if ((match = selector.match(this._keypattern)) != null) {
      return ['keypattern', match.groups];
    }
    throw new Error(`µ99843 illegal selector ${rpr(selector)}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._match_keypattern = function(d_key, keypattern) {
    var match, name_ok, prefix_ok, sigil, sigils_ok;
    if (!((CND.isa_text(d_key)) && (d_key.length > 1))) {
      throw new Error(`µ77784 illegal event key ${rpr(d_key)}`);
    }
    sigil = d_key[0];
    if (!(indexOf.call('<^>~', sigil) >= 0)) {
      throw new Error(`µ77784 event key ${rpr(d_key)} has illegal sigil ${rpr(sigil)}`);
    }
    sigils_ok = indexOf.call(keypattern.sigils, sigil) >= 0;
    if (!sigils_ok) {
      return false;
    }
    if ((match = d_key.match(this._keypattern)) == null) {
      //.........................................................................................................
      throw new Error(`µ77784 illegal event key ${rpr(d_key)}`);
    }
    if ((keypattern.prefix != null) && (keypattern.prefix !== '*')) {
      prefix_ok = match.groups.prefix === keypattern.prefix;
      if (!prefix_ok) {
        return false;
      }
    }
    //.........................................................................................................
    if ((keypattern.name != null) && (keypattern.name.length > 0)) {
      name_ok = keypattern.name === match.groups.name;
      if (!name_ok) {
        return false;
      }
    }
    //.........................................................................................................
    return true;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._select_one = function(d, selector) {
    var clasz;
    [clasz, selector] = this._classify_selector(selector);
    switch (clasz) {
      case 'function':
        return selector(d);
      case 'tag':
        return _match_tag(d, selector);
      case 'keypattern':
        return this._match_keypattern(d, selector);
    }
    throw new Error(`µ37373 illegal selector class ${rpr(clasz)}`);
  };

}).call(this);

//# sourceMappingURL=select.js.map
