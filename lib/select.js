// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, assign, badge, debug, echo, help, info, isa, jr, rpr, type_of, types, urge, validate, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/SELECT';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({assign, jr} = CND);

  //...........................................................................................................
  types = require('./_types');

  ({isa, validate, type_of} = types);

  //-----------------------------------------------------------------------------------------------------------
  /* TAINT use named subpatterns */
  this._datom_keypattern = /^(?<sigil>[<^>~\[\]])(?:(?<prefix>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+?):)?(?<name>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+)$/;

  //-----------------------------------------------------------------------------------------------------------
  this._selector_keypattern = /^(?<sigils>[<^>~\[\]]*)(?:(?<prefix>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+?):)?(?<name>[^:<^>~!$%&\/()=?+*'",.;|\#\s]*)$/;

  //-----------------------------------------------------------------------------------------------------------
  this._tag_pattern = /^\#(?<tag>[^:<^>~!$%&\/\[\]{()}=?+*'",.;|\#\s]*)$/;

  //-----------------------------------------------------------------------------------------------------------
  this._tag_from_selector = function(selector) {
    var match;
    if (!CND.isa_text(selector)) {
      /* Return tag if `selector` is marked as tag selector, `null` otherwise. */
      return null;
    }
    if ((match = selector.match(this._tag_pattern)) == null) {
      return null;
    }
    return match.groups.tag;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._match_keypattern = function(key_facets, selector_facets, settings) {
    var ref;
    if ((selector_facets.sigils != null) && !(ref = key_facets.sigil, indexOf.call(selector_facets.sigils, ref) >= 0)) {
      return false;
    }
    if ((selector_facets.prefix == null) && (key_facets.prefix != null)) {
      return false;
    }
    if ((selector_facets.prefix != null) && !(key_facets.prefix === selector_facets.prefix)) {
      return false;
    }
    if ((selector_facets.name != null) && !(key_facets.name === selector_facets.name)) {
      return false;
    }
    return true;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this._classify_selector = function(selector) {
    var tag, type;
    if (CND.isa_function(selector)) {
      return ['function', selector];
    }
    if ((type = type_of(selector)) !== 'text') {
      throw new Error(`µ85175 expected a text, got a ${type}`);
    }
    if ((tag = this._tag_from_selector(selector)) != null) {
      return ['tag', tag];
    }
    return ['keypattern', this._selector_as_facets(selector)];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._key_as_facets = function(key) {
    return this._key_or_pattern_as_facets(key, this._datom_keypattern);
  };

  this._selector_as_facets = function(selector) {
    return this._key_or_pattern_as_facets(selector, this._selector_keypattern);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._key_or_pattern_as_facets = function(x, re) {
    var R, k, match, v;
    if (!((isa.text(x)) && ((match = x.match(re)) != null))) {
      throw new Error(`µ83744 illegal key or selector ${rpr(x)}`);
    }
    R = match.groups;
    for (k in R) {
      v = R[k];
      if (v === '' || v === null || v === (void 0)) {
        delete R[k];
      }
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._settings_defaults = {
    stamped: false
  };

  //-----------------------------------------------------------------------------------------------------------
  this._settings_from_tags = function(tags) {
    var R, tag;
    R = assign({}, this._settings_defaults);
    for (tag of tags) {
      switch (tag) {
        case 'stamped':
          R.stamped = true;
          break;
        default:
          throw new Error(`µ20201 illegal tag ${rpr(tag)}`);
      }
    }
    return R;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.select = function(d, ...selectors) {
    var classes_and_selectors, clasz, error, i, is_matching, j, key_facets, l, len, len1, len2, other_selectors, selector, settings, tags;
    if (selectors.length === 0) {
      throw new Error("µ86606 expected one or more selectors, got none");
    }
    if (!isa.object(d)) {
      return false;
    }
    if (d.key == null) {
      return false;
    }
    //.........................................................................................................
    key_facets = this._key_as_facets(d.key);
    tags = new Set();
    other_selectors = [];
    selectors = CND.flatten(selectors);
    classes_and_selectors = [];
//.........................................................................................................
    for (i = 0, len = selectors.length; i < len; i++) {
      selector = selectors[i];
      try {
        classes_and_selectors.push(this._classify_selector(selector));
      } catch (error1) {
        error = error1;
        error.message += `\nµ22092 datom ${jr(d)},\nselector ${jr(selector)}`;
        throw error;
      }
    }
//.........................................................................................................
    for (j = 0, len1 = classes_and_selectors.length; j < len1; j++) {
      [clasz, selector] = classes_and_selectors[j];
      if (clasz === 'tag') {
        tags.add(selector);
      } else {
        other_selectors.push([clasz, selector]);
      }
    }
    //.........................................................................................................
    settings = this._settings_from_tags(tags);
    if (d.stamped && !settings.stamped) {
      return false;
    }
//.........................................................................................................
    for (l = 0, len2 = other_selectors.length; l < len2; l++) {
      [clasz, selector] = other_selectors[l];
      is_matching = (function() {
        switch (clasz) {
          case 'function':
            return selector(d);
          case 'keypattern':
            return this._match_keypattern(key_facets, selector, settings);
          default:
            throw new Error(`µ86129 illegal selector class ${rpr(clasz)}`);
        }
      }).call(this);
      if (!is_matching) {
        return false;
      }
    }
    return true;
  };

}).call(this);

//# sourceMappingURL=select.js.map
