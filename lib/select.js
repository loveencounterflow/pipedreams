// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, badge, debug, echo, help, info, rpr, urge, warn, whisper,
    indexOf = [].indexOf;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/SELECT';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //-----------------------------------------------------------------------------------------------------------
  this._event_keypattern = /^(?<sigil>[<^>~])(?:(?<prefix>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+?):)?(?<name>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+)$/;

  this._selector_keypattern = /^(?<sigils>[<^>~]*)\s*(?:(?<prefix>[^:<^>~!$%&\/()=?+*'",.;|\#\s]+?):)?\s*(?<name>[^:<^>~!$%&\/()=?+*'",.;|\#\s]*)$/;

  //-----------------------------------------------------------------------------------------------------------
  this._tag_from_selector = function(selector) {
    if (!((CND.isa_text(selector)) && (selector.startsWith('#')) && (selector.length > 1))) {
      /* Return tag if `selector` is marked as tag selector, `null` otherwise. */
      return null;
    }
    return selector.slice(1);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._match_keypattern = function(key, selector) {
    var k, key_facets, key_match, ref, selector_facets, selector_match, v;
    //.........................................................................................................
    /* TAINT code duplication */
    if (!((CND.isa_text(key)) && ((key_match = key.match(this._event_keypattern)) != null))) {
      throw new Error(`µ83744 illegal event key ${rpr(key)}`);
    }
    key_facets = key_match.groups;
    for (k in key_facets) {
      v = key_facets[k];
      if (v === '' || v === null || v === (void 0)) {
        delete key_facets[k];
      }
    }
    //.........................................................................................................
    /* TAINT code duplication */
    if (!((CND.isa_text(selector)) && ((selector_match = selector.match(this._selector_keypattern)) != null))) {
      throw new Error(`µ83744 illegal selector ${rpr(selector)}`);
    }
    selector_facets = selector_match.groups;
    for (k in selector_facets) {
      v = selector_facets[k];
      if (v === '' || v === null || v === (void 0)) {
        delete selector_facets[k];
      }
    }
    if ((selector_facets.sigils != null) && !(ref = key_facets.sigil, indexOf.call(selector_facets.sigils, ref) >= 0)) {
      //.........................................................................................................
      return false;
    }
    if ((selector_facets.prefix == null) && (key_facets.prefix != null)) {
      return false;
    }
    if ((selector_facets.prefix != null) && !(key_facets.prefix === selector_facets.prefix)) {
      return false;
    }
    if ((selector_facets.name != null) && !(key_facets.name === selector_facets.name)) {
      return false;
    }
    return true;
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this._classify_selector = function(selector) {
    var match, tag, type;
    if (CND.isa_function(selector)) {
      return ['function', selector];
    }
    if ((type = CND.type_of(selector)) !== 'text') {
      throw new Error(`µ85175 expected a text, got a ${type}`);
    }
    if ((tag = this._tag_from_selector(selector)) != null) {
      return ['tag', tag];
    }
    if ((match = selector.match(this._keypattern)) != null) {
      return ['keypattern', match.groups];
    }
    throw new Error(`µ85652 illegal selector ${rpr(selector)}`);
  };

  //-----------------------------------------------------------------------------------------------------------
  this._select_one = function(d, clasz, selector, settings) {
    switch (clasz) {
      case 'function':
        return selector(d);
      // when 'tag'        then  @_match_tag         d,      selector
      case 'keypattern':
        return this._match_keypattern(d.key, selector);
    }
    throw new Error(`µ86129 illegal selector class ${rpr(clasz)}`);
  };

  //===========================================================================================================

  //-----------------------------------------------------------------------------------------------------------
  this.select = function(d, ...selectors) {
    var classes_and_selectors, clasz, i, j, len, len1, other_selectors, selector, settings, tags;
    if (selectors.length === 0) {
      throw new Error("µ86606 expected one or more selectors, got none");
    }
    tags = [];
    other_selectors = [];
    classes_and_selectors = (function() {
      var i, len, results;
      results = [];
      for (i = 0, len = selectors.length; i < len; i++) {
        selector = selectors[i];
        results.push(this._classify_selector(selector));
      }
      return results;
    }).call(this);
    for (i = 0, len = classes_and_selectors.length; i < len; i++) {
      [clasz, selector] = classes_and_selectors[i];
      if (clasz === 'tag') {
        tags.push(selector);
      } else {
        other_selectors.push(selector);
      }
    }
    debug('37773', [tags, other_selectors]);
    settings = null/* !!!!!!!!!!!!!!! */
    for (j = 0, len1 = other_selectors.length; j < len1; j++) {
      selector = other_selectors[j];
      if (!this._select_one(d, clasz, selector, settings)) {
        return false;
      }
    }
    return true;
  };

}).call(this);

//# sourceMappingURL=select.js.map
