{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nglob                      = require 'globby'\n{ assign\n  jr }                    = CND\noverride_sym              = Symbol.for 'override'\nL                         = @\n\n#-----------------------------------------------------------------------------------------------------------\nis_bound = ( f ) -> ( ( rpr f ).match /^\\[Function: (?:bound )+\\]$/ )?\n\n#-----------------------------------------------------------------------------------------------------------\nacquire_patterns = ( target, patterns ) ->\n  settings  = { cwd: ( PATH.join __dirname ), deep: false, absolute: true, }\n  paths     = glob.sync patterns, settings\n  #.........................................................................................................\n  for path in paths\n    acquire_path target, path\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nacquire_path = ( target, path ) ->\n  module = require path\n  for key, value of module\n    throw new Error \"duplicate key #{rpr key}\" if L[ key ]? and not value[ override_sym ]\n    module[ key ] = ( value.bind module ) if ( CND.isa_function value ) and not is_bound value\n    target[ key ] = module[ key ]\n  return null\n\n\n############################################################################################################\n### Gather methods from submodules, bind all methods to respective submodule, reflect public names into\nmain module. ###\nL.R   = {}\nL.XE  = {}\nacquire_path      L,    'pipestreams'\nacquire_patterns  L,    [ '*.js', '!main.js', '!_*', '!recycle.js', '!overrides.js', '!xemitter.js', ]\nacquire_patterns  L.R,  'recycle.js'\nacquire_patterns  L.XE, 'xemitter.js'\nacquire_patterns  L,    'overrides.js'\n\n\n"
  ]
}