{
  "version": 3,
  "file": "main.js",
  "sourceRoot": "..",
  "sources": [
    "src/main.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,OAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,QAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B;;EAEA,CAAA,GAA4B,KAlB5B;;;EAqBA,OAAA,GAAU,QAAA,CAAE,MAAF,EAAU,QAAV,CAAA;AACR,QAAA,CAAA,EAAA,GAAA,EAAA,GAAA,EAAA,MAAA,EAAA,MAAA,EAAA,IAAA,EAAA,KAAA,EAAA,QAAA,EAAA;IAAA,QAAA,GAAY;MAAE,GAAA,EAAO,IAAI,CAAC,IAAL,CAAU,SAAV,CAAT;MAAgC,IAAA,EAAM,KAAtC;MAA6C,QAAA,EAAU;IAAvD;IACZ,KAAA,GAAY,IAAI,CAAC,IAAL,CAAU,QAAV,EAAoB,QAApB,EADZ;;IAGA,KAAA,uCAAA;;MACE,MAAA,GAAS,OAAA,CAAQ,IAAR;MACT,KAAA,aAAA;;QAEE,IAA8C,cAA9C;;UAAA,MAAM,IAAI,KAAJ,CAAU,CAAA,cAAA,CAAA,CAAiB,GAAA,CAAI,GAAJ,CAAjB,CAAA,CAAV,EAAN;;QACA,IAA8C,GAAG,CAAC,YAAJ,CAAiB,KAAjB,CAA9C;UAAA,MAAQ,CAAA,GAAA,CAAR,GAAgB,MAAA,GAAS,KAAK,CAAC,IAAN,CAAW,MAAX,EAAzB;;QACA,IAAA,CAA8B,GAAG,CAAC,UAAJ,CAAe,GAAf,CAA9B;UAAA,CAAQ,CAAA,GAAA,CAAR,GAAgB,OAAhB;;MAJF;IAFF;AAOA,WAAO;EAXC,EArBV;;;;;EAsCA,OAAA,CAAQ,CAAR,EAAsB,CAAE,MAAF,EAAU,UAAV,EAAsB,KAAtB,EAA6B,aAA7B,CAAtB;;EACA,OAAA,CAAQ,CAAE,CAAC,CAAC,CAAF,GAAM,CAAA,CAAR,CAAR,EAAsB,YAAtB;AAvCA",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/MAIN'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nglob                      = require 'globby'\n{ assign\n  jr }                    = CND\nL                         = @\n\n#-----------------------------------------------------------------------------------------------------------\nacquire = ( target, patterns ) ->\n  settings  = { cwd: ( PATH.join __dirname ), deep: false, absolute: true, }\n  paths     = glob.sync patterns, settings\n  #.........................................................................................................\n  for path in paths\n    module = require path\n    for key, value of module\n      # urge '23233', \"#{path}##{key}\"\n      throw new Error \"duplicate key #{rpr key}\" if L[ key ]?\n      module[ key ] = method = value.bind module if CND.isa_function value\n      L[      key ] = method unless key.startsWith '_'\n  return null\n\n\n############################################################################################################\n### Gather methods from submodules, bind all methods to respective submodule, reflect public names into\nmain module. ###\nacquire L,            [ '*.js', '!main.js', '!_*', '!recycle.js' ]\nacquire ( L.R = {} ), 'recycle.js'\n\n\n\n"
  ]
}