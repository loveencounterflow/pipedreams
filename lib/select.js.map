{
  "version": 3,
  "file": "select.js",
  "sourceRoot": "..",
  "sources": [
    "src/select.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n\n#-----------------------------------------------------------------------------------------------------------\n@_keypattern = ///^(?<sigils>[<^>~]*) \\s* (?:(?<prefix>[^:<^>~\\s]+?):)? \\s* (?<name>[^:<^>~\\s]*)$///\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag_from_selector = ( selector ) ->\n  ### Return tag if `selector` is marked as tag selector, `null` otherwise. ###\n  return null unless ( CND.isa_text selector ) and ( selector.startsWith '#' ) and ( selector.length > 1 )\n  return selector[ 1 .. ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_classify_selector = ( selector ) ->\n  return [ 'function',    selector,     ] if CND.isa_function selector\n  throw new Error \"µ99843 expected a text, got a #{type}\" unless ( type = CND.type_of selector ) is 'text'\n  return [ 'tag',         tag,          ] if ( tag = @_tag_from_selector selector )?\n  return [ 'keypattern',  match.groups, ] if ( match = selector.match @_keypattern )?\n  throw new Error \"µ99843 illegal selector #{rpr selector}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_keypattern = ( d_key, keypattern ) ->\n  throw new Error \"µ77784 illegal event key #{rpr d_key}\" unless ( CND.isa_text d_key ) and ( d_key.length > 1 )\n  sigil = d_key[ 0 ]\n  throw new Error \"µ77784 event key #{rpr d_key} has illegal sigil #{rpr sigil}\" unless ( sigil in '<^>~' )\n  sigils_ok = sigil in keypattern.sigils\n  return false unless sigils_ok\n  #.........................................................................................................\n  throw new Error \"µ77784 illegal event key #{rpr d_key}\" unless ( match = d_key.match @_keypattern )?\n  if keypattern.prefix? and ( keypattern.prefix isnt '*' )\n    prefix_ok = ( match.groups.prefix is keypattern.prefix )\n    return false unless prefix_ok\n  #.........................................................................................................\n  if keypattern.name? and ( keypattern.name.length > 0 )\n    name_ok = ( keypattern.name is match.groups.name )\n    return false unless name_ok\n  #.........................................................................................................\n  return true\n\n#-----------------------------------------------------------------------------------------------------------\n@_select_one = ( d, selector ) ->\n  [ clasz, selector, ] = @_classify_selector selector\n  return switch clasz\n    when 'function'   then  selector          d\n    when 'tag'        then  _match_tag        d, selector\n    when 'keypattern' then  @_match_keypattern d, selector\n  throw new Error \"µ37373 illegal selector class #{rpr clasz}\"\n\n"
  ]
}