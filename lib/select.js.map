{
  "version": 3,
  "file": "select.js",
  "sourceRoot": "..",
  "sources": [
    "src/select.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use named subpatterns ###\n@_datom_keypattern    = ///^\n  (?<sigil>[<^>~\\[\\]])\n  (?:(?<prefix>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+?):)?\n  (?<name>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_selector_keypattern = ///^\n  (?<sigils>[<^>~\\[\\]]{0,6})\n  (?:(?<prefix>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+?):)?\n  (?<name>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]*)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag_pattern = ///^\n  \\#\n  (?<tag>[^:<^>~!$%&\\/\\[\\]{()}=?+*'\",.;|\\#\\s]*)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag_from_selector = ( selector ) ->\n  ### Return tag if `selector` is marked as tag selector, `null` otherwise. ###\n  return null unless CND.isa_text selector\n  return null unless ( match = selector.match @_tag_pattern )?\n  return match.groups.tag\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_keypattern = ( key_facets, selector_facets, settings ) ->\n  return false if selector_facets.sigils? and not ( key_facets.sigil in selector_facets.sigils )\n  return false if ( not selector_facets.prefix? ) and ( key_facets.prefix? )\n  return false if selector_facets.prefix? and not ( key_facets.prefix is selector_facets.prefix )\n  return false if selector_facets.name? and not ( key_facets.name is selector_facets.name )\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_classify_selector = ( selector ) ->\n  throw new Error \"µ85175 expected a text, got a #{type}\" unless ( type = type_of selector ) is 'text'\n  return [ 'keypattern',  ( @_selector_as_facets selector ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_key_as_facets       = ( key       ) -> @_key_or_pattern_as_facets key,      @_datom_keypattern\n@_selector_as_facets  = ( selector  ) -> @_key_or_pattern_as_facets selector, @_selector_keypattern\n\n#-----------------------------------------------------------------------------------------------------------\n@_key_or_pattern_as_facets = ( x, re ) ->\n  unless ( isa.text x ) and ( match = x.match re )?\n    throw new Error \"µ83744 illegal key or selector #{rpr x}\"\n  R = match.groups\n  for k, v of R\n    delete R[ k ] if v in [ '', null, undefined, ]\n  return R\n\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@select = ( d, selector ) ->\n  throw new Error \"µ86606 expected a selector, got none\" unless selector?\n  return false unless ( ( isa.object d ) and ( d.key? ) )\n  #.........................................................................................................\n  key_facets            = @_key_as_facets d.key\n  tags                  = new Set()\n  other_selectors       = []\n  classes_and_selectors = []\n  stamped               = false\n  #.........................................................................................................\n  if selector.endsWith '#stamped'\n    stamped   = true\n    selector  = selector[ ... selector.length - 8 ]\n    throw new Error \"µ33982 selector cannot just contain tag '#stamped'\" if selector is ''\n  #.........................................................................................................\n  try\n    classes_and_selectors.push @_classify_selector selector\n  catch error\n    error.message += \"\\nµ22092 datom #{jr d},\\nselector #{jr selector}\"\n    throw error\n  #.........................................................................................................\n  for [ clasz, selector, ] in classes_and_selectors\n    other_selectors.push [ clasz, selector, ]\n  #.........................................................................................................\n  settings = { stamped, }\n  return false if ( @is_stamped d ) and not settings.stamped\n  #.........................................................................................................\n  for [ clasz, selector, ] in other_selectors\n    throw new Error \"µ86129 illegal selector class #{rpr clasz}\" unless clasz is 'keypattern'\n    return false unless @_match_keypattern key_facets, selector, settings\n  return true\n\n\n\n\n\n"
  ]
}