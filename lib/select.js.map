{
  "version": 3,
  "file": "select.js",
  "sourceRoot": "..",
  "sources": [
    "src/select.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n\n#-----------------------------------------------------------------------------------------------------------\n### TAINT use named subpatterns ###\n@_event_keypattern    = ///^\n  (?<sigil>[<^>~\\[\\]])\n  (?:(?<prefix>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+?):)?\n  (?<name>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_selector_keypattern = ///^\n  (?<sigils>[<^>~\\[\\]]*)\n  (?:(?<prefix>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]+?):)?\n  (?<name>[^:<^>~!$%&\\/()=?+*'\",.;|\\#\\s]*)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag_pattern = ///^\n  \\#\n  (?<tag>[^:<^>~!$%&\\/\\[\\]{()}=?+*'\",.;|\\#\\s]*)\n  $///\n\n#-----------------------------------------------------------------------------------------------------------\n@_tag_from_selector = ( selector ) ->\n  ### Return tag if `selector` is marked as tag selector, `null` otherwise. ###\n  return null unless CND.isa_text selector\n  return null unless ( match = selector.match @_tag_pattern )?\n  return match.groups.tag\n\n#-----------------------------------------------------------------------------------------------------------\n@_match_keypattern = ( key_facets, selector_facets, settings ) ->\n  return false if selector_facets.sigils? and not ( key_facets.sigil in selector_facets.sigils )\n  return false if ( not selector_facets.prefix? ) and ( key_facets.prefix? )\n  return false if selector_facets.prefix? and not ( key_facets.prefix is selector_facets.prefix )\n  return false if selector_facets.name? and not ( key_facets.name is selector_facets.name )\n  return true\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@_classify_selector = ( selector ) ->\n  return [ 'function',    selector,     ] if CND.isa_function selector\n  throw new Error \"µ85175 expected a text, got a #{type}\" unless ( type = CND.type_of selector ) is 'text'\n  return [ 'tag',         tag,          ] if ( tag = @_tag_from_selector selector )?\n  return [ 'keypattern',  ( @_selector_as_facets selector ), ]\n\n#-----------------------------------------------------------------------------------------------------------\n@_key_as_facets       = ( key       ) -> @_key_or_pattern_as_facets key,      @_event_keypattern\n@_selector_as_facets  = ( selector  ) -> @_key_or_pattern_as_facets selector, @_selector_keypattern\n\n#-----------------------------------------------------------------------------------------------------------\n@_key_or_pattern_as_facets = ( x, re ) ->\n  unless ( CND.isa_text x ) and ( match = x.match re )?\n    throw new Error \"µ83744 illegal key or selector #{rpr x}\"\n  R = match.groups\n  for k, v of R\n    delete R[ k ] if v in [ '', null, undefined, ]\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@_settings_defaults = { stamped: false, }\n\n#-----------------------------------------------------------------------------------------------------------\n@_settings_from_tags = ( tags ) ->\n  R = assign {}, @_settings_defaults\n  for tag from tags\n    switch tag\n      when 'stamped' then R.stamped = true\n      else throw new Error \"µ20201 illegal tag #{rpr tag}\"\n  return R\n\n\n#===========================================================================================================\n#\n#-----------------------------------------------------------------------------------------------------------\n@select = ( d, selectors... ) ->\n  throw new Error \"µ86606 expected one or more selectors, got none\" if selectors.length is 0\n  return false unless CND.isa_pod d\n  return false unless d.key?\n  #.........................................................................................................\n  key_facets            = @_key_as_facets d.key\n  tags                  = new Set()\n  other_selectors       = []\n  selectors             = CND.flatten selectors\n  classes_and_selectors = []\n  #.........................................................................................................\n  for selector in selectors\n    try\n      classes_and_selectors.push @_classify_selector selector\n    catch error\n      error.message += \"\\nµ22092 datom #{jr d},\\nselector #{jr selector}\"\n      throw error\n  #.........................................................................................................\n  for [ clasz, selector, ] in classes_and_selectors\n    if clasz is 'tag' then  tags.add selector\n    else                    other_selectors.push [ clasz, selector, ]\n  #.........................................................................................................\n  settings = @_settings_from_tags tags\n  return false if d.stamped and not settings.stamped\n  #.........................................................................................................\n  for [ clasz, selector, ] in other_selectors\n    is_matching = switch clasz\n      when 'function'   then  selector d\n      when 'keypattern' then  @_match_keypattern key_facets, selector, settings\n      else throw new Error \"µ86129 illegal selector class #{rpr clasz}\"\n    return false unless is_matching\n  return true\n\n\n\n\n\n"
  ]
}