{
  "version": 3,
  "file": "_types.js",
  "sourceRoot": "..",
  "sources": [
    "src/_types.coffee"
  ],
  "names": [],
  "mappings": ";AAGA;EAAA;AAAA,MAAA,GAAA,EAAA,SAAA,EAAA,KAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,EAAA,GAA4B,IAAI,CAAC;;EACjC,SAAA,GAA4B,CAAE,OAAA,CAAQ,WAAR,CAAF,CAAuB,CAAC;;EACpD,SAAA,GAA4B,IAAI,SAAJ,CAAc,MAAM,CAAC,OAArB;;EAhB5B;;;;;;;;;;;;;;;;;AAAA",
  "sourcesContent": [
    "\n\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'MKTS-PARSER/TYPES'\ndebug                     = CND.get_logger 'debug',     badge\nalert                     = CND.get_logger 'alert',     badge\nwhisper                   = CND.get_logger 'whisper',   badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\ninfo                      = CND.get_logger 'info',      badge\njr                        = JSON.stringify\nIntertype                 = ( require 'intertype' ).Intertype\nintertype                 = new Intertype module.exports\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'mirage_main_row',\n#   tests:\n#     \"? is a object\":                          ( x ) -> @isa.object          x\n#     \"? has key 'key'\":                        ( x ) -> @has_key             x, 'key'\n#     \"? has key 'vlnr_txt'\":                   ( x ) -> @has_key             x, 'vlnr_txt'\n#     \"? has key 'value'\":                      ( x ) -> @has_key             x, 'value'\n#     \"?.key is a nonempty text\":               ( x ) -> @isa.nonempty_text   x.key\n#     \"?.vlnr_txt is a nonempty text\":          ( x ) -> @isa.nonempty_text   x.vlnr_txt\n#     \"?.vlnr_txt starts, ends with '[]'\":      ( x ) -> ( x.vlnr_txt.match /^\\[.*\\]$/ )?\n#     \"?.vlnr_txt is a JSON array of integers\": ( x ) ->\n#       # debug 'Âµ55589', x\n#       ( @isa.list ( lst = JSON.parse x.vlnr_txt ) ) and \\\n#       ( lst.every ( xx ) => ( @isa.integer xx ) and ( @isa.positive xx ) )\n\n# #-----------------------------------------------------------------------------------------------------------\n# @declare 'true', ( x ) -> x is true\n\n"
  ]
}