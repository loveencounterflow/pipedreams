// Generated by CoffeeScript 1.10.0
(function() {
  var $, CND, D, alert, badge, debug, echo, get_index, help, include, info, isa_stream, log, rpr, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.remit;

  get_index = function(element, key) {
    if (CND.isa_function(key)) {
      return key(element);
    } else {
      return element[key];
    }
  };

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this["(v4) new_stream_from_pipeline (1)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = function(settings) {
      var add, multiply, square, unsquared;
      multiply = $((function(_this) {
        return function(data, send) {
          return send(data * 2);
        };
      })(this));
      add = $((function(_this) {
        return function(data, send) {
          return send(data + 2);
        };
      })(this));
      square = $((function(_this) {
        return function(data, send) {
          return send(Math.pow(data, 2));
        };
      })(this));
      unsquared = D.create_throughstream();
      return D.new_stream_from_pipeline([multiply, add, unsquared, square]);
    };
    return (function() {
      var frob, i, input, len, n, output, output_matchers, output_results, probes;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      input = frob.input, output = frob.output;
      output.pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline (2)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var R, add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        R = D.new_stream_from_pipeline([multiply, add, unsquared, square]);
        R['inputs'] = {
          add: add
        };
        R['outputs'] = {
          unsquared: unsquared
        };
        return R;
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      input = frob.input, output = frob.output, inputs = frob.inputs, outputs = frob.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline (3)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        return D.new_stream_from_pipeline([multiply, add, unsquared, square]);
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, output, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      output = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(output).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline using existing streams"] = function(T, done) {
    var confluence, i, input, len, matchers, n, probes, results, transforms;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    transforms = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.new_stream({
      pipeline: [input].concat(slice.call(transforms))
    });
    confluence.pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["new_stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return input.resume();
  };

  this["synchronous collect"] = function(T, done) {
    var input, result, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    input = input.pipe(D.$split());
    result = D.collect(input);
    input.resume();
    T.eq(result, text.split('\n'));
    return done();
  };

  this["asynchronous collect"] = function(T, T_done) {
    var input, stream, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    stream = input.pipe(D.$split()).pipe(D.remit_async_spread((function(_this) {
      return function(line, send) {
        return setTimeout((function() {
          return send.done(line);
        }), 200);
      };
    })(this)));
    D.collect(stream, (function(_this) {
      return function(error, result) {
        T.eq(result, text.split('\n'));
        debug('©4D8tA', 'T_done');
        return T_done();
      };
    })(this));
    return input.resume();
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D.new_stream_from_pipeline"] = function(T, done) {
    var pipeline, stream;
    pipeline = [
      (function(_this) {
        return function() {
          var collector;
          collector = [];
          return $(function(data, send, end) {
            if (data != null) {
              collector.push(data);
            }
            if (end != null) {
              T.eq(collector, ['foo', 'bar', 'baz']);
              end();
              return done();
            }
          });
        };
      })(this)()
    ];
    T.ok(isa_stream(stream = D.new_stream_from_pipeline(pipeline)));
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) $async with stream end detection"] = function(T, done) {
    throw new Error("not implemented");
  };

  this["(v4) $async with arbitrary number of results"] = function(T, done) {
    throw new Error("not implemented");
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 2500
    });
  };

  if (module.parent == null) {
    include = ["(v4) new_stream_from_pipeline (1)", "(v4) new_stream_from_pipeline (2)", "(v4) new_stream_from_pipeline (3)", "(v4) new_stream_from_pipeline using existing streams", "new_stream_from_text", "synchronous collect", "asynchronous collect", "(v4) D.new_stream", "(v4) D.new_stream_from_pipeline", "(v4) $async with stream end detection", "(v4) $async with arbitrary number of results"];
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
