// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, CND, D, DS, LODASH, alert, badge, collect_and_check, debug, echo, get_index, help, info, log, rpr, test, urge, warn, whisper,
    slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS2/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  LODASH = CND.LODASH;

  test = require('guy-test');

  DS = require('./densort');

  D = require('./main');

  $ = D.remit.bind(D);

  $async = D.remit_async.bind(D);

  get_index = function(element, key) {
    if (CND.isa_function(key)) {
      return key(element);
    } else {
      return element[key];
    }
  };

  collect_and_check = function(T, key, first_idx, input, max_buffer_size) {
    var collection, ds, element_count, i, idx, input_element, j, last_idx, len, len1, output, output_idxs, ref, target, target_idxs;
    if (max_buffer_size == null) {
      max_buffer_size = null;
    }
    output = [];
    target = LODASH.sortBy(LODASH.cloneDeep(input), key);
    element_count = input.length;
    ds = DS.new_densort(key, first_idx, function(stats) {
      if (max_buffer_size != null) {
        return T.eq(stats, [element_count, max_buffer_size]);
      }
    });
    ref = [input, [null]];
    for (i = 0, len = ref.length; i < len; i++) {
      collection = ref[i];
      for (j = 0, len1 = collection.length; j < len1; j++) {
        input_element = collection[j];
        ds(input_element, function(error, output_element) {
          if (error != null) {
            throw error;
          }
          if (output_element != null) {
            return output.push(output_element);
          } else {
            return T.eq(output, target);
          }
        });
      }
    }
    last_idx = element_count + first_idx - 1;
    target_idxs = (function() {
      var k, ref1, ref2, results1;
      results1 = [];
      for (idx = k = ref1 = first_idx, ref2 = last_idx; k <= ref2; idx = k += +1) {
        results1.push(idx);
      }
      return results1;
    })();
    output_idxs = (function() {
      var k, ref1, ref2, ref3, results1;
      results1 = [];
      for (idx = k = ref1 = first_idx, ref2 = last_idx; k <= ref2; idx = k += +1) {
        results1.push(get_index((ref3 = output[idx]) != null ? ref3 : [], key));
      }
      return results1;
    })();
    T.eq(output_idxs, target_idxs);
    return output;
  };

  this["densort 0"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 0;
    input = [];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 1"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 0;
    input = [[0, 'A'], [1, 'B'], [2, 'C']];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 2"] = function(T, done) {
    var first_idx, i, input, inputs, key, len, max_buffer_size, output, ref;
    key = 0;
    first_idx = 0;
    inputs = [[[[0, 'A'], [1, 'B'], [2, 'C']], 0], [[[0, 'A'], [2, 'C'], [1, 'B']], 2], [[[1, 'B'], [0, 'A'], [2, 'C']], 2], [[[1, 'B'], [2, 'C'], [0, 'A']], 3], [[[2, 'C'], [0, 'A'], [1, 'B']], 2], [[[2, 'C'], [1, 'B'], [0, 'A']], 3]];
    for (i = 0, len = inputs.length; i < len; i++) {
      ref = inputs[i], input = ref[0], max_buffer_size = ref[1];
      output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    }
    return done();
  };

  this["densort 3"] = function(T, done) {
    var chr, count, error, error1, first_idx, idx, input, input_txt, key, message, messages;
    key = 0;
    first_idx = 0;
    input = [[0, 'a'], [1, 'b'], [2, 'c'], [3, 'd'], [4, 'e'], [5, 'f'], [6, 'g']];
    count = 0;
    messages = [];
    while (true) {
      count += +1;
      if (count % 1e5 === 0) {
        whisper(count);
      }
      input_txt = ((function() {
        var i, len, ref, results1;
        results1 = [];
        for (i = 0, len = input.length; i < len; i++) {
          ref = input[i], idx = ref[0], chr = ref[1];
          results1.push("" + idx);
        }
        return results1;
      })()).join('');
      try {
        collect_and_check(T, key, first_idx, input);
      } catch (error1) {
        error = error1;
        message = error['message'] + ": " + input_txt;
        messages.push(message);
        warn(input_txt);
        T.fail(message);
      }
      if (!CND.ez_permute(input)) {
        break;
      }
    }
    return done();
  };

  this["densort 4"] = function(T, done) {
    var chr, error, error1, first_idx, i, input, input_txt, inputs, key, len, message, output;
    key = 0;
    first_idx = 0;
    inputs = ['012345', '102354', '1032', '10243'];
    for (i = 0, len = inputs.length; i < len; i++) {
      input = inputs[i];
      input_txt = input;
      input = (function() {
        var j, len1, results1;
        results1 = [];
        for (j = 0, len1 = input.length; j < len1; j++) {
          chr = input[j];
          results1.push([parseInt(chr, 10)]);
        }
        return results1;
      })();
      try {
        output = collect_and_check(T, key, first_idx, input);
      } catch (error1) {
        error = error1;
        message = error['message'] + ": " + input_txt;
        warn(input_txt);
        T.fail(message);
      }
    }
    return done();
  };

  this["densort 5"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 13;
    input = [[1, 'B'], [2, 'C'], [3, 'D'], [4, 'E'], [5, 'F'], [6, 'G'], [7, 'H'], [8, 'I'], [9, 'J'], [10, 'K'], [11, 'L'], [12, 'M'], [0, 'A']];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 6"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 7;
    input = [[2, 'C'], [3, 'D'], [4, 'E'], [5, 'F'], [6, 'G'], [1, 'B'], [0, 'A'], [7, 'H'], [8, 'I'], [9, 'J'], [10, 'K'], [11, 'L'], [12, 'M']];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 7"] = function(T, done) {
    var first_idx, input, key, max_buffer_size;
    key = 0;
    first_idx = 1;
    max_buffer_size = null;
    input = [[0, 'A'], [1, 'B'], [2, 'C'], [3, 'D'], [4, 'E']];
    T.throws('index too small: 0', function() {
      return collect_and_check(T, key, first_idx, input, max_buffer_size);
    });
    return done();
  };

  this["densort 7"] = function(T, done) {
    var first_idx, input, key, max_buffer_size;
    key = 0;
    first_idx = 0;
    max_buffer_size = null;
    input = [[0, 'A'], [1, 'B'], [2, 'C'], [4, 'E']];
    T.throws('detected missing elements', function() {
      return collect_and_check(T, key, first_idx, input, max_buffer_size);
    });
    return done();
  };

  this["TEE.from_pipeline accepts missing settings argument"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms);
      };
    })();
    return (function() {
      var frob, i, input, len, n, output, output_matchers, output_results, probes, ref;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output;
      output.pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_pipeline reflects extra settings"] = function(T, done) {
    var frob, pipeline, settings;
    settings = {
      inputs: {
        foo: D.create_throughstream()
      },
      bar: [],
      baz: 42
    };
    pipeline = [D.$show()];
    frob = D.TEE.from_pipeline(pipeline, settings);
    T.eq(frob.tee['inputs']['foo'], settings['inputs']['foo']);
    T.eq(frob.tee['bar'], settings['bar']);
    T.eq(frob.tee['baz'], settings['baz']);
    return done();
  };

  this["TEE.from_pipeline 1"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, ref, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output, inputs = ref.inputs, outputs = ref.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show());
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_pipeline 2"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, output, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      output = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show()).pipe(output).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["D.combine produces new stream from existing ones 1"] = function(T, done) {
    var confluence, i, input, len, matchers, n, output, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    output = D.create_throughstream();
    confluence = D.combine(input, output);
    input.pipe($((function(_this) {
      return function(data, send) {
        return send(n * 2);
      };
    })(this))).pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this))).pipe(D.$show());
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["D.combine produces new stream from existing ones 2"] = function(T, done) {
    var confluence, i, input, len, matchers, n, probes, results, transforms;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    transforms = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.combine.apply(D, [input].concat(slice.call(transforms)));
    confluence.pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this))).pipe(D.$show());
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["TEE.from_readwritestreams 1"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, readstream, square, unsquared, writestream;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        readstream = D.create_throughstream();
        writestream = D.create_throughstream();
        readstream.pipe(multiply).pipe(add).pipe(unsquared).pipe(square).pipe(writestream);
        return D.TEE.from_readwritestreams(readstream, writestream, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, ref, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output, inputs = ref.inputs, outputs = ref.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_readwritestreams 2"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, readstream, square, unsquared, writestream;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        readstream = D.create_throughstream();
        writestream = D.create_throughstream();
        readstream.pipe(multiply).pipe(add).pipe(unsquared).pipe(square).pipe(writestream);
        return D.TEE.from_readwritestreams(readstream, writestream, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show()).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return input.resume();
  };

  this["synchronous collect"] = function(T, done) {
    var input, result, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    input = input.pipe(D.$split());
    result = D.collect(input);
    input.resume();
    T.eq(result, text.split('\n'));
    return done();
  };

  this["asynchronous collect"] = function(T, done) {
    var input, stream, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    stream = input.pipe(D.$split()).pipe($async((function(_this) {
      return function(line, D_done) {
        return setTimeout((function() {
          return D_done(line);
        }), 200);
      };
    })(this)));
    D.collect(stream, (function(_this) {
      return function(error, result) {
        T.eq(result, text.split('\n'));
        debug('©4D8tA', 'done');
        return done();
      };
    })(this));
    return input.resume();
  };

  this._main = function() {
    var settings;
    settings = {
      'timeout': 2500
    };
    return test(this, settings);
  };

  if (module.parent == null) {
    this._main();
  }

}).call(this);
