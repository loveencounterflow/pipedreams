// Generated by CoffeeScript 1.10.0
(function() {
  var $, CND, D, alert, badge, debug, echo, get_index, help, include, info, log, rpr, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS2/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.remit;

  get_index = function(element, key) {
    if (CND.isa_function(key)) {
      return key(element);
    } else {
      return element[key];
    }
  };

  this["TEE.from_pipeline accepts missing settings argument"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms);
      };
    })();
    return (function() {
      var frob, i, input, len, n, output, output_matchers, output_results, probes, ref;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output;
      output.pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_pipeline reflects extra settings"] = function(T, done) {
    var frob, pipeline, settings;
    settings = {
      inputs: {
        foo: D.create_throughstream()
      },
      bar: [],
      baz: 42
    };
    pipeline = [D.$show()];
    frob = D.TEE.from_pipeline(pipeline, settings);
    T.eq(frob.tee['inputs']['foo'], settings['inputs']['foo']);
    T.eq(frob.tee['bar'], settings['bar']);
    T.eq(frob.tee['baz'], settings['baz']);
    return done();
  };

  this["TEE.from_pipeline 1"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, ref, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output, inputs = ref.inputs, outputs = ref.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show());
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_pipeline 2"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, square, transforms, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        transforms = [multiply, add, unsquared, square];
        return D.TEE.from_pipeline(transforms, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, output, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      output = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show()).pipe(output).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["D.combine produces new stream from existing ones 1"] = function(T, done) {
    var confluence, i, input, len, matchers, n, output, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    output = D.create_throughstream();
    confluence = D.combine(input, output);
    input.pipe($((function(_this) {
      return function(data, send) {
        return send(n * 2);
      };
    })(this))).pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this))).pipe(D.$show());
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["D.combine produces new stream from existing ones 2"] = function(T, done) {
    var confluence, i, input, len, matchers, n, probes, results, transforms;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    transforms = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.combine.apply(D, [input].concat(slice.call(transforms)));
    confluence.pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this))).pipe(D.$show());
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["TEE.from_readwritestreams 1"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, readstream, square, unsquared, writestream;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        readstream = D.create_throughstream();
        writestream = D.create_throughstream();
        readstream.pipe(multiply).pipe(add).pipe(unsquared).pipe(square).pipe(writestream);
        return D.TEE.from_readwritestreams(readstream, writestream, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, ref, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      ref = frob.tee, input = ref.input, output = ref.output, inputs = ref.inputs, outputs = ref.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["TEE.from_readwritestreams 2"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, inputs, multiply, outputs, readstream, square, unsquared, writestream;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        inputs = {
          add: add
        };
        outputs = {
          unsquared: unsquared
        };
        readstream = D.create_throughstream();
        writestream = D.create_throughstream();
        readstream.pipe(multiply).pipe(add).pipe(unsquared).pipe(square).pipe(writestream);
        return D.TEE.from_readwritestreams(readstream, writestream, {
          inputs: inputs,
          outputs: outputs
        });
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$show()).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return input.resume();
  };

  this["synchronous collect"] = function(T, done) {
    var input, result, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    input = input.pipe(D.$split());
    result = D.collect(input);
    input.resume();
    T.eq(result, text.split('\n'));
    return done();
  };

  this["asynchronous collect"] = function(T, T_done) {
    var input, stream, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.stream_from_text(text);
    stream = input.pipe(D.$split()).pipe(D.$async((function(_this) {
      return function(line, send) {
        return setTimeout((function() {
          return send.done(line);
        }), 200);
      };
    })(this)));
    D.collect(stream, (function(_this) {
      return function(error, result) {
        T.eq(result, text.split('\n'));
        debug('©4D8tA', 'T_done');
        return T_done();
      };
    })(this));
    return input.resume();
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 2500
    });
  };

  if (module.parent == null) {
    include = ["TEE.from_pipeline accepts missing settings argument", "TEE.from_pipeline reflects extra settings", "TEE.from_pipeline 1", "TEE.from_pipeline 2", "D.combine produces new stream from existing ones 1", "D.combine produces new stream from existing ones 2", "TEE.from_readwritestreams 1", "TEE.from_readwritestreams 2", "stream_from_text", "synchronous collect", "asynchronous collect"];
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
