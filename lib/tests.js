// Generated by CoffeeScript 1.11.1
(function() {
  var $, $async, $validate_probes, CND, D, TMP, _temp_thing, alert, badge, debug, delay, echo, help, include, info, isa_stream, log, resolve_path, resolve_temp_path, rpr, sleep, temp_home, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  require('./plugin-tsv');

  require('./plugin-tabulate');


  /* TAINT for the time being, we create one global folder and keep it beyond process termination; this
  allows to inspect folder contents after tests have terminated. It would probably be a good idea to remove
  the `keep: yes` setting at a later point in time.
   */

  TMP = require('tmp');

  TMP.setGracefulCleanup();

  _temp_thing = TMP.dirSync({
    keep: false,
    unsafeCleanup: true,
    prefix: 'pipedreams-'
  });

  temp_home = _temp_thing['name'];

  resolve_path = (require('path')).resolve;

  resolve_temp_path = function() {
    var P, p;
    P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return resolve_path.apply(null, [temp_home].concat(slice.call((function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = P.length; i < len; i++) {
        p = P[i];
        results1.push(p.replace(/^[.\/]/g, ''));
      }
      return results1;
    })())));
  };

  delay = (function(_this) {
    return function(name, f) {
      var dt;
      if (arguments.length === 1) {
        f = name;
        name = null;
      }
      dt = CND.random_integer(10, 20);
      if (name != null) {
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
      }
      return setTimeout(f, dt);
    };
  })(this);

  $validate_probes = (function(_this) {
    return function(T, matchers) {
      var idx;
      idx = -1;
      return $('null', function(data) {
        if (data != null) {
          idx += +1;
          T.eq(data, matchers[idx]);
        } else {
          T.eq(idx + 1, matchers.length);
        }
        return null;
      });
    };
  })(this);

  sleep = (function(_this) {
    return function(dt, handler) {
      return setTimeout(handler, dt);
    };
  })(this);

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, ref, value;
    ref = this;
    for (name in ref) {
      value = ref[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    info("temporary files, if any, written to " + temp_home);
    return test(this, {
      'timeout': 30000
    });
  };

  this["(v4) $benchmark (1)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(D.$benchmark.summarize()).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $benchmark (2)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark.summarize()).pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) new new_stream signature (1)"] = function(T, done) {
    var i, len, matchers, new_stream_instrument, probe, probe_idx, probes, result;
    new_stream_instrument = function() {
      var P, error, hints, kind, message, ref, seed, settings;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      message = null;
      kind = null;
      seed = null;
      hints = null;
      settings = null;
      try {
        ref = D.new_stream._read_arguments(P), kind = ref[0], seed = ref[1], hints = ref[2], settings = ref[3];
      } catch (error1) {
        error = error1;
        message = error['message'];
      }
      return [kind, seed, hints, settings, message];
    };
    probes = [
      [], ['utf-8'], [
        'write', 'binary', {
          file: 'baz.doc'
        }
      ], [
        'write', {
          pipeline: []
        }
      ], [
        'write', 'binary', {
          file: 'baz.doc'
        }, {
          mode: 0x1e4
        }
      ], [
        {
          text: "make it so"
        }
      ], [
        'oops', {
          text: "make it so"
        }
      ], ['text', "make it so"], ['binary', 'append', "~/some-file.txt"], [
        'omg', 'append', {
          file: "~/some-file.txt"
        }
      ], [
        'write', {
          route: "~/some-file.txt"
        }
      ]
    ];
    matchers = [
      ["*plain", null, null, null, null], ["*plain", null, ["utf-8"], null, null], ["file", "baz.doc", ["write", "binary"], null, null], ["pipeline", [], ["write"], null, null], [
        "file", "baz.doc", ["write", "binary"], {
          "mode": 484
        }, null
      ], ["text", "make it so", null, null, null], ["text", "make it so", ["oops"], null, null], ["*plain", null, ["text", "make it so"], null, null], ["*plain", null, ["binary", "append", "~/some-file.txt"], null, null], ["file", "~/some-file.txt", ["omg", "append"], null, null], [null, null, null, null, "expected a 'kind' out of '*plain', 'file', 'path', 'pipeline', 'text', 'url', 'transform', 'duplex', got 'route'"]
    ];
    for (probe_idx = i = 0, len = probes.length; i < len; probe_idx = ++i) {
      probe = probes[probe_idx];
      result = new_stream_instrument.apply(null, probe);
      T.eq(result, matchers[probe_idx]);
    }
    return done();
  };

  this["(v4) new new_stream signature (2)"] = function(T, done) {
    var fakestream, i, len, matchers, new_stream_instrument, path_1, path_2, path_3, probe, probe_idx, probes, result;
    path_1 = resolve_temp_path('t-dfgh-1.txt');
    path_2 = resolve_temp_path('t-dfgh-2.txt');
    path_3 = resolve_temp_path('t-dfgh-3.txt');
    fakestream = {
      'stream': true
    };
    new_stream_instrument = function() {
      var P, R, error, message;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      R = null;
      message = null;
      try {
        R = D.new_stream.apply(D, P);
      } catch (error1) {
        error = error1;
        message = error['message'];
      }
      return [R, message];
    };
    probes = [
      [], [
        {
          pipeline: []
        }
      ], [
        'write', 'binary', {
          file: path_1
        }
      ], [
        'write', 'binary', {
          file: path_2
        }, {
          mode: 0x1e4
        }
      ], [
        'binary', 'append', {
          file: path_3
        }
      ], [
        {
          text: "make it so"
        }
      ], [
        'oops', {
          text: "make it so"
        }
      ], ['utf-8'], [
        'write', {
          pipeline: []
        }
      ]
    ];
    matchers = [
      [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [null, "_new_stream_from_text doesn't accept 'hints', got [ 'oops' ]"], [null, "_new_stream doesn't accept 'hints', got [ 'utf-8' ]"], [null, "_new_stream_from_pipeline doesn't accept 'hints', got [ 'write' ]"]
    ];
    for (probe_idx = i = 0, len = probes.length; i < len; probe_idx = ++i) {
      probe = probes[probe_idx];
      result = new_stream_instrument.apply(null, probe);
      if (isa_stream(result[0])) {
        result[0] = fakestream;
      }
      T.eq(result, matchers[probe_idx]);
    }
    return done();
  };

  this["(v4) _new_stream_from_path (1)"] = function(T, done) {
    var matcher, path_1, probes, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path('_new_stream_from_path-1.txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = D.new_stream('write', 'lines', {
          path: path_1
        });
        input.pipe(output).pipe($('finish', handler));
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var input;
        input = D.new_stream('read', 'lines', {
          path: path_1
        });
        return input.pipe(D.$collect()).pipe($(function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        })).pipe($('finish', handler));
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        yield write_sample(resume);
        yield read_sample(resume);
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path (2)"] = function(T, done) {
    var matcher, path_1, probes, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path('_new_stream_from_path-2.txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = (require('fs')).createWriteStream(path_1);
        input.pipe(D.$show()).pipe(D.$as_line()).pipe(D.$bridge(output)).pipe($('finish', handler));
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var input;
        input = D.new_stream('read', 'lines', {
          path: path_1
        });
        return input.pipe(D.$collect()).pipe($(function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        })).pipe($('finish', handler));
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        yield write_sample(resume);
        yield read_sample(resume);
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) transforms below output receive data events (1)"] = function(T, done) {
    var $verify, fn, i, input, len, matcher, output, path_1, probe, probes;
    path_1 = resolve_temp_path('(v4) transforms below output receive data events.txt');
    probes = ['line-1', 'line-2', 23, 56];
    matcher = ['line-1\n', 'line-2\n', '23\n', '56\n'];
    $verify = (function(_this) {
      return function() {
        var idx;
        idx = -1;
        return $('null', function(data) {
          if (data != null) {
            idx += +1;
            T.eq(data, matcher[idx]);
          } else {
            T.eq(idx + 1, matcher.length);
          }
          return null;
        });
      };
    })(this);
    input = D.new_stream();
    output = D.new_stream('write', {
      file: path_1
    });
    input.pipe(D.$show()).pipe(D.$as_line()).pipe(output).pipe(D.$show()).pipe($verify()).pipe($('finish', (function(_this) {
      return function() {
        help('done');
        return done();
      };
    })(this)));
    fn = (function(_this) {
      return function(probe) {
        return setImmediate(function() {
          return D.send(input, probe);
        });
      };
    })(this);
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      fn(probe);
    }
    setImmediate((function(_this) {
      return function() {
        return D.end(input);
      };
    })(this));
    return null;
  };

  this["(v4) transforms below output receive data events (2)"] = function(T, done) {
    var $verify, input, path, sink_1, sink_2;
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    sink_1 = D.new_stream('devnull');
    sink_2 = D.new_stream('devnull');
    D.on_finish(sink_2, done);
    $verify = (function(_this) {
      return function() {
        var count;
        count = 0;
        return $(function(entry) {
          if (entry != null) {
            count += +1;
          } else {
            T.eq(count, 23);
          }
          return null;
        });
      };
    })(this);
    input.pipe(D.$split_tsv({
      names: 'inline'
    })).pipe(sink_1).pipe($verify()).pipe(sink_2);
    return null;
  };

  this["(v4) file stream events (1)"] = function(T, done) {
    var path_1, probes, write_sample;
    path_1 = resolve_temp_path('(v4) file stream events (1).txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var fn, i, input, len, output, pipeline, probe, thruput;
        input = D.new_stream();
        thruput = D.new_stream();
        output = D.new_stream('append', {
          file: path_1
        });
        pipeline = input.pipe($(function(data) {
          info('1', data);
          if (data == null) {
            return debug(CND.green('transform 1 end'));
          }
        })).pipe(output).pipe(thruput).pipe($(function(data) {
          info('2', data);
          if (data == null) {
            return debug(CND.green('transform 2 end'));
          }
        }));
        input.on('end', function() {
          return debug(CND.lime('input end'));
        });
        input.on('finish', function() {
          return debug(CND.lime('input finish'));
        });
        output.on('end', function() {
          return debug(CND.red('output end'));
        });
        output.on('finish', function() {
          return debug(CND.red('output finish'));
        });
        thruput.on('end', function() {
          return debug(CND.gold('thruput end'));
        });
        thruput.on('finish', function() {
          return debug(CND.gold('thruput finish'));
        });
        pipeline.on('end', function() {
          return debug(CND.blue('pipeline end'));
        });
        pipeline.on('finish', function() {
          return debug(CND.blue('pipeline finish'));
        });
        output.on('finish', function() {
          return setImmediate(function() {
            debug(CND.white('over'));
            return handler();
          });
        });
        fn = function(probe) {
          return setImmediate(function() {
            return input.write(probe);
          });
        };
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          fn(probe);
        }
        return setImmediate(function() {
          return input.end();
        });
      };
    })(this);
    write_sample((function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return setImmediate(function() {
          return done();
        });
      };
    })(this));
    return null;
  };

  this["(v4) streams as transforms and v/v (1)"] = function(T, done) {
    var i, input, len, matcher, probe, probes;
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    input = $(function(data) {});
    input.pipe(D.$collect()).pipe(D.$show()).pipe($((function(_this) {
      return function(lines) {
        if (lines != null) {
          return T.eq(lines, matcher);
        }
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(input, probe);
    }
    D.end(input);
    return null;
  };

  this["(v4) streams as transforms and v/v (2)"] = function(T, done) {
    var i, input, len, matcher, probe, probes, transform;
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['HELO', 'world', '𪉟⿱鹵皿'];
    transform = (function(_this) {
      return function(line, send) {
        if (line === 'helo') {
          send('HELO');
        } else {
          send(line);
        }
        return null;
      };
    })(this);
    input = $(function(data) {});
    input.pipe(D.new_stream({
      transform: transform
    })).pipe(D.$collect()).pipe(D.new_stream({
      transform: ((function(_this) {
        return function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        };
      })(this))
    })).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(input, probe);
    }
    D.end(input);
    return null;
  };


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */

  this["(v4) _new_stream_from_pipeline (4a)"] = function(T, done) {
    var i, input, len, matchers, n, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44];
    results = [];
    input = D.new_stream();
    input.pipe($((function(_this) {
      return function(n, send) {
        return send(n + 2);
      };
    })(this))).pipe($((function(_this) {
      return function(n, send) {
        return send(n * 2);
      };
    })(this))).pipe(D.$show()).pipe($('null', (function(_this) {
      return function(data) {
        if (data != null) {
          return results.push(data);
        } else {
          return T.eq(results, matchers);
        }
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      D.send(input, n);
    }
    D.end(input);
    return null;
  };

  this["(v4) _new_stream_from_pipeline (4b)"] = function(T, done) {
    var confluence, i, input, len, matchers, n, pipeline, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44];
    results = [];
    input = D.new_stream();
    pipeline = [
      $((function(_this) {
        return function(n, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(n, send) {
          return send(n * 2);
        };
      })(this)), D.$show()
    ];
    confluence = D.new_stream({
      pipeline: pipeline
    });
    input.pipe(confluence).pipe($('null', (function(_this) {
      return function(data) {
        if (data != null) {
          return results.push(data);
        } else {
          return T.eq(results, matchers);
        }
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      D.send(input, n);
    }
    D.end(input);
    return null;
  };

  this["(v4) _new_stream_from_pipeline (4c)"] = function(T, done) {
    var confluence, i, len, matchers, n, pipeline, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44];
    results = [];
    pipeline = [
      $((function(_this) {
        return function(n, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(n, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.new_stream({
      pipeline: pipeline
    });
    confluence.pipe(D.$show()).pipe($('null', (function(_this) {
      return function(data) {
        if (data != null) {
          return results.push(data);
        } else {
          return T.eq(results, matchers);
        }
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      D.send(confluence, n);
    }
    D.end(confluence);
    return null;
  };

  this["(v4) _new_stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream({
      text: text
    });
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return null;
  };

  this["(v4) _new_stream_from_text (2)"] = function(T, done) {
    var collector, input;
    collector = [];
    input = D.new_stream();
    input.pipe(D.$split()).pipe($((function(_this) {
      return function(line, send) {
        send(line);
        return collector.push(line);
      };
    })(this))).pipe($('finish', (function(_this) {
      return function() {
        T.eq(collector, ["first line", "second line"]);
        return done();
      };
    })(this)));
    input.write("first line\nsecond line");
    return input.end();
  };

  this["(v4) observer transform called with data `null` on stream end"] = function(T, done) {
    var collector, input, received_null;
    received_null = false;
    collector = [];
    input = D.new_stream();
    input.pipe($('null', (function(_this) {
      return function(data) {
        if (data != null) {
          return collector.push(data);
        } else {
          if (data === null) {
            if (received_null) {
              T.fail("received null, shouldn't happen");
            }
            return received_null = true;
          } else {
            return T.fail("received " + (rpr(data)) + ", shouldn't happen");
          }
        }
      };
    })(this))).pipe($('finish', (function(_this) {
      return function() {
        if (!received_null) {
          T.fail("expected to receive null in observer transform");
        }
        T.eq(collector, ["helo", "world"]);
        return done();
      };
    })(this)));
    input.write("helo");
    input.write("world");
    return input.end();
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D._new_stream_from_pipeline"] = function(T, done) {
    var pipeline, stream;
    pipeline = [
      (function(_this) {
        return function() {
          var collector;
          collector = [];
          return $(function(data, send, end) {
            if (data != null) {
              collector.push(data);
            }
            if (end != null) {
              T.eq(collector, ['foo', 'bar', 'baz']);
              end();
              return done();
            }
          });
        };
      })(this)()
    ];
    T.ok(isa_stream(stream = D.new_stream({
      pipeline: pipeline
    })));
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) $async with method arity 3 (1)"] = function(T, done) {
    var $calculate, input;
    $calculate = (function(_this) {
      return function() {
        return $async(function(n, send, end) {
          if (n != null) {
            delay("$calculate", function() {
              send(n - 1);
              send(n);
              send(n + 1);
              return send.done();
            });
          }
          if (end != null) {
            return end();
          }
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe($calculate()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      return T.eq(data, [4, 5, 6, 14, 15, 16, 24, 25, 26]);
    })).pipe($('finish', done));
    D.send(input, 5);
    D.send(input, 15);
    D.send(input, 25);
    D.end(input);
    return null;
  };

  this["(v4) $async with method arity 3 (2)"] = function(T, done) {
    var $calculate, $group, input;
    $calculate = (function(_this) {
      return function() {
        return $async(function(n, send, end) {
          if (n != null) {
            delay("$calculate", function() {
              send(n - 1);
              send(n);
              send(n + 1);
              return send.done();
            });
          }
          if (end != null) {
            return end();
          }
        });
      };
    })(this);
    $group = (function(_this) {
      return function() {
        var current_group, last_n;
        last_n = null;
        current_group = null;
        return $async(function(n, send, end) {
          debug(rpr(n));
          return delay("$group", function() {
            if (n != null) {
              if ((last_n != null) && (Math.abs(n - last_n)) === 1) {
                current_group.push(n);
              } else {
                if (current_group != null) {
                  send(current_group);
                }
                current_group = [n];
              }
              last_n = n;
            }
            if (end != null) {
              if (current_group != null) {
                send(current_group);
              }
              end();
            }
            return send.done();
          });
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe($calculate()).pipe($group()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      return T.eq(data, [[4, 5, 6], [14, 15, 16], [24, 25, 26]]);
    })).pipe($('finish', done));
    D.send(input, 5);
    D.send(input, 15);
    D.send(input, 25);
    D.end(input);
    return null;
  };

  this["(v4) $sort 1"] = function(T, done) {
    var i, input, len, n, ref;
    input = D.new_stream();
    input.pipe(D.$sort()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      return T.eq(data, [11, 23, 33, 55, 82, 98, 99]);
    })).pipe($('finish', done));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 2"] = function(T, done) {
    var i, input, len, n, ref;
    input = D.new_stream();
    input.pipe(D.$sort()).pipe(D.$show()).pipe(D.$collect({
      collect: true
    })).pipe($(function(data) {
      return T.eq(data, [11, 23, 33, 55, 82, 98, 99]);
    })).pipe($('finish', done));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 3"] = function(T, done) {
    var i, input, len, n, ref, sorter;
    sorter = (function(_this) {
      return function(a, b) {
        if (a < b) {
          return +1;
        }
        if (a > b) {
          return -1;
        }
        return 0;
      };
    })(this);
    input = D.new_stream();
    input.pipe(D.$sort({
      sorter: sorter
    })).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      return T.eq(data, [99, 98, 82, 55, 33, 23, 11]);
    })).pipe($('finish', done));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 4"] = function(T, done) {
    var i, input, len, n, ref;
    input = D.new_stream();
    input.pipe(D.$sort({
      direction: 'descending'
    })).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      return T.eq(data, [+2e308, 99, 98, 82, 55, 33, 23, 11, -2e308]);
    })).pipe($('finish', done));
    ref = [55, 82, 99, +2e308, -2e308, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 5"] = function(T, done) {
    var matcher_a, matcher_b, matcher_c, matcher_d, sort, step;
    step = (require('coffeenode-suspend')).step;
    sort = (function(_this) {
      return function(direction, keys, matcher, handler) {
        var i, input, key, len, n, pipeline, ref;
        info(direction, keys);
        input = D.new_stream();
        pipeline = ((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = keys.length; i < len; i++) {
            key = keys[i];
            results1.push(D.$sort({
              direction: direction,
              key: key
            }));
          }
          return results1;
        })()).reverse();
        input.pipe(D.new_stream({
          pipeline: pipeline
        })).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
          if ((data != null) && (matcher != null)) {
            return T.eq(data, matcher);
          }
        })).pipe($('finish', done));
        ref = [[55, 121, 0], [23, 126, 5], [98, 123, 1], [+2e308, 123, 3], [-2e308, 125, 4], [82, 122, 6], [99, 123, 2], [11, 127, 7], [33, 129, 8]];
        for (i = 0, len = ref.length; i < len; i++) {
          n = ref[i];
          D.send(input, n);
        }
        return D.end(input);
      };
    })(this);
    matcher_a = [[-2e308, 125, 4], [11, 127, 7], [23, 126, 5], [33, 129, 8], [55, 121, 0], [82, 122, 6], [98, 123, 1], [99, 123, 2], [2e308, 123, 3]];
    matcher_b = [[55, 121, 0], [98, 123, 1], [99, 123, 2], [2e308, 123, 3], [-2e308, 125, 4], [23, 126, 5], [82, 122, 6], [11, 127, 7], [33, 129, 8]];
    matcher_c = [[55, 121, 0], [98, 123, 1], [99, 123, 2], [2e308, 123, 3], [-2e308, 125, 4], [23, 126, 5], [82, 122, 6], [11, 127, 7], [33, 129, 8]];
    matcher_d = [[33, 129, 8], [11, 127, 7], [82, 122, 6], [23, 126, 5], [-2e308, 125, 4], [2e308, 123, 3], [99, 123, 2], [98, 123, 1], [55, 121, 0]];
    return step((function(_this) {
      return function*(resume) {
        yield sort('ascending', [0], matcher_a, resume);
        yield sort('ascending', [2], matcher_b, resume);
        yield sort('ascending', [2, 1, 0], matcher_c, resume);
        yield sort('descending', [2, 1, 0], matcher_d, resume);
        return done();
      };
    })(this));
  };

  this["(v4) $sort 6"] = function(T, done) {
    var $cast, $tabulate, $tabulate_row, sort, step, to_width;
    step = require('coffeenode-suspend').step;
    to_width = require('to-width').to_width;
    $cast = (function(_this) {
      return function() {
        return $(function(row, send) {
          row['date'] = new Date(row['date']);
          row['size'] = parseInt(row['size'], 10);
          return send(row);
        });
      };
    })(this);
    $tabulate_row = (function(_this) {
      return function() {
        return $(function(data, send) {
          var columns, date, name, size;
          date = data.date, size = data.size, name = data.name;
          columns = [to_width(date.toDateString(), 20), to_width("" + size, 12), to_width(name, 28)];
          return send('│ ' + (columns.join(' │ ')) + ' │');
        });
      };
    })(this);
    $tabulate = (function(_this) {
      return function() {
        return D.new_stream({
          pipeline: [
            $tabulate_row(), $('start', function(send) {
              return send('┌' + ('─'.repeat(68)) + '┐');
            }), $('stop', function(send) {
              return send('└' + ('─'.repeat(68)) + '┘');
            })
          ]
        });
      };
    })(this);
    sort = (function(_this) {
      return function() {
        var direction, directions_and_keys, handler, i, input, j, key, len, matcher, pipeline, ref, title;
        directions_and_keys = 3 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 2) : (i = 0, []), matcher = arguments[i++], handler = arguments[i++];
        help(directions_and_keys);
        title = [];
        for (j = 0, len = directions_and_keys.length; j < len; j++) {
          ref = directions_and_keys[j], direction = ref[0], key = ref[1];
          title.push(key + ' ' + (direction === 'ascending' ? '▲' : '▼'));
        }
        title = "sorting by " + title.join(', ');
        input = D.new_stream('read', {
          path: resolve_path(__dirname, '../test-data/files.tsv')
        });
        pipeline = (function() {
          var k, len1, ref1, results1;
          results1 = [];
          for (k = 0, len1 = directions_and_keys.length; k < len1; k++) {
            ref1 = directions_and_keys[k], direction = ref1[0], key = ref1[1];
            results1.push(D.$sort({
              direction: direction,
              key: key
            }));
          }
          return results1;
        })();
        pipeline = pipeline.reverse();
        return input.pipe(D.$split_tsv({
          names: 'inline'
        })).pipe($cast()).pipe(D.new_stream({
          pipeline: pipeline
        })).pipe($tabulate()).pipe($(function(row) {
          if (row != null) {
            return info(row);
          }
        })).pipe(D.$benchmark(title)).pipe($('finish', handler));
      };
    })(this);
    return step((function(_this) {
      return function*(resume) {
        yield sort(['ascending', 'date'], null, resume);
        yield sort(['ascending', 'size'], null, resume);
        yield sort(['ascending', 'name'], null, resume);
        yield sort(['descending', 'date'], ['descending', 'size'], ['ascending', 'name'], null, resume);
        D.$benchmark.summarize();
        return done();
      };
    })(this));
  };

  this["(v4) $as_tsv"] = function(T, done) {
    var i, len, probe, probes, step, to_width, write;
    step = require('coffeenode-suspend').step;
    to_width = require('to-width').to_width;
    write = (function(_this) {
      return function(handler) {
        var i, input, len, probe;
        input = D.new_stream();
        input.pipe(D.$as_list('date', 'size', 'name')).pipe(D.$as_tsv('date', 'size', 'name')).pipe(D.$show()).pipe($('finish', handler));
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    probes = [
      {
        date: '2016 Apr 19',
        size: 1069547520,
        name: "ubuntu-14.04.4-desktop-amd64.iso"
      }, {
        date: '2016 Apr 20',
        size: 1216498,
        name: "Vermeer-view-of-delft.jpg"
      }, {
        date: '2016 Feb  4',
        size: 28121472,
        name: "actions.pdf"
      }
    ];
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      probe['date'] = new Date(probe['date']);
    }
    return step((function(_this) {
      return function*(resume) {
        yield write(resume);
        return done();
      };
    })(this));
  };

  this["(v4) $lockstep 1"] = function(T, done) {
    var i, input_1, input_2, j, len, len1, matcher, ref, ref1, word;
    input_1 = D.new_stream();
    input_2 = D.new_stream();
    input_1.pipe(D.$lockstep(input_2)).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [['以', 'i'], ['呂', 'ro'], ['波', 'ha'], ['耳', 'ni'], ['本', 'ho'], ['部', 'he'], ['止', 'to']];
    ref = "以 呂 波 耳 本 部 止".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input_1, word);
    }
    ref1 = "i ro ha ni ho he to".split(/\s+/);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      word = ref1[j];
      D.send(input_2, word);
    }
    D.end(input_1);
    D.end(input_2);
    return null;
  };

  this["(v4) $lockstep fails on streams of unequal lengths without fallback"] = function(T, done) {
    var f;
    f = (function(_this) {
      return function() {
        var i, input_1, input_2, j, len, len1, ref, ref1, word;
        input_1 = D.new_stream();
        input_2 = D.new_stream();
        input_1.pipe(D.$lockstep(input_2)).pipe(D.$collect());
        ref = "以 呂 波 耳 本 部 止 千".split(/\s+/);
        for (i = 0, len = ref.length; i < len; i++) {
          word = ref[i];
          D.send(input_1, word);
        }
        ref1 = "i ro ha ni ho he to".split(/\s+/);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          word = ref1[j];
          D.send(input_2, word);
        }
        D.end(input_1);
        return D.end(input_2);
      };
    })(this);
    CND.run(f, null, (function(_this) {
      return function(error) {
        T.eq(error['message'], "streams of unequal lengths and no fallback value given");
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $lockstep succeeds on streams of unequal lengths with fallback"] = function(T, done) {
    var i, input_1, input_2, j, len, len1, matcher, ref, ref1, word;
    input_1 = D.new_stream();
    input_2 = D.new_stream();
    input_1.pipe(D.$lockstep(input_2, {
      fallback: null
    })).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [['以', 'i'], ['呂', 'ro'], ['波', 'ha'], ['耳', 'ni'], ['本', 'ho'], ['部', 'he'], ['止', 'to'], ['千', null]];
    ref = "以 呂 波 耳 本 部 止 千".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input_1, word);
    }
    ref1 = "i ro ha ni ho he to".split(/\s+/);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      word = ref1[j];
      D.send(input_2, word);
    }
    D.end(input_1);
    D.end(input_2);
    return null;
  };

  this["(v4) $batch (1)"] = function(T, done) {
    var glyph, i, input, len, ref;
    input = D.new_stream();
    input.pipe(D.$batch(7)).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [["い", "ろ", "は", "に", "ほ", "へ", "と"], ["ち", "り", "ぬ", "る", "を", "わ", "か"], ["よ", "た", "れ", "そ", "つ", "ね", "な"], ["ら", "む", "う", "ゐ", "の", "お", "く"], ["や", "ま", "け", "ふ", "こ", "え", "て"], ["あ", "さ", "き", "ゆ", "め", "み", "し"], ["ゑ", "ひ", "も", "せ", "す"]]);
      }
    })).pipe($('finish', done));
    ref = Array.from("いろはにほへとちりぬるをわかよたれそつねならむうゐのおくやまけふこえてあさきゆめみしゑひもせす");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      D.send(input, glyph);
    }
    D.end(input);
    return null;
  };

  this["(v4) $batch (2)"] = function(T, done) {
    var glyph, i, input, len, ref;
    input = D.new_stream();
    input.pipe(D.$batch(7)).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [["い", "ろ"]]);
      }
    })).pipe($('finish', done));
    ref = Array.from("いろ");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      D.send(input, glyph);
    }
    D.end(input);
    return null;
  };

  this["(v4) $batch and $spread"] = function(T, done) {
    var i, input, len, matcher, ref, word;
    input = D.new_stream();
    input.pipe(D.$batch(3)).pipe(D.$spread({
      indexed: true
    })).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [[0, '以'], [1, '呂'], [2, '波'], [0, '耳'], [1, '本'], [2, '部'], [0, '止']];
    ref = "以 呂 波 耳 本 部 止".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input, word);
    }
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (1)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe(D.$split_tsv()).pipe($(function(data) {
      if (data != null) {
        return help(JSON.stringify(data));
      }
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [["a", "text"], ["with", "a number"], ["of", "lines"], ["u-cjk/9e1f", "鸟", "⿴乌丶"], ["u-cjk/9e20", "鸠", "⿰九鸟"], ["u-cjk/9e21", "鸡", "⿰又鸟"], ["u-cjk/9e22", "鸢", "⿱弋鸟"], ["u-cjk/9e23", "鸣", "⿰口鸟"], ["u-cjk-xa/380b", "㠋", "(⿱山品亏)"], ["", "㠋", "(⿱山口咢) # first field is empty"]];
    text = [];
    text.push("a\ttext");
    text.push("with\ta number");
    text.push("          ");
    text.push("of\tlines\n");
    text.push("");
    text.push("\t\t# comment");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (3)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe(D.$split_tsv({
      names: ['fncr', 'glyph', 'formula']
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [
      {
        "fncr": "u-cjk/9e1f",
        "glyph": "鸟",
        "formula": "⿴乌丶"
      }, {
        "fncr": "u-cjk/9e20",
        "glyph": "鸠",
        "formula": "⿰九鸟"
      }, {
        "fncr": "u-cjk/9e21",
        "glyph": "鸡",
        "formula": "⿰又鸟 # this comment remains in output"
      }, {
        "fncr": "u-cjk/9e22",
        "glyph": "鸢",
        "formula": "⿱弋鸟"
      }, {
        "fncr": "u-cjk-xa/380b",
        "glyph": "㠋",
        "formula": "(⿱山品亏)"
      }, {
        "fncr": "",
        "glyph": "㠋",
        "formula": "(⿱山口咢) # first field is empty"
      }, {
        "fncr": "u-cjk/9e23",
        "glyph": "鸣",
        "formula": "⿰口鸟"
      }
    ];
    text = [];
    text.push("# This is a comment");
    text.push("\t\t# two empty fields, comment");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push(" ");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟 # this comment remains in output");
    text.push("");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟\t# this one will be removed");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (4)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe(D.$split_tsv({
      names: 'inline'
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe($('finish', done));
    matcher = [
      {
        "fncr": "u-cjk/9e1f",
        "glyph": "鸟",
        "formula": "⿴乌丶"
      }, {
        "fncr": "u-cjk/9e20",
        "glyph": "鸠",
        "formula": "⿰九鸟"
      }, {
        "fncr": "u-cjk/9e21",
        "glyph": "鸡",
        "formula": "⿰又鸟 # this comment remains in output"
      }, {
        "fncr": "u-cjk/9e22",
        "glyph": "鸢",
        "formula": "⿱弋鸟"
      }, {
        "fncr": "u-cjk-xa/380b",
        "glyph": "㠋",
        "formula": "(⿱山品亏)"
      }, {
        "fncr": "",
        "glyph": "㠋",
        "formula": "(⿱山口咢) # first field is empty"
      }, {
        "fncr": "u-cjk/9e23",
        "glyph": "鸣",
        "formula": "⿰口鸟"
      }
    ];
    text = [];
    text.push("# This is a comment");
    text.push("\t\t# two empty fields, comment");
    text.push("fncr\tglyph\tformula");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push(" ");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟 # this comment remains in output");
    text.push("");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟\t# this one will be removed");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) read TSV file (1)"] = function(T, done) {
    var $is_valid_fncr, $verify, input, path, sink;
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    sink = D.new_stream('devnull');
    $is_valid_fncr = function() {
      var errors;
      errors = [];
      return $((function(_this) {
        return function(entry, send, end) {
          var error_message, fncr, fncr_cid, fncr_cid_hex, glyph, glyph_cid, glyph_cid_hex, i, len, message;
          if (entry != null) {
            fncr = entry.fncr, glyph = entry.glyph;
            fncr_cid = parseInt(fncr.replace(/^[^\/]+\/(.+)$/g, '$1'), 16);
            glyph_cid = glyph.codePointAt(0);
            if (fncr_cid !== glyph_cid) {
              fncr_cid_hex = '0x' + fncr_cid.toString(16);
              glyph_cid_hex = '0x' + glyph_cid.toString(16);
              message = "CID mismatch: " + fncr + " (" + fncr_cid_hex + " != " + glyph + " (" + glyph_cid_hex + "))";
              entry['error'] = message;
              errors.push(message);
            }
            send(entry);
          }
          if (end != null) {
            if (errors.length > 0) {
              warn("there were " + errors.length + " CID mismatches");
              urge("(these were deliberately inserted into the data");
              urge("so these error messages are expected):");
              for (i = 0, len = errors.length; i < len; i++) {
                error_message = errors[i];
                warn(error_message);
              }
            }
            end();
          }
          return null;
        };
      })(this));
    };
    $verify = (function(_this) {
      return function() {
        var error_count;
        error_count = 0;
        return $(function(entry, send, end) {
          var error;
          if (entry != null) {
            error = entry.error;
            if (error != null) {
              error_count += +1;
            }
            send(entry);
          }
          if (end != null) {
            T.eq(error_count, 2);
            end();
          }
          return null;
        });
      };
    })(this);
    D.on_finish(sink, done);
    input.pipe(D.$split_tsv({
      names: 'inline'
    })).pipe($is_valid_fncr()).pipe($verify()).pipe(sink);
    return null;
  };

  this["(v4) fail to read when thru stream comes before read stream"] = function(T, done) {
    var input, path, pipeline;
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    pipeline = [
      D.new_stream(), (require('fs')).createReadStream(path, {
        encoding: 'utf-8'
      })
    ];
    input = D.new_stream({
      pipeline: pipeline
    });
    input.pipe(D.$show());
    input.on('end', (function(_this) {
      return function() {
        return debug(CND.lime('input end'));
      };
    })(this));
    input.on('finish', (function(_this) {
      return function() {
        return debug(CND.lime('input finish'));
      };
    })(this));
    D.on_finish(input, (function(_this) {
      return function(error) {
        if (error) {
          throw error;
        }
        urge("finish");
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_url"] = function(T, done) {
    var found, input, sink;
    input = D.new_stream({
      url: 'http://example.com'
    });
    sink = D.new_stream('devnull');
    found = false;
    input.pipe(D.$split()).pipe($(function(line) {
      if (line != null) {
        return found = found || /<h1>Example Domain<\/h1>/.test(line);
      }
    })).pipe(sink).pipe($('finish', (function(_this) {
      return function() {
        T.ok(found);
        return done();
      };
    })(this)));
    return null;
  };

  this["(v4) new_stream README example (1)"] = function(T, done) {
    var input;
    input = D.new_stream();
    input.pipe(D.$split()).pipe(D.$show()).pipe($('finish', done));
    input.write("helo\nworld");
    input.write("!");
    input.end();
    return null;
  };

  this["(v4) new_stream README example (2)"] = function(T, done) {
    var input, output, thruput;
    input = D.new_stream();
    thruput = D.new_stream();
    output = D.new_stream();
    input.pipe(D.$split()).pipe(thruput).pipe($('finish', done)).pipe(output);
    thruput.pipe($(function(data) {
      return log('thruput', rpr(data));
    }));
    output.pipe($(function(data) {
      return log('output', rpr(data));
    }));
    input.write("helo\nworld");
    input.write("!");
    input.end();
    return null;
  };

  this["(v4) new_stream README example (3)"] = function(T, done) {
    var input, output, thruput;
    input = D.new_stream();
    thruput = D.new_stream();
    output = D.new_stream();
    input.pipe(D.$split()).pipe(thruput).pipe($('finish', done)).pipe(output).pipe(D.$show());
    thruput.pipe($(function(data) {
      return log('thruput', rpr(data));
    }));
    output.pipe($(function(data) {
      if (data === 'helo') {
        thruput.write("meh\n");
        input.write("\nmoar\nof the same!\n");
      }
      return log('output', rpr(data));
    }));
    setImmediate((function(_this) {
      return function() {
        return input.write("helo\nworld");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.write("!");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.write("#");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.end();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path with encodings"] = function(T, done) {
    var encodings, matcher, matchers, path, probe, read_matchers, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path = resolve_temp_path('_new_stream_from_path with encodings.txt');
    probe = "helo world\näöü\n𪉟⿱鹵皿";
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    encodings = [null, 'ascii', 'utf-8', 'ucs2', 'base64', 'binary', 'hex', 'buffer'];
    matchers = {};
    write_sample = (function(_this) {
      return function(handler) {
        var input, output;
        input = D.new_stream();
        output = D.new_stream('write', {
          path: path
        });
        input.pipe(D.$show()).pipe(output).pipe($('finish', handler));
        D.send(input, probe);
        return D.end(input);
      };
    })(this);
    read_matchers = (function(_this) {
      return function(encoding, handler) {
        var input;
        if (encoding === 'buffer') {
          input = (require('fs')).createReadStream(path);
        } else {
          input = (require('fs')).createReadStream(path, {
            encoding: encoding
          });
        }
        input.pipe(D.$collect()).pipe($(function(data) {
          return matchers[encoding] = data;
        })).pipe($('finish', handler));
        return null;
      };
    })(this);
    read_sample = (function(_this) {
      return function(encoding, use_hint, handler) {
        var input;
        if (use_hint) {
          if (encoding === null) {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream(encoding, {
              path: path
            });
          }
        } else {
          if (encoding === 'buffer') {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream({
              path: path
            }, {
              encoding: encoding
            });
          }
        }
        input.pipe(D.$collect()).pipe($('null', function(result) {
          if (result != null) {
            if (CND.equals(result, matchers[encoding])) {
              return T.ok(true);
            } else {
              return T.fail("reading file with encoding " + (rpr(encoding)) + ", use_hint " + use_hint + " failed;\nexpected " + (rpr(matchers[encoding])) + "\ngot      " + (rpr(result)));
            }
          }
        })).pipe($('finish', handler));
        return null;
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var encoding, i, j, k, len, len1, len2, ref, use_hint;
        yield write_sample(resume);
        for (i = 0, len = encodings.length; i < len; i++) {
          encoding = encodings[i];
          yield read_matchers(encoding, resume);
        }
        ref = [false, true];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          use_hint = ref[j];
          for (k = 0, len2 = encodings.length; k < len2; k++) {
            encoding = encodings[k];
            yield read_sample(encoding, use_hint, resume);
          }
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path (raw)"] = function(T, done) {
    var matcher, path, probe, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path = resolve_temp_path('_new_stream_from_path (raw).txt');
    probe = "helo world\näöü\n𪉟⿱鹵皿";
    matcher = [new Buffer([0x68, 0x65, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0a, 0xc3, 0xa4, 0xc3, 0xb6, 0xc3, 0xbc, 0x0a, 0xf0, 0xaa, 0x89, 0x9f, 0xe2, 0xbf, 0xb1, 0xe9, 0xb9, 0xb5, 0xe7, 0x9a, 0xbf])];
    write_sample = (function(_this) {
      return function(handler) {
        var input, output;
        input = D.new_stream();
        output = D.new_stream('write', {
          path: path
        });
        input.pipe(D.$show()).pipe(output).pipe($('finish', handler));
        D.send(input, probe);
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(encoding, use_hint, handler) {
        var input;
        if (use_hint) {
          if (encoding === null) {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream(encoding, {
              path: path
            });
          }
        } else {
          if (encoding === 'buffer') {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream({
              path: path
            }, {
              encoding: encoding
            });
          }
        }
        input.pipe(D.$collect()).pipe(D.$show("using " + encoding + ":")).pipe($(function(result) {
          if (result != null) {
            if (CND.equals(result, matcher)) {
              return T.ok(true);
            } else {
              return T.fail("reading file with encoding " + (rpr(encoding)) + ", use_hint " + use_hint + " failed;\nexpected " + (rpr(matcher)) + "\ngot      " + (rpr(result)));
            }
          }
        })).pipe($('finish', handler));
        return null;
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var encoding, i, j, len, len1, ref, ref1, use_hint;
        yield write_sample(resume);
        ref = [false, true];
        for (i = 0, len = ref.length; i < len; i++) {
          use_hint = ref[i];
          ref1 = [null, 'buffer'];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            encoding = ref1[j];
            yield read_sample(encoding, use_hint, resume);
          }
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) TSV whitespace trimming"] = function(T, done) {
    var ends_pattern, i, len, matcher, mid_pattern, probe, probes_and_matchers, ref, result_A, result_B;
    ends_pattern = /(?:^[\x20\f\n\r\v​\u00a0\u1680​\u180e\u2000-\u200a​\u2028\u2029\u202f\u205f​\u3000\ufeff]+)|(?:[\x20\f\n\r\v​\u00a0\u1680​\u180e\u2000-\u200a​\u2028\u2029\u202f\u205f​\u3000\ufeff]+$)/g;
    mid_pattern = /[\x20\f\n\r\v​\u00a0\u1680​\u180e\u2000-\u200a​\u2028\u2029\u202f\u205f​\u3000\ufeff]*\t[\x20\f\n\r\v​\u00a0\u1680​\u180e\u2000-\u200a​\u2028\u2029\u202f\u205f​\u3000\ufeff]*/g;
    probes_and_matchers = [["helo world", "helo world"], ["helo\tworld", "helo\tworld"], ["helo\t  world", "helo\tworld"], ["helo\t  world ", "helo\tworld"], ["\u3000 helo\t　world\n\n", "helo\tworld"], ["\t\thelo\t　world\n\n", "\t\thelo\tworld"], ["\r\t\thelo   \t　world\n\n", "\t\thelo\tworld"]];
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      ref = probes_and_matchers[i], probe = ref[0], matcher = ref[1];
      result_A = probe;
      result_A = result_A.replace(ends_pattern, '');
      result_A = result_A.replace(mid_pattern, '\t');
      result_B = D.$split_tsv._trim(probe);
      debug();
      T.eq(result_A, matcher);
      T.eq(result_B, matcher);
    }
    return done();
  };

  this["(v4) stream sigils"] = function(T, done) {
    var output, output_path, path;
    debug((Array.from("⏳ ⎘ ⎚ ⎇\n␀␁␂␃␄␅␆␇␈␉␊␋␌␍␎␏␐␑␒␓␔␕␖␗␘␙␚␛␜␝␞␟␠␡␢␣␤␥␦\n✁✂✃✄✆✇✈✉✌✍✎✏✐✑✒✓✔✕✖✗✘✙✚✛✜✝✞✟✠✡✢✣✤✥✦✧✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹✺✻✼✽✾✿❀❁❂❃❄❅❆❇❈❉❊❋❍❏❐❑\n❒❖❗❘❙❚❛❜❝❞❡❢❣❤❥❦❧❨❩❪❫❬❭❮❯❰❱❲❳❴❵❶❷❸❹❺❻❼❽❾❿➀➁➂➃➄➅➆➇➈➉➊➋➌➍➎➏➐➑➒➓➔➘➙➚➛➜➝➞➟➠➡➢➣➤\n➥➦➧➨➩➪➫➬➭➮➯➱➲➳➴➵➶➷➸➹➺➻➼➽➾✅✊✋✨❌❎❓❔❕❟❠➕➖➗➰➿✀")).join(' '));
    output_path = resolve_temp_path('sigils-output.txt');
    path = resolve_temp_path('sigils.txt');
    output = D.new_stream('write', {
      path: path
    });
    D.on_finish(output, (function(_this) {
      return function() {
        help(CND.grey('001'), $(function(d) {}));
        help(CND.grey('002'), $(function(d, s) {}));
        help(CND.grey('003'), $(function(d, s, e) {}));
        help();
        help(CND.grey('004'), D.new_stream());
        help(CND.grey('005'), D.new_stream({
          file: path
        }));
        help(CND.grey('006'), D.new_stream('lines', {
          file: path
        }));
        help();
        help(CND.grey('007'), D._new_stream$write_to_file(path, {
          encoding: 'utf-8'
        }));
        help(CND.grey('007'), D._new_stream$write_to_file(path, {
          encoding: 'utf-8'
        }));
        help(CND.grey('008'), D.$bridge(D._new_stream$write_to_file(path, {
          encoding: 'utf-8'
        })));
        help(CND.grey('009'), D.new_stream('write', {
          file: path
        }));
        help(CND.grey('009'), D.new_stream('write', 'utf-8', {
          file: path
        }));
        help(CND.grey('010'), D.new_stream('write', 'lines', {
          file: path
        }));
        help();
        help(CND.grey('011'), D.new_stream('devnull'));
        help(CND.grey('011'), D.new_stream({
          pipeline: [
            D.new_stream({
              file: path
            }), D.new_stream('devnull')
          ]
        }));
        help();
        help(CND.grey('012'), D._new_stream$split_buffer('\n'));
        help(CND.grey('013'), D.$split({
          matcher: '\n',
          encoding: 'buffer'
        }));
        help(CND.grey('014'), D.$split({
          matcher: '\n'
        }));
        help();
        help(CND.grey('015'), D.new_stream({
          pipeline: [
            $(function(data) {
              return null;
            })
          ]
        }));
        help(CND.grey('015'), D.new_stream({
          pipeline: [
            $(function(data) {
              return null;
            }), $(function(data, send) {
              return null;
            })
          ]
        }));
        help(CND.grey('016'), $(function(data) {
          return null;
        }));
        help(CND.grey('018'), D.$sort());
        help(CND.grey('019'), D.$show());
        help(CND.grey('020'), D.$collect());
        help(CND.grey('021'), D.$spread());
        help(CND.grey('022'), D.new_stream({
          pipeline: [
            D.new_stream('read', 'lines', {
              file: path
            }), D.$sort(), D.new_stream('write', 'lines', {
              file: output_path
            })
          ]
        }));
        help();
        help(CND.grey('021'), D.$split_tsv({
          empty: false,
          comments: false
        }));
        help(CND.grey('021'), D.$split_tsv({
          empty: false
        }));
        help(CND.grey('021'), D.$split_tsv({
          comments: false
        }));
        help(CND.grey('021'), D.$split_tsv());
        return setImmediate(function() {
          return done();
        });
      };
    })(this));
    D.send(output, 'x');
    return D.end(output);
  };

  this["(v4) $join (1)"] = function(T, done) {
    var i, kana, len, ref, source;
    source = D.new_stream();
    source.pipe(D.$join(', ')).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, "い, ろ, は, に, ほ, へ, と");
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $join (2)"] = function(T, done) {
    var i, j, kana, len, len1, ref, ref1, source;
    source = D.new_stream();
    source.pipe(D.$join()).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, "い\nろ\nは\nに, ほ, へ, と\n諸\n行\n無\n常");
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろは");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.send(source, Array.from("にほへと"));
    ref1 = Array.from("諸行無常");
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      kana = ref1[j];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $join (3)"] = function(T, done) {
    var i, j, kana, len, len1, ref, ref1, source;
    source = D.new_stream();
    source.pipe(D.$join('—', '·')).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, "い—ろ—は—に·ほ·へ·と—諸—行—無—常");
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろは");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.send(source, Array.from("にほへと"));
    ref1 = Array.from("諸行無常");
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      kana = ref1[j];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $intersperse (1)"] = function(T, done) {
    var i, intersperse, kana, len, ref, source;
    intersperse = D.$intersperse(',');
    debug(intersperse);
    source = D.new_stream();
    source.pipe(intersperse).pipe(D.$show('2')).pipe(D.$join('')).pipe(D.$show('4')).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, "い,ろ,は,に,ほ,へ,と");
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $intersperse (2)"] = function(T, done) {
    var i, intersperse, kana, len, ref, source;
    intersperse = D.$intersperse('|', ',');
    debug(intersperse);
    source = D.new_stream();
    source.pipe(intersperse).pipe(D.$show('2')).pipe(D.$join('')).pipe(D.$show('4')).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, "|い,ろ,は,に,ほ,へ,と|");
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $intersperse (3)"] = function(T, done) {
    var i, intersperse, kana, len, ref, source;
    intersperse = D.$intersperse('[', ',', ']');
    debug(intersperse);
    source = D.new_stream();
    source.pipe(D.$stringify()).pipe(intersperse).pipe(D.$join('')).pipe($((function(_this) {
      return function(data, send) {
        return T.eq(data, '["い","ろ","は","に","ほ","へ","と"]');
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $intersperse (3a)"] = function(T, done) {
    var i, intersperse, kana, len, ref, source;
    intersperse = D.$intersperse('[\n  ', ',\n  ', '\n  ]\n');
    debug(intersperse);
    source = D.new_stream();
    source.pipe(D.$stringify()).pipe(intersperse).pipe(D.$join('')).pipe($((function(_this) {
      return function(data, send) {
        info('\n' + data);
        return T.eq(data, '[\n  "い",\n  "ろ",\n  "は",\n  "に",\n  "ほ",\n  "へ",\n  "と"\n  ]\n');
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $intersperse (4)"] = function(T, done) {
    var demo, matcher_idx, matchers, step;
    step = (require('coffeenode-suspend')).step;
    demo = (function(_this) {
      return function() {
        var handler, i, input, x;
        x = 2 <= arguments.length ? slice.call(arguments, 0, i = arguments.length - 1) : (i = 0, []), handler = arguments[i++];
        input = D.new_stream();
        input.pipe(D.$intersperse.apply(D, x)).pipe(D.$collect()).pipe($(function(data) {
          var result;
          if (data != null) {
            matcher_idx += +1;
            result = data.join('');
            help(x, result);
            return T.eq(result, matchers[matcher_idx]);
          }
        })).pipe($('finish', done));
        D.send(input, 'a');
        D.send(input, 'b');
        D.send(input, 'c');
        return D.end(input);
      };
    })(this);
    matcher_idx = -1;
    matchers = ['abc', 'abc', 'a—b—c', 'abc', 'a—b—c', '{abc{', '{a—b—c{', 'abc', 'abc}', 'a—b—c', 'a—b—c}', '{abc', '{abc}', '{a—b—c', '{a—b—c}', '{a—b—c}'];
    step((function(_this) {
      return function*(resume) {

        /* 1 way to call with 0 arguments */
        yield demo(resume);

        /* 2 ways to call with 1 arguments */
        yield demo(null, resume);
        yield demo('—', resume);

        /* 4 ways to call with 2 arguments */
        yield demo(null, null, resume);
        yield demo(null, '—', resume);
        yield demo('{', null, resume);
        yield demo('{', '—', resume);

        /* 8 ways to call with 3 arguments */
        yield demo(null, null, null, resume);
        yield demo(null, null, '}', resume);
        yield demo(null, '—', null, resume);
        yield demo(null, '—', '}', resume);
        yield demo('{', null, null, resume);
        yield demo('{', null, '}', resume);
        yield demo('{', '—', null, resume);
        yield demo('{', '—', '}', resume);
        yield demo.apply(null, slice.call('{—}').concat([resume]));
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $as_json_list (1)"] = function(T, done) {
    var as_json_list, i, kana, len, ref, source;
    as_json_list = D.$as_json_list();
    debug(as_json_list);
    source = D.new_stream();
    source.pipe(as_json_list).pipe($((function(_this) {
      return function(data, send) {
        info('\n' + data);
        return T.eq(data, '["い","ろ","は","に","ほ","へ","と"]');
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $as_json_list (2)"] = function(T, done) {
    var as_json_list, i, kana, len, ref, source;
    as_json_list = D.$as_json_list('pretty');
    debug(as_json_list);
    source = D.new_stream();
    source.pipe(as_json_list).pipe($((function(_this) {
      return function(data, send) {
        info('\n' + data);
        return T.eq(data, '[\n  "い",\n  "ろ",\n  "は",\n  "に",\n  "ほ",\n  "へ",\n  "と"\n  ]\n');
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(source, kana);
    }
    D.end(source);
    return null;
  };

  this["(v4) $as_json_list (2a)"] = function(T, done) {
    var f;
    f = function(path, handler) {
      var output, source;
      source = D.new_stream();
      output = D.new_stream('write', {
        path: path
      });
      source.pipe($((function(_this) {
        return function(data, send) {
          send(JSON.stringify(data));
          return send(',');
        };
      })(this))).pipe($('start', (function(_this) {
        return function(send) {
          return send('[');
        };
      })(this))).pipe($('stop', (function(_this) {
        return function(send) {
          return send(']\n');
        };
      })(this))).pipe(output).pipe($('finish', handler));
      D.send(source, 42);
      D.send(source, 'a string');
      D.send(source, false);
      return D.end(source);
    };
    f('/tmp/foo.json', (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $as_json_list (2b)"] = function(T, done) {
    var f;
    f = function(path, handler) {
      var $as_text, $insert_delimiters, $serialize, $start_list, $stop_list, output, source;
      $serialize = (function(_this) {
        return function() {
          return $(function(event, send) {
            var kind, value;
            kind = event[0], value = event[1];
            if (kind !== 'data') {
              return send(event);
            }
            return send(['json', JSON.stringify(value)]);
          });
        };
      })(this);
      $insert_delimiters = (function(_this) {
        return function() {
          return $(function(event, send) {
            var kind, value;
            kind = event[0], value = event[1];
            send(event);
            if (kind !== 'json') {
              return;
            }
            return send(['command', 'delimiter']);
          });
        };
      })(this);
      $start_list = (function(_this) {
        return function() {
          return $('start', function(send) {
            return send(['command', 'start-list']);
          });
        };
      })(this);
      $stop_list = (function(_this) {
        return function() {
          return $('stop', function(send) {
            return send(['command', 'stop-list']);
          });
        };
      })(this);
      $as_text = (function(_this) {
        return function() {
          return $(function(event, send) {
            var command, kind, value;
            kind = event[0], value = event[1];
            if (kind === 'json') {
              return send(value);
            }
            if (kind !== 'command') {
              return send(event);
            }
            switch (command = value) {
              case 'delimiter':
                send(',\n');
                break;
              case 'start-list':
                send('[\n');
                break;
              case 'stop-list':
                send('\n]\n');
                break;
              default:
                send.error(new Error("unknown command " + (rpr(command))));
            }
            return null;
          });
        };
      })(this);
      source = D.new_stream();
      output = D.new_stream('write', {
        path: path
      });
      source.pipe($serialize()).pipe($insert_delimiters()).pipe($start_list()).pipe($stop_list()).pipe($as_text()).pipe(output).pipe($('finish', handler));
      D.send(source, ['data', 42]);
      D.send(source, ['data', 'a string']);
      D.send(source, ['data', null]);
      D.send(source, ['data', false]);
      return D.end(source);
    };
    f('/tmp/foo.json', (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $as_json_list (2c)"] = function(T, done) {
    var f;
    f = function(path, handler) {
      var data, i, len, output, probes, source;
      source = D.new_stream();
      output = D.new_stream('write', {
        path: path
      });
      info('3285', output);
      source.pipe($((function(_this) {
        return function(data, send) {
          if (data === Symbol["for"]('null')) {
            return send('null');
          } else {
            return send(JSON.stringify(data));
          }
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          send(data);
          return send(',');
        };
      })(this))).pipe($('start', (function(_this) {
        return function(send) {
          return send('[');
        };
      })(this))).pipe($('stop', (function(_this) {
        return function(send) {
          return send(']');
        };
      })(this))).pipe(D.$collect()).pipe($((function(_this) {
        return function(data, send) {
          return send(data.join(''));
        };
      })(this))).pipe($((function(_this) {
        return function(data) {
          return T.eq(data, '[42,"a string",null,false,]');
        };
      })(this))).pipe(output).pipe($('finish', handler));
      probes = [42, 'a string', null, false];
      for (i = 0, len = probes.length; i < len; i++) {
        data = probes[i];
        D.send(source, data === null ? Symbol["for"]('null') : data);
      }
      return D.end(source);
    };
    f(resolve_temp_path('$as_json_list (2c)'), (function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $as_json_list (3)"] = function(T, done) {
    var i, len, matcher, probe, probes, source;
    source = D.new_stream();
    source.pipe(D.$as_json_list('pretty')).pipe($((function(_this) {
      return function(data, send) {
        info('\n' + data);
        return T.eq(data, '[\n  "a text",\n  {"~isa":"symbol","value":"XXXXXXXX"},\n  42,\n  null,\n  true,\n  ["foo","bar"]\n  ]\n');
      };
    })(this))).pipe($('finish', done));
    probes = ["a text", Symbol["for"]('XXXXXXXX'), 42, Symbol["for"]('null'), true, ['foo', 'bar']];
    matcher = ['"a text"', '{"~isa":"symbol","value":"XXXXXXXX"}', '42', 'null', 'true', '["foo","bar"]'];
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(source, probe);
    }
    D.end(source);
    return null;
  };

  this["(v4) symbols as data events (1)"] = function(T, done) {
    var element, i, len, probe, source;
    source = D.new_stream();
    source.pipe((function(_this) {
      return function() {
        var idx;
        idx = -1;
        return $(function(data, send) {
          idx += +1;
          info(data);
          return T.eq(data, probe[idx]);
        });
      };
    })(this)()).pipe($('finish', done));
    probe = ["a text", Symbol["for"]('XXXXXXXX'), 42, Symbol["for"]('null'), true, ['foo', 'bar']];
    for (i = 0, len = probe.length; i < len; i++) {
      element = probe[i];
      D.send(source, element);
    }
    D.end(source);
    return null;
  };

  this["(v4) symbols as data events (2)"] = function(T, done) {
    var element, i, len, matchers, probes, source;
    source = D.new_stream();
    source.pipe(D.$stringify()).pipe((function(_this) {
      return function() {
        var idx;
        idx = -1;
        return $(function(data, send) {
          idx += +1;
          return T.eq(data, matchers[idx]);
        });
      };
    })(this)()).pipe($('finish', done));
    probes = ["a text", Symbol["for"]('XXXXXXXX'), 42, Symbol["for"]('null'), true, ['foo', 'bar']];
    matchers = ['"a text"', '{"~isa":"symbol","value":"XXXXXXXX"}', '42', 'null', 'true', '["foo","bar"]'];
    for (i = 0, len = probes.length; i < len; i++) {
      element = probes[i];
      D.send(source, element);
    }
    D.end(source);
    return null;
  };

  this["(v4) all remit methods have opt-in end detection (1)"] = function(T, done) {
    var i, input, kana, len, ref;
    input = D.new_stream();
    input.pipe($((function(_this) {
      return function(kana) {
        if (kana != null) {
          return T.ok(true);
        } else {
          return T.fail("received `null` for data");
        }
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("アイウエオカキクケコ");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(input, kana);
    }
    return D.end(input);
  };

  this["(v4) all remit methods have opt-in end detection (2)"] = function(T, done) {
    var data_count, i, input, kana, len, null_count, ref;
    input = D.new_stream();
    data_count = 0;
    null_count = 0;
    input.pipe($('null', (function(_this) {
      return function(kana) {
        if (kana != null) {
          return data_count += +1;
        } else {
          return null_count += +1;
        }
      };
    })(this))).pipe($('null', (function(_this) {
      return function(kana) {
        if (kana == null) {
          T.eq(data_count, 10);
          return T.eq(null_count, 1);
        }
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("アイウエオカキクケコ");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(input, kana);
    }
    return D.end(input);
  };

  this["(v4) all remit methods have opt-in end detection (3)"] = function(T, done) {
    var i, input, kana, len, ref;
    input = D.new_stream();
    input.pipe($((function(_this) {
      return function(kana, send) {
        if (kana != null) {
          T.ok(true);
        } else {
          T.fail("received `null` for data");
        }
        return send(kana);
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("アイウエオカキクケコ");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(input, kana);
    }
    return D.end(input);
  };

  this["(v4) all remit methods have opt-in end detection (4)"] = function(T, done) {
    var data_count, i, input, kana, len, null_count, ref;
    input = D.new_stream();
    data_count = 0;
    null_count = 0;
    input.pipe($('null', (function(_this) {
      return function(kana, send) {
        if (kana != null) {
          data_count += +1;
        } else {
          null_count += +1;
        }
        return send(kana);
      };
    })(this))).pipe($('null', (function(_this) {
      return function(kana) {
        if (kana != null) {
          return data_count += +1;
        } else {
          null_count += +1;
          T.eq(data_count, 20);
          return T.eq(null_count, 2);
        }
      };
    })(this))).pipe($('finish', done));
    ref = Array.from("アイウエオカキクケコ");
    for (i = 0, len = ref.length; i < len; i++) {
      kana = ref[i];
      D.send(input, kana);
    }
    return D.end(input);
  };

  this["(v4) $async only allows 3 arguments in transformation (1)"] = function(T, done) {
    var error;
    T.throws("method with 1 arguments not supported for asynchronous transforms", ((function(_this) {
      return function() {
        return $async(function(data) {});
      };
    })(this)));
    T.throws("method with 2 arguments not supported for asynchronous transforms", ((function(_this) {
      return function() {
        return $async(function(data, send) {});
      };
    })(this)));
    T.throws("method with 4 arguments not supported for asynchronous transforms", ((function(_this) {
      return function() {
        return $async(function(data, send, foo, bar) {});
      };
    })(this)));
    T.throws("tag 'null' not allowed for asynchronous transforms", ((function(_this) {
      return function() {
        return $async('null', function(data) {});
      };
    })(this)));
    T.throws("tag 'null' not allowed for asynchronous transforms", ((function(_this) {
      return function() {
        return $async('null', function(data, send) {});
      };
    })(this)));
    T.throws("tag 'null' not allowed for asynchronous transforms", ((function(_this) {
      return function() {
        return $async('null', function(data, send, end) {});
      };
    })(this)));
    T.throws("tag 'null' not allowed for asynchronous transforms", ((function(_this) {
      return function() {
        return $async('null', function(data, send, foo, bar) {});
      };
    })(this)));
    try {
      $async(function(data, send, end) {
        return null;
      });
      T.succeed("$async with 3 arguments OK");
    } catch (error1) {
      error = error1;
      T.fail("fails with error " + (rpr(error['message'])));
    }
    return done();
  };

  this["(v4) README demo (1)"] = function(T, done) {
    var $as_text_line, $comment, $summarize, $verify, i, input, len, n, ref;
    $comment = function() {
      var count;
      count = 0;
      return $((function(_this) {
        return function(data) {
          if (data != null) {
            count += +1;
            return info("received event:", data);
          } else {
            return warn("stream has ended; read " + count + " events");
          }
        };
      })(this));
    };
    $as_text_line = function() {
      return $((function(_this) {
        return function(data, send) {
          return send("line: " + (JSON.stringify(data)) + '\n');
        };
      })(this));
    };
    $summarize = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            collector.sort();
            help(title, collector.join(', '));
            return end();
          }
        };
      })(this));
    };
    $verify = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            T.eq(collector, ['"line: 4\\n"', '"line: 7\\n"', '"line: 9\\n"', '"line: 3\\n"', '"line: 5\\n"', '"line: 6\\n"']);
            return end();
          }
        };
      })(this));
    };
    input = D.new_stream();
    input.pipe($comment()).pipe($((function(_this) {
      return function(data) {
        return log(CND.truth(data != null));
      };
    })(this))).pipe($summarize("position #1:")).pipe($as_text_line()).pipe($verify()).pipe($summarize("position #2:")).pipe($('finish', done));
    ref = [4, 7, 9, 3, 5, 6];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      input.write(n);
    }
    input.end();
    return null;
  };

  this["(v4) README demo (2)"] = function(T, done) {
    var $count, $show, input;
    $show = function() {
      return $(function(data) {
        return console.log("received data:", data);
      });
    };
    $count = function() {
      var count;
      count = 0;
      return $('null', function(data) {
        if (data != null) {
          return count += +1;
        } else {
          return console.log("stream has ended; read " + count + " events");
        }
      });
    };
    input = D.new_stream();
    input.pipe(D.$split()).pipe($show()).pipe($count()).pipe($('finish', done));
    D.send(input, "Here we write\nsome lines of text\ninto the stream.");
    D.end(input);
    return null;
  };

  this["(v4) README demo (3)"] = function(T, done) {
    var $add, $as_number, $show, input;
    $as_number = function() {
      return $(function(data, send) {
        return send(parseFloat(data));
      });
    };
    $add = function(increment) {
      if (increment == null) {
        increment = 1;
      }
      return $(function(n, send) {
        send(n);
        return send(n + increment);
      });
    };
    $show = function() {
      return $(function(data) {
        return console.log("received data:", data);
      });
    };
    input = D.new_stream();
    input.pipe(D.$split()).pipe($as_number()).pipe($add(12)).pipe(D.$sort()).pipe($show()).pipe($('finish', done));
    D.send(input, "20\n10\n50\n40\n30\n");
    D.end(input);
    return null;
  };


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*  * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */


  /*   * # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # */

  this["(empty-string) can send empty strings (w/out pipeline)"] = function(T, done) {
    var input, matchers;
    matchers = ['', ''];
    input = D.new_stream();
    input.pipe(D.$show()).pipe($((function(_this) {
      return function(data) {
        return urge(data);
      };
    })(this))).pipe($((function(_this) {
      return function(data, send) {
        if (data === '') {
          return send(data);
        }
      };
    })(this))).pipe($validate_probes(T, matchers)).pipe($('finish', done));
    D.send(input, 'A text');
    D.send(input, 'with a few');
    D.send(input, '');
    D.send(input, 'lines');
    D.send(input, '');
    D.send(input, 'some of which');
    D.send(input, 'are empty.');
    return D.end(input);
  };

  this["(empty-string) can send empty strings (w/ pipeline)"] = function(T, done) {
    var input, matchers, through;
    matchers = ['', ''];
    through = D.new_stream({
      pipeline: [D.new_stream(), D.new_stream(), D.new_stream()]
    });
    input = D.new_stream();
    input.pipe(through).pipe(D.$show()).pipe($((function(_this) {
      return function(data) {
        return urge(data);
      };
    })(this))).pipe($((function(_this) {
      return function(data, send) {
        if (data === '') {
          return send(data);
        }
      };
    })(this))).pipe($validate_probes(T, matchers)).pipe($('finish', done));
    D.send(input, 'A text');
    D.send(input, 'with a few');
    D.send(input, '');
    D.send(input, 'lines');
    D.send(input, '');
    D.send(input, 'some of which');
    D.send(input, 'are empty.');
    return D.end(input);
  };

  this["(empty-string) new D.duplex, new_stream from pipeline work with empty strings"] = function(T, done) {
    var cause_error, collect_1, collect_2, collector_1, collector_2, confluence, filter, handler, input, matchers_1, matchers_2, pipeline, receiver, sender, show;
    matchers_1 = ["A text", "with a few", "lines", "", "some", "", "of which", "are empty."];
    matchers_2 = ["", ""];
    collector_1 = [];
    collector_2 = [];
    collect_1 = $((function(_this) {
      return function(data) {
        return collector_1.push(data);
      };
    })(this));
    collect_2 = $((function(_this) {
      return function(data) {
        return collector_2.push(data);
      };
    })(this));
    show = $((function(_this) {
      return function(data) {
        return urge(data);
      };
    })(this));
    filter = $((function(_this) {
      return function(data, send) {
        if (data === '') {
          return send(data);
        }
      };
    })(this));
    cause_error = $((function(_this) {
      return function(data, send) {
        if (data !== "some") {
          return send(data);
        }
        return send.error(new Error("test error"));
      };
    })(this));
    input = D.new_stream();
    receiver = D.new_stream();
    sender = D.new_stream();
    handler = (function(_this) {
      return function(error) {
        if (error != null) {
          return pipeline.emit('error', error);
        }
        return help('ok');
      };
    })(this);
    pipeline = [receiver, collect_1, show, filter, collect_2, sender];
    confluence = D.new_stream({
      pipeline: pipeline
    });
    input.pipe(confluence).pipe($('finish', (function(_this) {
      return function() {
        T.eq(collector_1, matchers_1);
        T.eq(collector_2, matchers_2);
        return done();
      };
    })(this)));
    D.send(input, "A text");
    D.send(input, "with a few");
    D.send(input, "lines");
    D.send(input, "");
    D.send(input, "some");
    D.send(input, "");
    D.send(input, "of which");
    D.send(input, "are empty.");
    return D.end(input);
  };

  this["(empty-string) can send empty strings ($split) (1)"] = function(T, done) {
    var input, matchers, probe;
    probe = "A text\nwith a few\n\nlines\n\nsome of which\nare empty.";
    debug('4412', rpr(probe));
    matchers = ['', ''];
    input = D.new_stream();
    input.pipe(D.$split()).pipe(D.$show()).pipe($('finish', done));
    D.send(input, probe);
    return D.end(input);
  };

  this["(v4) $on_first, $on_last not called in empty stream (1)"] = function(T, done) {
    var $bottom, $top, count, input;
    count = 0;
    $top = function() {
      return $('first', function(event, send) {
        count += +1;
        warn("$ 'first', called in empty stream", event);
        return send(event);
      });
    };
    $bottom = function() {
      return $('last', function(event, send) {
        count += +1;
        warn("$ 'last', called in empty stream", event);
        return send(event);
      });
    };
    input = D.new_stream();
    input.pipe(D.new_stream({
      pipeline: [$top(), $bottom()]
    })).pipe($('finish', (function(_this) {
      return function() {
        T.eq(count, 0);
        return done();
      };
    })(this)));
    D.end(input);
    return null;
  };

  this["(v4) $on_first, $on_last called in empty stream when tagged 'null' (1)"] = function(T, done) {
    var $bottom, $top, count, input;
    count = 0;
    $top = function() {
      return $('first', 'null', function(event, send) {
        count += +1;
        help("$ 'first', called in empty stream", event);
        return send(event);
      });
    };
    $bottom = function() {
      return $('last', 'null', function(event, send) {
        count += +1;
        help("$ 'last', called in empty stream", event);
        return send(event);
      });
    };
    input = D.new_stream();
    input.pipe(D.new_stream({
      pipeline: [$top(), $bottom()]
    })).pipe($('finish', (function(_this) {
      return function() {
        T.eq(count, 2);
        return done();
      };
    })(this)));
    D.end(input);
    return null;
  };

  this["(v4) $on_first, $on_last, $on_start, $on_stop work as expected (1)"] = function(T, done) {
    var collector, glyph, has_ended, i, input, len, ref;
    collector = [];
    has_ended = false;
    input = D.new_stream();
    input.pipe($('first', (function(_this) {
      return function(data, send) {
        return null;
      };
    })(this))).pipe($('first', (function(_this) {
      return function(data, send) {
        return send("{" + data + "}");
      };
    })(this))).pipe($('last', (function(_this) {
      return function(data, send) {
        return null;
      };
    })(this))).pipe($('last', (function(_this) {
      return function(data, send) {
        return send("{" + data + "}");
      };
    })(this))).pipe($('start', (function(_this) {
      return function(send) {
        return send("假");
      };
    })(this))).pipe($('stop', (function(_this) {
      return function(send) {
        return send("名");
      };
    })(this))).pipe($('null', (function(_this) {
      return function(data, send) {
        if (data != null) {
          collector.push(data);
        } else {
          T.eq(collector, ["假", "{ろ}", "は", "に", "ほ", "{へ}", "名"]);
          has_ended = true;
          send(null);
        }
        return null;
      };
    })(this))).pipe($('finish', (function(_this) {
      return function() {
        T.eq(has_ended, true);
        return done();
      };
    })(this)));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      D.send(input, glyph);
    }
    D.end(input);
    return null;
  };

  this["(v4) $on_first, $on_last, $on_start, $on_stop work as expected (2)"] = function(T, done) {
    var collector, glyph, has_ended, i, input, len, ref;
    collector = [];
    has_ended = false;
    input = D.new_stream();
    input.pipe($('first', 'null', (function(_this) {
      return function(data, send) {
        return null;
      };
    })(this))).pipe($('first', 'null', (function(_this) {
      return function(data, send) {
        return send("{" + data + "}");
      };
    })(this))).pipe($('last', 'null', (function(_this) {
      return function(data, send) {
        return null;
      };
    })(this))).pipe($('last', 'null', (function(_this) {
      return function(data, send) {
        return send("{" + data + "}");
      };
    })(this))).pipe($('null', (function(_this) {
      return function(data, send) {
        if (data != null) {
          collector.push(data);
        } else {
          T.eq(collector, ["{ろ}", "は", "に", "ほ", "{へ}"]);
          has_ended = true;
          send(null);
        }
        return null;
      };
    })(this))).pipe($('finish', (function(_this) {
      return function() {
        T.eq(has_ended, true);
        return done();
      };
    })(this)));
    ref = Array.from("いろはにほへと");
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      D.send(input, glyph);
    }
    D.end(input);
    return null;
  };

  this["(empty-string) can send empty strings ($split) (2)"] = function(T, done) {
    var input, matchers, probe;
    probe = "A text\nwith a few\n\nlines\n\nsome of which\nare empty." + '\n\n';
    debug('4412', rpr(probe));
    matchers = ['', ''];
    input = D.new_stream();
    input.pipe(D.$split()).pipe(D.$show()).pipe($('finish', done));
    D.send(input, probe);
    return D.end(input);
  };

  this["(v4) $tabulate"] = function(T, done) {
    var $cast, $colorize, collector, matchers, show, step;
    step = require('coffeenode-suspend').step;
    collector = [];
    matchers = [];
    $cast = (function(_this) {
      return function() {
        var as_iso_date;
        as_iso_date = function(date) {
          var R;
          R = date.toISOString();
          R = R.replace('T', '-');
          R = R.replace(/:/g, '-');
          R = R.replace(/\..*$/g, '');
          return R;
        };
        return $(function(row, send) {
          row['date'] = as_iso_date(new Date(row['date']));
          row['size'] = parseInt(row['size'], 10);
          return send(row);
        });
      };
    })(this);
    $colorize = (function(_this) {
      return function() {
        return $(function(row, send) {
          row['date'] = CND.yellow(row['date']);
          row['size'] = CND.steel(row['size']);
          row['name'] = CND.lime(row['name']);
          return send(row);
        });
      };
    })(this);
    show = (function(_this) {
      return function(table_settings, as_lists, matcher, handler) {
        var input;
        input = D.new_stream('read', {
          path: resolve_path(__dirname, '../test-data/files.tsv')
        });
        return input.pipe(D.$split_tsv({
          names: 'inline'
        })).pipe(D.$sample(1 / 2, {
          seed: 1.1
        })).pipe($cast()).pipe($colorize()).pipe((function() {
          if (as_lists) {
            return D.$as_list('date', 'size', 'name');
          } else {
            return D.$pass();
          }
        })()).pipe(D.$tabulate(table_settings)).pipe($(function(data) {
          return collector.push(data);
        })).pipe($(function(row) {
          return echo(row);
        })).pipe($('finish', handler));
      };
    })(this);
    return step((function(_this) {
      return function*(resume) {
        yield show(null, false, null, resume);
        yield show({
          keys: ['name', 'date']
        }, false, null, resume);
        yield show({
          keys: ['name', 'date', 'size']
        }, false, null, resume);
        yield show({
          pad: 3,
          width: 50,
          widths: [19, 12]
        }, false, null, resume);
        yield show({
          box: 'plain',
          width: 50,
          widths: [19, 12]
        }, false, null, resume);
        yield show({
          box: 'round',
          alignment: 'right',
          width: 50,
          widths: [25, 12]
        }, false, null, resume);
        yield show({
          alignment: 'right',
          width: 50,
          widths: [25, 12],
          alignments: [null, null, 'left']
        }, true, null, resume);
        yield show({
          alignment: 'right',
          width: 50,
          widths: [25, 12],
          alignments: [null, null, 'center']
        }, true, null, resume);
        yield show({
          alignment: 'right',
          width: 50,
          widths: [25, 12],
          alignments: [null, null, 'center'],
          headings: ['Date', 'Size', 'Filename']
        }, true, null, resume);
        return done();
      };
    })(this));
  };

  this["(v4) $select (1)"] = function(T, done) {
    var dispatch, draw_a_separator, i, len, matchers, my_input, probe, probes, say_it_in_english, say_it_in_french, say_it_in_german, tracks;
    say_it_in_english = $(function(n, send) {
      if (n != null) {
        switch (n) {
          case 1:
            send('one');
            break;
          case 2:
            send('two');
            break;
          case 3:
            send('three');
            break;
          default:
            send('many');
        }
      }
      return null;
    });
    say_it_in_french = $(function(n, send) {
      switch (n) {
        case 1:
          send('un');
          break;
        case 2:
          send('deux');
          break;
        case 3:
          send('troix');
          break;
        default:
          send('beaucoup');
      }
      return null;
    });
    say_it_in_german = $(function(n, send) {
      switch (n) {
        case 1:
          send('eins');
          break;
        case 2:
          send('zwei');
          break;
        case 3:
          send('drei');
          break;
        default:
          send('viele');
      }
      return null;
    });
    draw_a_separator = $(function(ignore, send) {
      send('—————');
      return null;
    });
    dispatch = function(event) {
      var language, languages, number;
      if (event === 'drop this one') {
        return {
          key: Symbol["for"]('drop')
        };
      }
      if (event === 'pass this one') {
        return {
          key: Symbol["for"]('pass')
        };
      }
      if (event === '---') {
        return {
          key: 'SEP'
        };
      }
      languages = event[0], number = event[1];
      if (languages === '*') {
        languages = ['EN', 'FR', 'DE'];
      } else {
        languages = (function() {
          var i, len, ref, results1;
          ref = languages.split(',');
          results1 = [];
          for (i = 0, len = ref.length; i < len; i++) {
            language = ref[i];
            results1.push(language.toUpperCase());
          }
          return results1;
        })();
      }
      return {
        key: languages,
        data: number
      };
    };
    tracks = {
      EN: say_it_in_english,
      FR: say_it_in_french,
      DE: say_it_in_german,
      SEP: draw_a_separator
    };
    probes = [['fr', 1], ['fr', 2], ['fr', 3], ['fr', 4], 'pass this one', '---', ['en,fr', 1], '---', 'drop this one', ['*', 1], '---', ['en', 2], '---', ['de', 3], ['de', 4]];
    matchers = ["un", "deux", "troix", "beaucoup", "pass this one", "—————", "one", "un", "—————", "one", "un", "eins", "—————", "two", "—————", "drei", "viele"];
    my_input = D.new_stream();
    my_input.pipe(D.$select(dispatch, tracks)).pipe(D.$collect()).pipe($((function(_this) {
      return function(results) {
        var i, idx, len, matcher, results1;
        T.eq(results.length, matchers.length);
        results1 = [];
        for (idx = i = 0, len = matchers.length; i < len; idx = ++i) {
          matcher = matchers[idx];
          results1.push(T.eq(results[idx], matcher));
        }
        return results1;
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(my_input, probe);
    }
    D.end(my_input);
    return null;
  };

  this["(v4) $select (2)"] = function(T, done) {
    var bridgehead, dispatch_draw_line_events, dispatch_drop_and_pass_events, dispatch_language_events, draw_a_separator, draw_line_track, drop, i, language_track, len, matchers, my_input, probe, probes, say_it_in_english, say_it_in_french, say_it_in_german;
    say_it_in_english = $(function(n, send, end) {
      if (n != null) {
        switch (n) {
          case 1:
            send('one');
            break;
          case 2:
            send('two');
            break;
          case 3:
            send('three');
            break;
          default:
            send('many');
        }
      }
      if (end != null) {
        send("guess we're done here");
        end();
      }
      return null;
    });
    say_it_in_french = $(function(n, send) {
      switch (n) {
        case 1:
          send('un');
          break;
        case 2:
          send('deux');
          break;
        case 3:
          send('troix');
          break;
        default:
          send('beaucoup');
      }
      return null;
    });
    say_it_in_german = $(function(n, send) {
      switch (n) {
        case 1:
          send('eins');
          break;
        case 2:
          send('zwei');
          break;
        case 3:
          send('drei');
          break;
        default:
          send('viele');
      }
      return null;
    });
    draw_a_separator = $(function(ignore, send) {
      send('—————');
      return null;
    });
    bridgehead = D.$pass();
    drop = D.$drop();
    dispatch_drop_and_pass_events = function(event) {
      if (event === 'drop this one') {
        return {
          key: drop
        };
      }
      if (event === 'dont process this one') {
        return {
          key: bridgehead
        };
      }
      return {
        key: Symbol["for"]('pass')
      };
    };
    dispatch_draw_line_events = function(event) {
      if (event !== '---') {
        return {
          key: Symbol["for"]('pass')
        };
      }
      return {
        key: 'SEP'
      };
    };
    dispatch_language_events = function(event) {
      var language, languages, number;
      if (!CND.isa_list(event)) {
        return {
          key: bridgehead
        };
      }
      languages = event[0], number = event[1];
      if (languages === '*') {
        return {
          key: ['EN', 'FR', 'DE'],
          data: number
        };
      }
      languages = (function() {
        var i, len, ref, results1;
        ref = languages.split(',');
        results1 = [];
        for (i = 0, len = ref.length; i < len; i++) {
          language = ref[i];
          results1.push(language.toUpperCase());
        }
        return results1;
      })();
      return {
        key: languages,
        data: number
      };
    };
    draw_line_track = {
      SEP: draw_a_separator
    };
    language_track = {
      EN: say_it_in_english,
      FR: say_it_in_french,
      DE: say_it_in_german
    };
    probes = [['fr', 1], ['fr', 2], ['fr', 3], ['fr', 4], 'dont process this one', '---', ['en,fr', 1], '---', 'drop this one', ['*', 1], '---', ['en', 2], '---', ['de', 3], ['de', 4]];
    matchers = ["un", "deux", "troix", "beaucoup", "dont process this one", "—————", "one", "un", "—————", "one", "un", "eins", "—————", "two", "—————", "drei", "viele", "guess we're done here"];
    my_input = D.new_stream();
    my_input.pipe(D.$select(dispatch_drop_and_pass_events)).pipe(D.$select(dispatch_draw_line_events, draw_line_track)).pipe(D.$select(dispatch_language_events, language_track)).pipe(bridgehead).pipe(D.$collect()).pipe($((function(_this) {
      return function(results) {
        var i, idx, len, matcher, results1;
        T.eq(results.length, matchers.length);
        results1 = [];
        for (idx = i = 0, len = matchers.length; i < len; idx = ++i) {
          matcher = matchers[idx];
          results1.push(T.eq(results[idx], matcher));
        }
        return results1;
      };
    })(this))).pipe($('finish', done));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(my_input, probe);
    }
    D.end(my_input);
    return null;
  };

  this["(v4) 'loose' transform accepts sent data (???)"] = function(T, done) {

    /* this works: */
    var d, input;
    d = $(function(data) {
      return urge(data);
    });
    input = D.new_stream();
    input.pipe(d);
    D.send(input, 'foobar');

    /* but this doesn't: */
    d = $(function(data) {
      return urge(data);
    });
    D.send(d, 'foobar');

    /* Y U NO ACCEPT DATA??? */
    warn("test '(v4) 'loose' transform accepts sent data (???)' not implemented");
    return setImmediate((function(_this) {
      return function() {
        return done();
      };
    })(this));
  };

  this["(v4) duplex stream creation"] = function(T, done) {

    /* Alternative call signatures (not sure yet, first one OK): */

    /*
    D.new_stream duplex: [ receiver, sender, ]
    D.new_stream { receiver, sender, }
    D.new_stream receiver, sender
     */
    warn("test '(v4) duplex stream creation' not implemented");
    return done();
  };

  this["(v4) file reading gauge"] = function(T, done) {
    var collector, input, matchers, path, step;
    step = require('coffeenode-suspend').step;
    path = resolve_path(__dirname, '../test-data/Unihan_RadicalStrokeCounts.txt');
    collector = [];
    matchers = [];
    input = D.new_stream('read', 'progress', {
      path: path
    });
    input.pipe(D.$split()).pipe((function(_this) {
      return function() {
        var count;
        count = 0;
        return $(function(data) {
          count += +1;
          if (count % 1e4 === 0) {
            return urge(CND.format_number(count));
          }
        });
      };
    })(this)()).pipe($('finish', done));
    return null;
  };

  this["(v4) tap"] = function(T, done) {
    var path, step;
    step = require('coffeenode-suspend').step;
    path = resolve_path(__dirname, '../test-data/files.tsv');
    return step((function(_this) {
      return function*(resume) {
        var result;
        result = (yield D.tap(D.new_stream('lines', {
          path: path
        }), 1 / 5, {
          seed: 123
        }, resume));
        T.eq(result, ['Tue Apr 19 2016 00:00:00 GMT+0200 (CEST)\t1069547520\tubuntu-14.04.4-desktop-amd64.iso', 'Wed May 04 2016 00:00:00 GMT+0200 (CEST)\t1537474560\tmanjaro-xfce-15.12-x86_64.iso', 'Sat Oct 17 2015 00:00:00 GMT+0200 (CEST)\t19351620\tLegge1899.pdf']);
        return done();
      };
    })(this));
  };

  this["(v4) $tap, $as_json_line"] = function(T, done) {
    var $cast_1, $cast_2, bystream, check_count, input, path;
    path = resolve_path(__dirname, '../test-data/files.tsv');
    input = D.new_stream({
      path: path
    });
    check_count = 0;
    bystream = D.new_stream({
      pipeline: [
        D.$as_json_line(), $((function(_this) {
          return function(data) {
            return urge(rpr(data));
          };
        })(this)), D.$collect(), $(function(collection) {
          debug('bystream', collection);
          T.eq(collection, ['{"date":"2016-06-15T22:00:00.000Z","size":452146120,"title":"Go for Pythonistas.mp4"}\n', '{"date":"2016-06-15T22:00:00.000Z","size":70266384,"title":"Celsius Didn\'t Invent Celsius.mp4"}\n', '{"date":"2016-05-03T22:00:00.000Z","size":1537474560,"title":"manjaro-xfce-15.12-x86_64.iso"}\n']);
          return check_count += +1;
        })
      ]
    });
    $cast_1 = (function(_this) {
      return function() {
        return $(function(record) {
          record['date'] = new Date(record['date']);
          record['size'] = parseInt(record['size'], 10);
          return null;
        });
      };
    })(this);
    $cast_2 = (function(_this) {
      return function() {
        return $(function(record, send) {
          delete record['date'];
          send(JSON.stringify(record));
          return null;
        });
      };
    })(this);
    input.pipe(D.$split_tsv({
      names: ['date', 'size', 'title']
    })).pipe(D.$sample(1 / 10, {
      seed: 998791
    })).pipe($cast_1()).pipe(D.$tap(bystream, {
      copy: true
    })).pipe($cast_2()).pipe($((function(_this) {
      return function(data) {
        return help(rpr(data));
      };
    })(this))).pipe(D.$collect()).pipe($((function(_this) {
      return function(collection) {
        debug('mainstream', collection);
        T.eq(collection, ['{"size":452146120,"title":"Go for Pythonistas.mp4"}', '{"size":70266384,"title":"Celsius Didn\'t Invent Celsius.mp4"}', '{"size":1537474560,"title":"manjaro-xfce-15.12-x86_64.iso"}']);
        return check_count += +1;
      };
    })(this))).pipe($('finish', (function(_this) {
      return function() {
        if (check_count !== 2) {
          T.fail("missed some tests");
        }
        return done();
      };
    })(this)));
    return null;
  };

  this["(v4) asnychronous error propagation with new_stream from path"] = function(T, done) {
    var step;
    step = (require('coffeenode-suspend')).step;
    step((function(_this) {
      return function(resume) {
        var input, path;
        debug('40300', path = 'no-such-file');
        input = D.new_stream({
          path: path
        });
        input.pipe(D.$show());
        input.on('error', function(error) {
          return warn(error);
        });
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $tmp(?), $shell, $grep: tempfile creation, deletion"] = function(T, done) {
    T.fail("not yet implemented");
    return done();
  };

  this["(v4) $tmp(?), $shell, $grep: $shell writes to, reads from tempfile"] = function(T, done) {
    T.fail("not yet implemented");
    return done();
  };

  this["(v4) $tmp(?), $shell, $grep: $grep filters lines"] = function(T, done) {
    T.fail("not yet implemented");
    return done();
  };

  if (module.parent == null) {

    /* ----------------===#O#===-------------------- */

    /* Tests Known Not to Work for Unknown Reasons: */
    "(v4) stream / transform construction with through2 (2)";
    "(v4) fail to read when thru stream comes before read stream";
    "(v4) _new_stream_from_pipeline (4c)";
    "(v4) $async with method arity 3 (2)";

    /* ----------------===#O#===-------------------- */

    /* Tests Known to be Problematic: */

    /* ----------------===#O#===-------------------- */
    "(v4) _new_stream_from_url";

    /* ----------------===#O#===-------------------- */
    include = ["(v4) $tmp(?), $shell, $grep: tempfile creation, deletion", "(v4) $tmp(?), $shell, $grep: $shell writes to, reads from tempfile", "(v4) $tmp(?), $shell, $grep: $grep filters lines"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
