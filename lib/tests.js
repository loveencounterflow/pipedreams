// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, CND, D, alert, badge, debug, echo, get_index, help, include, info, isa_stream, log, rpr, test, urge, warn, whisper,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  this["(v4) new_stream_from_pipeline (1a)"] = function(T, done) {
    var MSP, combine, create_frob_tee;
    MSP = require('mississippi');
    combine = require('stream-combiner2');
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var R, add, multiply, sink, source, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            whisper('multiply', data);
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            whisper('add', data);
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            whisper('square', data);
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = MSP.through.obj();
        R = source = MSP.through.obj();
        source = R;
        sink = R;
        R = R.pipe(multiply);
        R = R.pipe(add);
        R = R.pipe(unsquared);
        R = R.pipe(square);
        R['source'] = source;
        R['sink'] = R;
        return R;
      };
    })();
    (function() {
      var frob, output_matchers, output_results, probes, sink, source, write_data_using_push, write_data_using_write;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      source = frob.source, sink = frob.sink;
      sink.pipe($((function(_this) {
        return function(data) {
          return help('show #1', data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          send(data);
          return help('show #2', data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            warn("pausing for a second");
            return setTimeout(end, 1000);
          }
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            help("output_results", output_results);
            T.eq(output_results, output_matchers);
            end();
            return done();
          }
        };
      })(this)));
      write_data_using_write = function() {
        var i, len, n;
        for (i = 0, len = probes.length; i < len; i++) {
          n = probes[i];
          urge('write', n);
          source.write(n);
        }
        return source.end();
      };
      write_data_using_push = function() {
        var i, len, n;
        for (i = 0, len = probes.length; i < len; i++) {
          n = probes[i];
          urge('push', n);
          source.push(n);
        }
        return source.push(null);
      };
      write_data_using_push();
      return null;
    })();
    return null;
  };

  this["(v4) new_stream_from_pipeline (3)"] = function(T, done) {
    var MSP, create_frob_tee;
    MSP = require('mississippi');
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.new_stream();
        return D.new_stream({
          pipeline: [multiply, add, unsquared, square]
        });
      };
    })();
    (function() {
      var frob, i, len, matchers, n, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      frob.pipe(D.$show()).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        frob.write(n);
      }
      return frob.end();
    })();
    return null;
  };

  this["(v4) new_stream_from_pipeline (4)"] = function(T, done) {
    var confluence, i, len, matchers, n, pipeline, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    pipeline = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.new_stream({
      pipeline: pipeline
    });
    confluence.pipe(D.$show()).pipe($((function(_this) {
      return function(data, send, end) {
        if (data != null) {
          send(data);
          results.push(data);
        }
        if (end != null) {
          T.eq(results, matchers);
          end();
          return done();
        }
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      confluence.write(n);
    }
    confluence.end();
    return null;
  };

  this["(v4) new_stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return null;
  };

  this["(v4) new_stream_from_text doesn't work synchronously"] = function(T, done) {
    var collector, input;
    collector = [];
    input = D.new_stream();
    input.pipe(D.$split()).pipe($((function(_this) {
      return function(line, send) {
        send(line);
        return collector.push(line);
      };
    })(this)));
    input.write("first line\nsecond line");
    input.end();
    T.eq(collector, ["first line"]);
    return done();
  };

  this["(v4) new_stream_from_text (2)"] = function(T, done) {
    var collector, input;
    collector = [];
    input = D.new_stream();
    input.pipe(D.$split()).pipe($((function(_this) {
      return function(line, send) {
        send(line);
        return collector.push(line);
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function() {
        T.eq(collector, ["first line", "second line"]);
        return done();
      };
    })(this)));
    input.write("first line\nsecond line");
    return input.end();
  };

  this["(v4) observer transform called with data `null` on stream end"] = function(T, done) {
    var collector, input, received_null;
    received_null = false;
    collector = [];
    input = D.new_stream();
    input.pipe($((function(_this) {
      return function(data) {
        if (data != null) {
          return collector.push(data);
        } else {
          if (data === null) {
            if (received_null) {
              T.fail("received null, shouldn't happen");
            }
            return received_null = true;
          } else {
            return T.fail("received " + (rpr(data)) + ", shouldn't happen");
          }
        }
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function() {
        if (!received_null) {
          T.fail("expected to receive null in observer transform");
        }
        T.eq(collector, ["helo", "world"]);
        return done();
      };
    })(this)));
    input.write("helo");
    input.write("world");
    return input.end();
  };

  this["(v4) README demo (1)"] = function(T, done) {
    var $as_text_line, $comment, $summarize, $verify, i, input, len, n, ref;
    $comment = function() {
      var count;
      count = 0;
      return $((function(_this) {
        return function(data) {
          if (data != null) {
            count += +1;
            return info("received event:", data);
          } else {
            return warn("stream has ended; read " + count + " events");
          }
        };
      })(this));
    };
    $as_text_line = function() {
      return $((function(_this) {
        return function(data, send) {
          return send("line: " + (JSON.stringify(data)) + '\n');
        };
      })(this));
    };
    $summarize = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            collector.sort();
            help(title, collector.join(', '));
            return end();
          }
        };
      })(this));
    };
    $verify = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            T.eq(collector, ['"line: 4\\n"', '"line: 7\\n"', '"line: 9\\n"', '"line: 3\\n"', '"line: 5\\n"', '"line: 6\\n"']);
            return end();
          }
        };
      })(this));
    };
    input = D.new_stream();
    input.pipe($comment()).pipe($((function(_this) {
      return function(data) {
        return log(CND.truth(data != null));
      };
    })(this))).pipe($summarize("position #1:")).pipe($as_text_line()).pipe(D.$bridge(process.stdout)).pipe($verify()).pipe($summarize("position #2:")).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [4, 7, 9, 3, 5, 6];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      input.write(n);
    }
    input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) stream / transform construction with through2 (1)"] = function(T, T_done) {
    var FS, MSP, PATH, delay, input, t2_settings, transform_flush, transform_main;
    FS = require('fs');
    PATH = require('path');
    MSP = require('mississippi');
    t2_settings = {};
    input = FS.createReadStream(PATH.resolve(__dirname, '../package.json'));
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(100, 500);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);

    /* The main transform method accepts a line, takes it out of the stream unless it matches
    either `"name"` or `"version"`, trims it, and emits two events (formatted as lists) per remaining
    line. This method must be free (a.k.a. bound, using a slim arrow) so we can use `@push`.
     */
    transform_main = function(line, encoding, handler) {
      if (encoding !== 'utf8') {
        throw new Error("unknown encoding " + (rpr(encoding)));
      }
      if (!/"(name|version)"/.test(line)) {
        return handler();
      }
      line = line.trim();
      return delay(line, (function(_this) {
        return function() {
          _this.push(['first-chr', (Array.from(line))[0]]);
          return handler(null, ['text', line]);
        };
      })(this));
    };

    /* The 'flush' transform is called once, right before the stream has ended; the callback must be called
    exactly once, and it's possible to put additional 'last-minute' data into the stream by calling `@push`.
    Because we have to access `this`/`@`, the method must again be free and not bound, but of course we
    can set up an alias for `@push`:
     */
    transform_flush = function(done) {
      var push;
      push = this.push.bind(this);
      return delay('flush', (function(_this) {
        return function() {
          push(['message', "ok"]);
          push(['message', "we're done"]);
          return done();
        };
      })(this));
    };
    input.pipe(D.$split()).pipe(MSP.through.obj(t2_settings, transform_main, transform_flush)).pipe(D.$show()).pipe(D.$on_end((function(_this) {
      return function() {
        return T_done();
      };
    })(this)));
    return null;
  };

  this["(v4) stream / transform construction with through2 (2)"] = function(T, T_done) {
    var $collect, $finalize, $retrieve_data_from_db, MSP, S, db, delay, glyph, i, len, read_phrases, ref, t2_settings;
    MSP = require('mississippi');
    t2_settings = {};
    S = {};
    S.input = MSP.through.obj();
    db = CND.shuffle([['千', 'variant', '仟'], ['千', 'variant', '韆'], ['千', 'similarity', '于'], ['千', 'similarity', '干'], ['千', 'usagecode', 'CJKTHM'], ['千', 'strokeorder', '312'], ['千', 'reading', 'qian'], ['千', 'reading', 'foo'], ['千', 'reading', 'bar'], ['仟', 'strokeorder', '32312'], ['仟', 'usagecode', 'CJKTHm'], ['仟', 'reading', 'qian'], ['韆', 'strokeorder', '122125112125221134515454'], ['韆', 'usagecode', 'KTHm'], ['韆', 'reading', 'qian']]);
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(1, 100);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);
    read_phrases = (function(_this) {
      return function(glyph, handler) {
        return delay(glyph, function() {
          var i, len, obj, phrase, prd, sbj;
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            sbj = phrase[0], prd = phrase[1], obj = phrase[2];
            if (sbj !== glyph) {
              continue;
            }
            handler(null, phrase);
          }
          return handler(null, null);
        });
      };
    })(this);
    $retrieve_data_from_db = (function(_this) {
      return function(S) {
        var flush, main;
        main = function(glyph, encoding, callback) {
          var is_finished, push;
          push = this.push.bind(this);
          push([glyph, 'start']);
          is_finished = false;
          read_phrases(glyph, (function(_this) {
            return function(error, phrase) {
              if (error != null) {
                return callback(error);
              }
              if (phrase != null) {
                return push(phrase);
              }
              push([glyph, 'stop']);
              if (!is_finished) {
                callback();
              }
              return is_finished = true;
            };
          })(this));
          return null;
        };
        flush = function(callback) {
          var push;
          push = this.push.bind(this);
          push(['message', "ok"]);
          push(['message', "we're done"]);
          return callback();
        };
        return MSP.through.obj(t2_settings, main);
      };
    })(this);
    $collect = (function(_this) {
      return function(S) {
        var collector, flush, main, matchers, phrase;
        matchers = new Set((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            results1.push(JSON.stringify(phrase));
          }
          return results1;
        })());
        collector = [];
        main = function(phrase, _, callback) {
          var obj, prd, probe, sbj;
          probe = JSON.stringify(phrase);
          sbj = phrase[0], prd = phrase[1], obj = phrase[2];
          if (!((prd === 'start' || prd === 'stop') || (sbj === 'message'))) {
            T.ok(matchers.has(probe));
            matchers["delete"](probe);
          }
          return callback(null, phrase);
        };
        flush = function(callback) {
          T.eq(matchers.size, 0);
          return callback();
        };
        return MSP.through.obj(t2_settings, main, flush);
      };
    })(this);
    $finalize = (function(_this) {
      return function(S) {
        var flush, main;
        main = null;
        flush = function(callback) {
          help("that’s all");
          T_done();
          return callback();
        };
        return MSP.through.obj(t2_settings, main, flush);
      };
    })(this);
    S.input.pipe($retrieve_data_from_db(S)).pipe($collect(S)).pipe(D.$show()).pipe($finalize(S));

    /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

    /* TAINT this test causes a timeout for unknown reasons; postponing */
    T.fail("test fails with timeout for unknown reasons");
    return T_done();

    /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
    ref = Array.from('千仟韆');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      S.input.write(glyph);
    }
    S.input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D.new_stream_from_pipeline"] = function(T, done) {
    var pipeline, stream;
    pipeline = [
      (function(_this) {
        return function() {
          var collector;
          collector = [];
          return $(function(data, send, end) {
            if (data != null) {
              collector.push(data);
            }
            if (end != null) {
              T.eq(collector, ['foo', 'bar', 'baz']);
              end();
              return done();
            }
          });
        };
      })(this)()
    ];
    T.ok(isa_stream(stream = D.new_stream_from_pipeline(pipeline)));
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) $async (1)"] = function(T, done) {
    var $calculate, delay, input;
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(100, 500);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);
    $calculate = (function(_this) {
      return function() {
        return $async(function(n, send) {
          send(n + 4);
          send(n - 1);
          debug('3321');
          return send.done();
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe($calculate()).pipe(D.$show()).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    D.send(input, 5);
    D.send(input, 8);
    D.send(input, 13);
    D.done(input);
    return null;
  };

  this["(v4) $async with stream end detection"] = function(T, done) {
    throw new Error("not implemented");
  };

  this["(v4) $async with arbitrary number of results"] = function(T, done) {
    throw new Error("not implemented");
  };

  get_index = function(element, key) {
    if (CND.isa_function(key)) {
      return key(element);
    } else {
      return element[key];
    }
  };

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 3000
    });
  };

  if (module.parent == null) {
    include = ["(v4) $async (1)"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
