// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, $validate_probes, CND, D, TMP, _temp_thing, alert, badge, debug, delay, echo, help, include, info, isa_stream, log, resolve_path, resolve_temp_path, rpr, sleep, temp_home, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  require('./plugin-tsv');

  require('./plugin-tabulate');


  /* TAINT for the time being, we create one global folder and keep it beyond process termination; this
  allows to inspect folder contents after tests have terminated. It would probably be a good idea to remove
  the `keep: yes` setting at a later point in time.
   */

  TMP = require('tmp');

  TMP.setGracefulCleanup();

  _temp_thing = TMP.dirSync({
    keep: true,
    unsafeCleanup: false,
    prefix: 'pipedreams-'
  });

  temp_home = _temp_thing['name'];

  resolve_path = (require('path')).resolve;

  resolve_temp_path = function() {
    var P, p;
    P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return resolve_path.apply(null, [temp_home].concat(slice.call((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = P.length; i < len; i++) {
        p = P[i];
        results.push(p.replace(/^[.\/]/g, ''));
      }
      return results;
    })())));
  };

  delay = (function(_this) {
    return function(name, f) {
      var dt;
      if (arguments.length === 1) {
        f = name;
        name = null;
      }
      dt = CND.random_integer(10, 20);
      if (name != null) {
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
      }
      return setTimeout(f, dt);
    };
  })(this);

  $validate_probes = (function(_this) {
    return function(T, matchers) {
      var idx;
      idx = -1;
      return $('null', function(data) {
        if (data != null) {
          idx += +1;
          T.eq(data, matchers[idx]);
        } else {
          T.eq(idx + 1, matchers.length);
        }
        return null;
      });
    };
  })(this);

  sleep = (function(_this) {
    return function(dt, handler) {
      return setTimeout(handler, dt);
    };
  })(this);

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    info("temporary files, if any, written to " + temp_home);
    return test(this, {
      'timeout': 3000
    });
  };

  this["(v4) $select (study)"] = function(T, done) {
    var even_multiplier_and_adder, i, j, k, len, len1, make_it_so, n, odd_divider, output, sub_input, sub_inputs;
    even_multiplier_and_adder = D.new_stream({
      pipeline: [
        $(function(data, send) {
          return send(2 * data);
        }), $(function(data, send) {
          return send(data + 2);
        })
      ]
    });
    odd_divider = D.new_stream({
      pipeline: [
        $(function(data, send) {
          return send(data / 2);
        })
      ]
    });
    output = D.new_stream();
    output.pipe(D.$show()).pipe($('finish', done));
    make_it_so = function(stream) {
      var input;
      input = D.new_stream();
      input.pipe((function() {
        var _end, _send, foo;
        _send = null;
        _end = null;
        foo = D.new_stream();
        foo.pipe(stream).pipe($(function(data, send, end) {
          if (data != null) {
            _send(data);
          }
          if (end != null) {
            _end();
            return end();
          }
        }));
        return $(function(data, send, end) {
          _send = send;
          if (data != null) {
            D.send(foo, data);
          }
          if (end != null) {
            _end = end;
            return D.end(foo);
          }
        });
      })()).pipe(output);
      return input;
    };
    sub_inputs = [];
    sub_inputs.push(make_it_so(even_multiplier_and_adder));
    sub_inputs.push(make_it_so(odd_divider));
    for (n = i = 0; i <= 5; n = ++i) {
      for (j = 0, len = sub_inputs.length; j < len; j++) {
        sub_input = sub_inputs[j];
        D.send(sub_input, n);
      }
    }
    for (k = 0, len1 = sub_inputs.length; k < len1; k++) {
      sub_input = sub_inputs[k];
      D.end(sub_input);
    }
    return null;
  };

  this["(v4) $select (demo)"] = function(T, done) {
    var draw_a_separator, event, events, f, i, len, my_input, say_it_in_english, say_it_in_french, say_it_in_german, selector, tracks;
    f = function() {
      return this.$select = function(selector, tracks) {
        var input, my_streams, output;
        input = D.new_stream();
        output = D.new_stream();
        my_streams = {};
        (Object.keys(tracks)).forEach((function(_this) {
          return function(key) {
            var stream, sub_input;
            stream = tracks[key];
            my_streams[key] = sub_input = D.new_stream();
            return sub_input.pipe(stream).pipe(output);
          };
        })(this));
        input.pipe($((function(_this) {
          return function(data, send, end) {
            var arity, i, key, keys, len, selection, target_stream, value;
            if (data != null) {
              selection = selector(data);
              key = null;
              value = null;
              if (CND.isa_list(selection)) {
                if ((arity = selection.length) !== 2) {
                  throw new Error("expected list with 2 elements, got one with " + arity);
                }
                key = selection[0], value = selection[1];
              } else {
                key = selection;
              }
              if (key != null) {
                if (value == null) {
                  value = Symbol["for"]('null');
                }
                keys = CND.isa_list(key) ? key : [key];
                for (i = 0, len = keys.length; i < len; i++) {
                  key = keys[i];
                  target_stream = my_streams[key];
                  if (target_stream == null) {
                    throw new Error("not a valid key: " + (rpr(key)));
                  }
                  _this.send(target_stream, value);
                }
              }
            }
            if (end != null) {
              (Object.keys(tracks)).forEach(function(key) {
                return _this.end(my_streams[key]);
              });
              return end();
            }
          };
        })(this)));
        return this.duplex(input, output);
      };
    };
    f.apply(D);
    say_it_in_english = $(function(n, send, end) {
      if (n != null) {
        switch (n) {
          case 1:
            send('one');
            break;
          case 2:
            send('two');
            break;
          case 3:
            send('three');
            break;
          default:
            send('many');
        }
      }
      if (end != null) {
        send("guess we're done here");
        end();
      }
      return null;
    });
    say_it_in_french = $(function(n, send) {
      switch (n) {
        case 1:
          send('un');
          break;
        case 2:
          send('deux');
          break;
        case 3:
          send('troix');
          break;
        default:
          send('beaucoup');
      }
      return null;
    });
    say_it_in_german = $(function(n, send) {
      switch (n) {
        case 1:
          send('eins');
          break;
        case 2:
          send('zwei');
          break;
        case 3:
          send('drei');
          break;
        default:
          send('viele');
      }
      return null;
    });
    draw_a_separator = $(function(ignore, send) {
      send('—————');
      return null;
    });
    selector = function(event) {
      var language, languages, number;
      if (event === '---') {
        return 'SEP';
      }
      languages = event[0], number = event[1];
      if (languages === '*') {
        languages = ['EN', 'FR', 'DE'];
      } else {
        languages = (function() {
          var i, len, ref, results;
          ref = languages.split(',');
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            language = ref[i];
            results.push(language.toUpperCase());
          }
          return results;
        })();
      }
      return [languages, number];
    };
    tracks = {
      EN: say_it_in_english,
      FR: say_it_in_french,
      DE: say_it_in_german,
      SEP: draw_a_separator
    };
    events = [['fr', 1], ['fr', 2], ['fr', 3], ['fr', 4], '---', ['en,fr', 1], '---', ['*', 1], '---', ['en', 2], '---', ['de', 3], ['de', 4]];
    my_input = D.new_stream();
    my_input.pipe(D.$select(selector, tracks)).pipe(D.$show()).pipe($('finish', (function(_this) {
      return function() {
        return done();
      };
    })(this)));
    for (i = 0, len = events.length; i < len; i++) {
      event = events[i];
      D.send(my_input, event);
    }
    D.end(my_input);
    return null;
  };

  this["(v4) 'loose' transform accepts sent data (???)"] = function(T, done) {

    /* this works: */
    var d, input;
    d = $(function(data) {
      return urge(data);
    });
    input = D.new_stream();
    input.pipe(d);
    D.send(input, 'foobar');

    /* but this doesn't: */
    d = $(function(data) {
      return urge(data);
    });
    D.send(d, 'foobar');

    /* Y U NO ACCEPT DATA??? */
    return setImmediate((function(_this) {
      return function() {
        return done();
      };
    })(this));
  };

  this["(v4) $benchmark (1)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(D.$benchmark.summarize()).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $benchmark (2)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark.summarize()).pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  if (module.parent == null) {

    /* ----------------===#O#===-------------------- */

    /* Tests Known Not to Work for Unknown Reasons: */
    "(v4) stream / transform construction with through2 (2)";
    "(v4) fail to read when thru stream comes before read stream";
    "(v4) _new_stream_from_pipeline (4c)";
    "(v4) $async with method arity 3 (2)";

    /* ----------------===#O#===-------------------- */
    include = ["(v4) $select (demo)", "(v4) 'loose' transform accepts sent data (???)"];
    this._prune();
    this._main();
  }

}).call(this);
