// Generated by CoffeeScript 1.8.0
(function() {
  var BNP, LODASH, TRM, alert, badge, collect_and_check, debug, echo, help, info, log, new_densort, rpr, settings, test, urge, warn, whisper;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'PIPEDREAMS2/tests';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  BNP = require('coffeenode-bitsnpieces');

  LODASH = require('lodash');

  test = require('guy-test');

  new_densort = require('./densort');

  collect_and_check = function(T, key, first_idx, input, max_buffer_size) {
    var collection, ds, element_count, input_element, output, target, _i, _len, _ref, _results;
    if (max_buffer_size == null) {
      max_buffer_size = null;
    }
    output = [];
    target = LODASH.sortBy(LODASH.cloneDeep(input), key);
    element_count = input.length;
    ds = new_densort(key, first_idx, function(stats) {
      if (max_buffer_size != null) {
        return T.eq(stats, [element_count, max_buffer_size]);
      }
    });
    _ref = [input, [null]];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      collection = _ref[_i];
      _results.push((function() {
        var _j, _len1, _results1;
        _results1 = [];
        for (_j = 0, _len1 = collection.length; _j < _len1; _j++) {
          input_element = collection[_j];
          _results1.push(ds(input_element, function(_, output_element) {
            if (output_element != null) {
              return output.push(output_element);
            } else {
              T.eq(output, target);
              return output;
            }
          }));
        }
        return _results1;
      })());
    }
    return _results;
  };

  this["densort 0"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 0;
    input = [];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 1"] = function(T, done) {
    var first_idx, input, key, max_buffer_size, output;
    key = 0;
    first_idx = 0;
    max_buffer_size = 0;
    input = [[0, 'A'], [1, 'B'], [2, 'C']];
    output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    return done();
  };

  this["densort 2"] = function(T, done) {
    var first_idx, input, inputs, key, max_buffer_size, output, _i, _len, _ref;
    key = 0;
    first_idx = 0;
    inputs = [[[[0, 'A'], [1, 'B'], [2, 'C']], 0], [[[0, 'A'], [2, 'C'], [1, 'B']], 2], [[[1, 'B'], [0, 'A'], [2, 'C']], 2], [[[1, 'B'], [2, 'C'], [0, 'A']], 3], [[[2, 'C'], [0, 'A'], [1, 'B']], 2], [[[2, 'C'], [1, 'B'], [0, 'A']], 3]];
    for (_i = 0, _len = inputs.length; _i < _len; _i++) {
      _ref = inputs[_i], input = _ref[0], max_buffer_size = _ref[1];
      output = collect_and_check(T, key, first_idx, input, max_buffer_size);
    }
    return done();
  };

  this["densort 3"] = function(T, done) {
    var chr, count, error, first_idx, idx, input, input_txt, key, message, messages;
    key = 0;
    first_idx = 0;
    input = [[0, 'a'], [1, 'b'], [2, 'c'], [3, 'd'], [4, 'e']];
    count = 0;
    messages = [];
    while (true) {
      count += +1;
      if (count % 1e5 === 0) {
        whisper(count);
      }
      input_txt = ((function() {
        var _i, _len, _ref, _results;
        _results = [];
        for (_i = 0, _len = input.length; _i < _len; _i++) {
          _ref = input[_i], idx = _ref[0], chr = _ref[1];
          _results.push("" + idx);
        }
        return _results;
      })()).join('');
      try {
        collect_and_check(T, key, first_idx, input);
      } catch (_error) {
        error = _error;
        message = "" + error['message'] + ": " + input_txt;
        messages.push(message);
        warn(input_txt);
        T.fail(message);
      }
      if (!BNP.ez_permute(input)) {
        break;
      }
    }
    return done();
  };

  this["densort 4"] = function(T, done) {
    var chr, error, first_idx, input, input_txt, inputs, key, message, output, _i, _len;
    key = 0;
    first_idx = 0;
    inputs = ['012345', '102354', '01243'];
    for (_i = 0, _len = inputs.length; _i < _len; _i++) {
      input = inputs[_i];
      input_txt = input;
      input = (function() {
        var _j, _len1, _results;
        _results = [];
        for (_j = 0, _len1 = input.length; _j < _len1; _j++) {
          chr = input[_j];
          _results.push([parseInt(chr, 10)]);
        }
        return _results;
      })();
      try {
        output = collect_and_check(T, key, first_idx, input);
      } catch (_error) {
        error = _error;
        message = "" + error['message'] + ": " + input_txt;
        warn(input_txt);
        T.fail(message);
      }
    }
    return done();
  };

  settings = {
    'timeout': 2500
  };

  test(this, settings);

}).call(this);
