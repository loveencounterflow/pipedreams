// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, CND, D, alert, badge, debug, echo, get_index, help, include, info, isa_stream, log, rpr, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  this["(v4) new_stream_from_pipeline (1)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = function(settings) {
      var add, multiply, square, unsquared;
      multiply = $((function(_this) {
        return function(data, send) {
          return send(data * 2);
        };
      })(this));
      add = $((function(_this) {
        return function(data, send) {
          return send(data + 2);
        };
      })(this));
      square = $((function(_this) {
        return function(data, send) {
          return send(Math.pow(data, 2));
        };
      })(this));
      unsquared = D.create_throughstream();
      return D.new_stream_from_pipeline([multiply, add, unsquared, square]);
    };
    return (function() {
      var frob, i, input, len, n, output, output_matchers, output_results, probes;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      input = frob.input, output = frob.output;
      output.pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline (2)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var R, add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        R = D.new_stream_from_pipeline([multiply, add, unsquared, square]);
        R['inputs'] = {
          add: add
        };
        R['outputs'] = {
          unsquared: unsquared
        };
        return R;
      };
    })();
    return (function() {
      var frob, i, input, inputs, len, n, output, output_matchers, output_results, outputs, probes, unsquared_matchers, unsquared_results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      unsquared_matchers = [4, 6, 8, -8, 10, 12, 14, 16, 18, 20];
      unsquared_results = [];
      frob = create_frob_tee();
      input = frob.input, output = frob.output, inputs = frob.inputs, outputs = frob.outputs;
      outputs['unsquared'].pipe($((function(_this) {
        return function(data, send) {
          return unsquared_results.push(data);
        };
      })(this)));
      output.pipe($((function(_this) {
        return function(data, send) {
          if (data === 100) {
            inputs['add'].write(-10);
          }
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this)));
      output.on('end', (function(_this) {
        return function() {
          T.eq(unsquared_results, unsquared_matchers);
          T.eq(output_results, output_matchers);
          return done();
        };
      })(this));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline (3)"] = function(T, done) {
    var create_frob_tee;
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.create_throughstream();
        return D.new_stream_from_pipeline([multiply, add, unsquared, square]);
      };
    })();
    return (function() {
      var frob, i, input, len, matchers, n, output, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      input = D.create_throughstream();
      output = D.create_throughstream();
      input.pipe(frob).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(output).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        input.write(n);
      }
      return input.end();
    })();
  };

  this["(v4) new_stream_from_pipeline using existing streams"] = function(T, done) {
    var confluence, i, input, len, matchers, n, probes, results, transforms;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    input = D.create_throughstream();
    transforms = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.new_stream({
      pipeline: [input].concat(slice.call(transforms))
    });
    confluence.pipe($((function(_this) {
      return function(data, send) {
        results.push(data);
        return send(data);
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      input.write(n);
    }
    input.end();
    T.eq(results, matchers);
    return done();
  };

  this["(v4) new_stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return input.resume();
  };

  this["(v4) synchronous collect"] = function(T, done) {
    var input, result, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    input = input.pipe(D.$split());
    result = D.collect(input);
    input.resume();
    T.eq(result, text.split('\n'));
    return done();
  };

  this["(v4) asynchronous collect"] = function(T, T_done) {
    var input, stream, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream_from_text(text);
    stream = input.pipe(D.$split()).pipe($async((function(_this) {
      return function(line, send, end) {
        debug('1121', CND.truth(line != null), CND.truth(send.end != null), CND.truth(end != null));
        if (line != null) {
          setTimeout((function() {
            return send(line);
          }), 200);
        }
        if (end != null) {
          urge('text completed');
          send.done("\ntext completed.");
          return end();
        }
      };
    })(this)));
    D.collect(stream, (function(_this) {
      return function(error, result) {
        T.eq(result, (text.split('\n')) + "\ntext completed.");
        debug('©4D8tA', 'T_done');
        return T_done();
      };
    })(this));
    return input.resume();
  };

  this["(v4) asynchronous DB-like"] = function(T, T_done) {
    var db, delay, glyph, i, input, len, read_facets, ref;
    db = [['千', 'variant', '仟'], ['千', 'variant', '韆'], ['千', 'similarity', '于'], ['千', 'similarity', '干'], ['千', 'usagecode', 'CJKTHM'], ['千', 'strokeorder', '312'], ['千', 'reading', 'qian'], ['千', 'reading', 'foo'], ['千', 'reading', 'bar'], ['仟', 'strokeorder', '32312'], ['仟', 'usagecode', 'CJKTHm'], ['仟', 'reading', 'qian'], ['韆', 'strokeorder', '122125112125221134515454'], ['韆', 'usagecode', 'KTHm'], ['韆', 'reading', 'qian']];
    delay = (function(_this) {
      return function(f) {
        return setTimeout(f, CND.random_integer(100, 800));
      };
    })(this);
    read_facets = (function(_this) {
      return function(glyph, handler) {
        return delay(function() {
          var i, len, obj, prd, record, ref, sbj;
          ref = CND.shuffle(db);
          for (i = 0, len = ref.length; i < len; i++) {
            record = ref[i];
            sbj = record[0], prd = record[1], obj = record[2];
            if (sbj !== glyph) {
              continue;
            }
            urge('1');
            handler(null, {
              value: record,
              done: false
            });
          }
          urge('2');
          return handler(null, {
            value: null,
            done: true
          });
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe(D.$show("before:")).pipe($async((function(_this) {
      return function(glyph, send) {
        return read_facets(glyph, function(error, event) {
          var done, value;
          if (error != null) {
            throw error;
          }
          urge('7765', event);
          value = event.value, done = event.done;
          if (value != null) {
            send(value);
          }
          debug('4431', value);
          if (done) {
            return send.done();
          }
        });
      };
    })(this))).pipe(D.$show("after: ")).pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          debug('4432', collector);
          if (end != null) {
            return delay(function() {});
          }
        });
      };
    })(this)());
    ref = Array.from('千仟韆國');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      input.write(glyph);
    }
    input.end();
    return null;
  };

  this["(v4) asynchronous (using ES.map)"] = function(T, T_done) {
    var $client_method_called_here, $collect_results, $detect_stream_end, $foo, S, db, delay, glyph, i, len, read_one_phrase, ref;
    db = [['千', 'strokeorder', '312'], ['仟', 'strokeorder', '32312'], ['韆', 'strokeorder', '122125112125221134515454']];
    delay = (function(_this) {
      return function(glyph, f) {
        var dt;
        dt = CND.random_integer(1, 1500);
        whisper("delay for " + glyph + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);
    read_one_phrase = (function(_this) {
      return function(glyph, handler) {
        return delay(glyph, function() {
          var i, len, obj, phrase, prd, sbj;
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            sbj = phrase[0], prd = phrase[1], obj = phrase[2];
            if (sbj !== glyph) {
              continue;
            }
            return handler(null, phrase);
          }
          return handler(null, null);
        });
      };
    })(this);
    $detect_stream_end = (function(_this) {
      return function(S) {
        return $(function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            warn("$detect_stream_end detected end of stream at count " + S.count);
            return S.end_stream = end;
          }
        });
      };
    })(this);
    $client_method_called_here = (function(_this) {
      return function(S) {
        return D._ES.map(function(glyph, handler) {
          debug('7762', S.input.readable);
          S.count += +1;
          return read_one_phrase(glyph, function(error, phrase) {
            if (error != null) {
              return handler(error);
            }
            info(S.count, CND.truth(S.end_stream != null));
            S.count += -1;
            urge('7765', phrase);
            if (phrase != null) {
              handler(null, phrase);
            }
            return handler();
          });
        });
      };
    })(this);
    $foo = (function(_this) {
      return function(S) {
        if ((S.end_stream != null) && S.count <= 0) {
          S.end_stream();
          return T_done();
        }
      };
    })(this);
    $collect_results = (function(_this) {
      return function(S) {
        var collector;
        collector = [];
        return $(function(data, send) {
          info('7764', '$collect_results', CND.truth(data != null));
          if (data != null) {
            collector.push(data);
            return help('7765 $collect_results data:', data);
          }
        });
      };
    })(this);
    S = {};
    S.count = 0;
    S.end_stream = null;
    S.input = D.new_stream();
    S.input.pipe($client_method_called_here(S)).pipe($collect_results(S));
    ref = Array.from('千仟韆');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      S.input.write(glyph);
    }
    S.input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) stream / transform construction with through2"] = function(T, T_done) {
    var FS, PATH, delay, input, t2_settings, through2, transform_flush, transform_main;
    FS = require('fs');
    PATH = require('path');
    through2 = require('through2');

    /*
    ```
    through2([ options, ] [ transformFunction ] [, flushFunction ])
    ```
    
    ```
    
    > To queue a new chunk, call `this.push(chunk)`—this can be called as many
    > times as required before the `callback()` if you have multiple pieces to
    > send on.
    
    > Alternatively, you may use `callback(err, chunk)` as shorthand for emitting
    > a single chunk or an error.
    
    > The optional `flushFunction` is provided as the last argument (2nd or 3rd,
    > depending on whether you've supplied `options`) is called just prior to the
    > stream ending. Can be used to finish up any processing that may be in
    > progress.
    
    ```
     */
    t2_settings = {};
    input = FS.createReadStream(PATH.resolve(__dirname, '../package.json'));
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(1, 1500);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);

    /* must not be a bound method b/c of `@push` */
    transform_main = function(line, encoding, handler) {
      if (!/"(name|version)"/.test(line)) {
        return handler();
      }
      line.trim();
      return delay(line, (function(_this) {
        return function() {
          _this.push(['first-chr', (Array.from(line))[0]]);
          return handler(null, ['text', line]);
        };
      })(this));
    };

    /* must not be a bound method b/c of `@push` */
    transform_flush = function(done) {
      var push;
      push = this.push.bind(this);
      return delay('flush', (function(_this) {
        return function() {
          push(['message', "ok"]);
          push(['message', "we're done her I guess"]);
          return done();
        };
      })(this));
    };
    return input.pipe(D.$split()).pipe(D.$observe((function(_this) {
      return function(line) {
        return whisper(rpr(line));
      };
    })(this))).pipe(through2.obj(t2_settings, transform_main, transform_flush)).pipe(D.$show()).pipe(D.$on_end((function(_this) {
      return function() {
        return T_done();
      };
    })(this)));
  };

  this["(v4) asynchronous (using ES.map, stream-combiner2)"] = function(T, T_done) {
    var $client_method_called_here, $collect_results, $detect_stream_end, $foo, S, combine2, db, delay, glyph, i, len, read_one_phrase, ref, through2;
    combine2 = require('stream-combiner2');
    through2 = require('through2');
    db = [['千', 'strokeorder', '312'], ['仟', 'strokeorder', '32312'], ['韆', 'strokeorder', '122125112125221134515454']];
    delay = (function(_this) {
      return function(glyph, f) {
        var dt;
        dt = 1;
        whisper("delay for " + glyph + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);
    read_one_phrase = (function(_this) {
      return function(glyph, handler) {
        return delay(glyph, function() {
          var i, len, obj, phrase, prd, sbj;
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            sbj = phrase[0], prd = phrase[1], obj = phrase[2];
            if (sbj !== glyph) {
              continue;
            }
            return handler(null, phrase);
          }
          return handler(null, null);
        });
      };
    })(this);
    $detect_stream_end = (function(_this) {
      return function(S) {
        return $(function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            warn("$detect_stream_end detected end of stream at count " + S.count);
            return S.end_stream = end;
          }
        });
      };
    })(this);
    $client_method_called_here = (function(_this) {
      return function(S) {
        return D._ES.map(function(glyph, handler) {
          debug('7762', S.input.readable);
          S.count += +1;
          return read_one_phrase(glyph, function(error, phrase) {
            if (error != null) {
              return handler(error);
            }
            info(S.count, CND.truth(S.end_stream != null));
            S.count += -1;
            urge('7765', phrase);
            if (phrase != null) {
              handler(null, phrase);
            }
            return handler();
          });
        });
      };
    })(this);
    $foo = (function(_this) {
      return function(S) {
        if ((S.end_stream != null) && S.count <= 0) {
          S.end_stream();
          return T_done();
        }
      };
    })(this);
    $collect_results = (function(_this) {
      return function(S) {
        var collector;
        collector = [];
        return $(function(data, send) {
          info('7764', '$collect_results', CND.truth(data != null));
          if (data != null) {
            collector.push(data);
            return help('7765 $collect_results data:', data);
          }
        });
      };
    })(this);
    S = {};
    S.count = 0;
    S.end_stream = null;
    S.input = D.new_stream();
    S.input.pipe($client_method_called_here(S)).pipe($collect_results(S));
    ref = Array.from('千仟韆');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      S.input.write(glyph);
    }
    S.input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D.new_stream_from_pipeline"] = function(T, done) {
    var pipeline, stream;
    pipeline = [
      (function(_this) {
        return function() {
          var collector;
          collector = [];
          return $(function(data, send, end) {
            if (data != null) {
              collector.push(data);
            }
            if (end != null) {
              T.eq(collector, ['foo', 'bar', 'baz']);
              end();
              return done();
            }
          });
        };
      })(this)()
    ];
    T.ok(isa_stream(stream = D.new_stream_from_pipeline(pipeline)));
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) $async with stream end detection"] = function(T, done) {
    throw new Error("not implemented");
  };

  this["(v4) $async with arbitrary number of results"] = function(T, done) {
    throw new Error("not implemented");
  };

  get_index = function(element, key) {
    if (CND.isa_function(key)) {
      return key(element);
    } else {
      return element[key];
    }
  };

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    return test(this, {
      'timeout': 30000
    });
  };

  if (module.parent == null) {
    include = ["(v4) stream / transform construction with through2"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
