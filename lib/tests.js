// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, $validate_probes, CND, D, TMP, _temp_thing, alert, badge, debug, delay, echo, help, include, info, isa_stream, log, resolve_path, resolve_temp_path, rpr, sleep, temp_home, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  require('./plugin-tsv');

  require('./plugin-tabulate');


  /* TAINT for the time being, we create one global folder and keep it beyond process termination; this
  allows to inspect folder contents after tests have terminated. It would probably be a good idea to remove
  the `keep: yes` setting at a later point in time.
   */

  TMP = require('tmp');

  TMP.setGracefulCleanup();

  _temp_thing = TMP.dirSync({
    keep: true,
    unsafeCleanup: false,
    prefix: 'pipedreams-'
  });

  temp_home = _temp_thing['name'];

  resolve_path = (require('path')).resolve;

  resolve_temp_path = function() {
    var P, p;
    P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return resolve_path.apply(null, [temp_home].concat(slice.call((function() {
      var i, len, results;
      results = [];
      for (i = 0, len = P.length; i < len; i++) {
        p = P[i];
        results.push(p.replace(/^[.\/]/g, ''));
      }
      return results;
    })())));
  };

  delay = (function(_this) {
    return function(name, f) {
      var dt;
      if (arguments.length === 1) {
        f = name;
        name = null;
      }
      dt = CND.random_integer(10, 20);
      if (name != null) {
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
      }
      return setTimeout(f, dt);
    };
  })(this);

  $validate_probes = (function(_this) {
    return function(T, matchers) {
      var idx;
      idx = -1;
      return $('null', function(data) {
        if (data != null) {
          idx += +1;
          T.eq(data, matchers[idx]);
        } else {
          T.eq(idx + 1, matchers.length);
        }
        return null;
      });
    };
  })(this);

  sleep = (function(_this) {
    return function(dt, handler) {
      return setTimeout(handler, dt);
    };
  })(this);

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    info("temporary files, if any, written to " + temp_home);
    return test(this, {
      'timeout': 3000
    });
  };

  this["(v4) $switch (study)"] = function(T, done) {
    var even_multiplier_and_adder, i, input, n, output;
    even_multiplier_and_adder = D.new_stream({
      pipeline: [
        $(function(data, send) {
          if (data % 2 === 0) {
            return send(data);
          }
        }), $(function(data, send) {
          return send(2 * data);
        }), $(function(data, send) {
          return send(data + 2);
        })
      ]
    });
    output = D.new_stream();
    output.pipe(D.$show()).pipe($('finish', done));
    input = D.new_stream();
    input.pipe((function() {
      var _end, _send, foo;
      _send = null;
      _end = null;
      foo = D.new_stream();
      foo.pipe(even_multiplier_and_adder).pipe($(function(data, send, end) {
        if (data != null) {
          _send(data);
        }
        if (end != null) {
          _end();
          return end();
        }
      }));
      return $(function(data, send, end) {
        debug('sender', data);
        _send = send;
        if (data != null) {
          D.send(foo, data);
        }
        if (end != null) {
          _end = end;
          return D.end(foo);
        }
      });
    })()).pipe(output);
    for (n = i = 0; i <= 5; n = ++i) {
      D.send(input, n);
    }
    D.end(input);
    return null;
  };

  this["(v4) $benchmark (1)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(D.$benchmark.summarize()).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $benchmark (2)"] = function(T, done) {
    var i, input, n, output;
    input = D.new_stream();
    output = D.new_stream('devnull');
    input.pipe(D.$benchmark.summarize()).pipe(D.$benchmark('foo/bar/1')).pipe($((function(_this) {
      return function(n, send) {
        return send(Math.pow(n, 2));
      };
    })(this))).pipe($((function(_this) {
      return function(n) {
        if (n % 12345679 === 0) {
          return urge(n);
        }
      };
    })(this))).pipe(D.$benchmark('foo/bar/2')).pipe(output).pipe($('finish', done));
    for (n = i = 1; i <= 10000; n = ++i) {
      D.send(input, n);
    }
    return D.end(input);
  };

  if (module.parent == null) {

    /* ----------------===#O#===-------------------- */

    /* Tests Known Not to Work for Unknown Reasons: */
    "(v4) stream / transform construction with through2 (2)";
    "(v4) fail to read when thru stream comes before read stream";
    "(v4) _new_stream_from_pipeline (4c)";
    "(v4) $async with method arity 3 (2)";

    /* ----------------===#O#===-------------------- */
    include = ["(v4) $switch (study)", "(v4) $switch (demo)"];
    this._prune();
    this._main();
  }

}).call(this);
