// Generated by CoffeeScript 1.10.0
(function() {
  var $, $async, $split_tsv, CND, D, TMP, _temp_thing, alert, badge, debug, delay, echo, help, include, info, isa_stream, log, resolve_path, resolve_temp_path, rpr, sleep, temp_home, test, urge, warn, whisper,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CND = require('cnd');

  rpr = CND.rpr.bind(CND);

  badge = 'PIPEDREAMS/tests';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);

  test = require('guy-test');

  D = require('./main');

  $ = D.$, $async = D.$async;

  $split_tsv = require('./transform-split-tsv');


  /* TAINT for the time being, we create one global folder and keep it beyond process termination; this
  allows to inspect folder contents after tests have terminated. It would probably be a good idea to remove
  the `keep: yes` setting at a later point in time.
   */

  TMP = require('tmp');

  TMP.setGracefulCleanup();

  _temp_thing = TMP.dirSync({
    keep: true,
    unsafeCleanup: false,
    prefix: 'pipedreams-'
  });

  temp_home = _temp_thing['name'];

  resolve_path = (require('path')).resolve;

  resolve_temp_path = function() {
    var P, p;
    P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return resolve_path.apply(null, [temp_home].concat(slice.call((function() {
      var i, len, results1;
      results1 = [];
      for (i = 0, len = P.length; i < len; i++) {
        p = P[i];
        results1.push(p.replace(/^[.\/]/g, ''));
      }
      return results1;
    })())));
  };

  this["(v4) new new_stream signature (1)"] = function(T, done) {
    var i, len, matchers, new_stream_instrument, probe, probe_idx, probes, result;
    new_stream_instrument = function() {
      var P, error, error1, hints, kind, message, ref, seed, settings;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      message = null;
      kind = null;
      seed = null;
      hints = null;
      settings = null;
      try {
        ref = D.new_stream._read_arguments(P), kind = ref[0], seed = ref[1], hints = ref[2], settings = ref[3];
      } catch (error1) {
        error = error1;
        message = error['message'];
      }
      return [kind, seed, hints, settings, message];
    };
    probes = [
      [], ['utf-8'], [
        'write', 'binary', {
          file: 'baz.doc'
        }
      ], [
        'write', {
          pipeline: []
        }
      ], [
        'write', 'binary', {
          file: 'baz.doc'
        }, {
          mode: 0x1e4
        }
      ], [
        {
          text: "make it so"
        }
      ], [
        'oops', {
          text: "make it so"
        }
      ], ['text', "make it so"], ['binary', 'append', "~/some-file.txt"], [
        'omg', 'append', {
          file: "~/some-file.txt"
        }
      ], [
        'write', {
          route: "~/some-file.txt"
        }
      ]
    ];
    matchers = [
      ["*plain", null, null, null, null], ["*plain", null, ["utf-8"], null, null], ["file", "baz.doc", ["write", "binary"], null, null], ["pipeline", [], ["write"], null, null], [
        "file", "baz.doc", ["write", "binary"], {
          "mode": 484
        }, null
      ], ["text", "make it so", null, null, null], ["text", "make it so", ["oops"], null, null], ["*plain", null, ["text", "make it so"], null, null], ["*plain", null, ["binary", "append", "~/some-file.txt"], null, null], ["file", "~/some-file.txt", ["omg", "append"], null, null], [null, null, null, null, "expected a 'kind' out of '*plain', 'file', 'path', 'pipeline', 'text', 'url', 'transform', got 'route'"]
    ];
    for (probe_idx = i = 0, len = probes.length; i < len; probe_idx = ++i) {
      probe = probes[probe_idx];
      result = new_stream_instrument.apply(null, probe);
      T.eq(result, matchers[probe_idx]);
    }
    return done();
  };

  this["(v4) new new_stream signature (2)"] = function(T, done) {
    var fakestream, i, len, matchers, new_stream_instrument, path_1, path_2, path_3, probe, probe_idx, probes, result;
    path_1 = resolve_temp_path('t-dfgh-1.txt');
    path_2 = resolve_temp_path('t-dfgh-2.txt');
    path_3 = resolve_temp_path('t-dfgh-3.txt');
    fakestream = {
      'stream': true
    };
    new_stream_instrument = function() {
      var P, R, error, error1, message;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      R = null;
      message = null;
      try {
        R = D.new_stream.apply(D, P);
      } catch (error1) {
        error = error1;
        message = error['message'];
      }
      return [R, message];
    };
    probes = [
      [], [
        {
          pipeline: []
        }
      ], [
        'write', 'binary', {
          file: path_1
        }
      ], [
        'write', 'binary', {
          file: path_2
        }, {
          mode: 0x1e4
        }
      ], [
        'binary', 'append', {
          file: path_3
        }
      ], [
        {
          text: "make it so"
        }
      ], [
        'oops', {
          text: "make it so"
        }
      ], ['utf-8'], [
        'write', {
          pipeline: []
        }
      ]
    ];
    matchers = [
      [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [
        {
          "stream": true
        }, null
      ], [null, "_new_stream_from_text doesn't accept 'hints', got [ 'oops' ]"], [null, "_new_stream doesn't accept 'hints', got [ 'utf-8' ]"], [null, "_new_stream_from_pipeline doesn't accept 'hints', got [ 'write' ]"]
    ];
    for (probe_idx = i = 0, len = probes.length; i < len; probe_idx = ++i) {
      probe = probes[probe_idx];
      result = new_stream_instrument.apply(null, probe);
      if (isa_stream(result[0])) {
        result[0] = fakestream;
      }
      T.eq(result, matchers[probe_idx]);
    }
    return done();
  };

  this["(v4) _new_stream_from_path (1)"] = function(T, done) {
    var matcher, path_1, probes, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path('_new_stream_from_path-1.txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = D.new_stream('write', 'lines', {
          path: path_1
        });
        input.pipe(D.$on_end(function() {
          return handler();
        })).pipe(output);
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var input;
        input = D.new_stream('read', 'lines', {
          path: path_1
        });
        return input.pipe(D.$collect()).pipe($(function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        })).pipe(D.$on_end(function() {
          return handler();
        }));
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        (yield write_sample(resume));
        (yield read_sample(resume));
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path (2)"] = function(T, done) {
    var matcher, path_1, probes, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path('_new_stream_from_path-2.txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = (require('fs')).createWriteStream(path_1);
        input.pipe(D.$show()).pipe(D.$as_line()).pipe(D.$bridge(output));
        D.on_finish(output, handler);
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var input;
        input = D.new_stream('read', 'lines', {
          path: path_1
        });
        return input.pipe(D.$collect()).pipe($(function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        })).pipe(D.$on_end(function() {
          return handler();
        }));
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        (yield write_sample(resume));
        (yield read_sample(resume));
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) transforms below output receive data events (1)"] = function(T, done) {
    var $verify, fn, i, input, len, matcher, output, path_1, probe, probes;
    path_1 = resolve_temp_path('(v4) transforms below output receive data events.txt');
    probes = ['line-1', 'line-2', 23, 56];
    matcher = ['line-1\n', 'line-2\n', '23\n', '56\n'];
    $verify = (function(_this) {
      return function() {
        var idx;
        idx = -1;
        return $(function(data) {
          if (data != null) {
            idx += +1;
            T.eq(data, matcher[idx]);
          } else {
            T.eq(idx + 1, matcher.length);
          }
          return null;
        });
      };
    })(this);
    input = D.new_stream();
    output = D.new_stream('write', {
      file: path_1
    });
    input.pipe(D.$show()).pipe(D.$as_line()).pipe(output).pipe(D.$show()).pipe($verify());
    D.on_finish(output, (function(_this) {
      return function() {
        help('done');
        return done();
      };
    })(this));
    fn = (function(_this) {
      return function(probe) {
        return setImmediate(function() {
          return D.send(input, probe);
        });
      };
    })(this);
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      fn(probe);
    }
    setImmediate((function(_this) {
      return function() {
        return D.end(input);
      };
    })(this));
    return null;
  };

  this["(v4) transforms below output receive data events (2)"] = function(T, done) {
    var $verify, input, path, sink_1, sink_2;
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    sink_1 = D.new_stream('devnull');
    sink_2 = D.new_stream('devnull');
    D.on_finish(sink_2, done);
    $verify = (function(_this) {
      return function() {
        var count;
        count = 0;
        return $(function(entry) {
          if (entry != null) {
            count += +1;
          } else {
            T.eq(count, 23);
          }
          return null;
        });
      };
    })(this);
    input.pipe($split_tsv({
      first: 'split',
      names: 'inline'
    })).pipe(sink_1).pipe($verify()).pipe(sink_2);
    return null;
  };

  this["(v4) _new_stream_from_path (3)"] = function(T, done) {
    this["_(v4) _new_stream_from_path (3) (outer)"]((function(_this) {
      return function(error, Z) {
        var count, failures, n, r;
        if (error != null) {
          throw error;
        }
        n = Z[0], failures = Z[1];
        if ((count = failures.length) === 0) {
          T.ok(true);
        } else {
          T.fail("failed in " + count + " out of " + n + " cases:\n" + ((function() {
            var i, len, results1;
            results1 = [];
            for (i = 0, len = failures.length; i < len; i++) {
              r = failures[i];
              results1.push((JSON.stringify(r)) + '\n');
            }
            return results1;
          })()));
        }
        return done();
      };
    })(this));
    return null;
  };

  this["_(v4) _new_stream_from_path (3) (outer)"] = function(handler) {
    var ASYNC, failures, fn, i, idx, n, ref, tasks;
    ASYNC = require('async');
    tasks = [];
    failures = [];
    n = 100;
    fn = (function(_this) {
      return function(idx) {
        return tasks.push(function(done) {
          var probes;
          probes = ['helo', 'world', "run #" + idx];
          return _this["_(v4) _new_stream_from_path (3) (inner)"](idx, probes, function(error, result) {
            if (error != null) {
              failures.push(error['message']);
            } else {
              if (!CND.equals(result, probes)) {
                failures.push(result);
              }
            }
            return done();
          });
        });
      };
    })(this);
    for (idx = i = 0, ref = n; 0 <= ref ? i < ref : i > ref; idx = 0 <= ref ? ++i : --i) {
      fn(idx);
    }
    ASYNC.parallelLimit(tasks, 10, (function(_this) {
      return function() {
        urge("done");
        return handler(null, [n, failures]);
      };
    })(this));
    return null;
  };

  this["_(v4) _new_stream_from_path (3) (inner)"] = function(idx, probes, handler) {
    var path_1, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path("_new_stream_from_path-3-" + idx + ".txt");
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = D.new_stream('write', 'lines', {
          file: path_1
        });
        D.on_finish(output, handler);
        input.pipe(output);
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var error, error1, input;
        try {
          input = D.new_stream('read', 'lines', {
            path: path_1
          });
        } catch (error1) {
          error = error1;
          return handler(error);
        }
        return input.pipe(D.$collect()).pipe((function() {
          var result;
          result = null;
          return $(function(lines) {
            if (lines != null) {
              return result = lines;
            } else {
              return handler(null, result);
            }
          });
        })());
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var result;
        (yield write_sample(resume));
        result = (yield read_sample(resume));
        return handler(null, result);
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path (4)"] = function(T, done) {
    var matcher, path_1, probes, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path_1 = resolve_temp_path('_new_stream_from_path-4.txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var i, input, len, output, probe;
        input = D.new_stream();
        output = (require('fs')).createWriteStream(path_1, {
          flags: 'a'
        });
        input.pipe(D.$as_line()).pipe(D.new_stream({
          pipeline: [D.$bridge(output), D.$show()]
        }));
        D.on_finish(output, handler);
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          D.send(input, probe);
        }
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(handler) {
        var input;
        input = D.new_stream('read', 'lines', {
          path: path_1
        });
        return input.pipe(D.$collect()).pipe($(function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        })).pipe(D.$on_end(function() {
          return handler();
        }));
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        (yield write_sample(resume));
        (yield read_sample(resume));
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) file stream events (1)"] = function(T, done) {
    var path_1, probes, write_sample;
    path_1 = resolve_temp_path('(v4) file stream events (1).txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    write_sample = (function(_this) {
      return function(handler) {
        var fn, i, input, len, output, pipeline, probe, thruput;
        input = D.new_stream();
        thruput = D.new_stream();
        output = D.new_stream('append', {
          file: path_1
        });
        pipeline = input.pipe($(function(data) {
          info('1', data);
          if (data == null) {
            return debug(CND.green('transform 1 end'));
          }
        })).pipe(output).pipe(thruput).pipe($(function(data) {
          info('2', data);
          if (data == null) {
            return debug(CND.green('transform 2 end'));
          }
        }));
        input.on('end', function() {
          return debug(CND.lime('input end'));
        });
        input.on('finish', function() {
          return debug(CND.lime('input finish'));
        });
        output.on('end', function() {
          return debug(CND.red('output end'));
        });
        output.on('finish', function() {
          return debug(CND.red('output finish'));
        });
        thruput.on('end', function() {
          return debug(CND.gold('thruput end'));
        });
        thruput.on('finish', function() {
          return debug(CND.gold('thruput finish'));
        });
        pipeline.on('end', function() {
          return debug(CND.blue('pipeline end'));
        });
        pipeline.on('finish', function() {
          return debug(CND.blue('pipeline finish'));
        });
        output.on('finish', function() {
          return setImmediate(function() {
            debug(CND.white('over'));
            return handler();
          });
        });
        fn = function(probe) {
          return setImmediate(function() {
            return input.write(probe);
          });
        };
        for (i = 0, len = probes.length; i < len; i++) {
          probe = probes[i];
          fn(probe);
        }
        return setImmediate(function() {
          return input.end();
        });
      };
    })(this);
    write_sample((function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return setImmediate(function() {
          return done();
        });
      };
    })(this));
    return null;
  };

  this["(v4) file stream events (2)"] = function(T, done) {
    var path_1, probes, read_sample;
    path_1 = resolve_temp_path('(v4) file stream events (1).txt');
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    read_sample = (function(_this) {
      return function(handler) {
        var input, pipeline;
        input = D.new_stream('utf-8', {
          file: path_1
        });
        pipeline = input.pipe(D.$show()).pipe(D.$on_end(function() {
          debug(CND.white('transform 3 end'));
          return handler();
        }));
        input.on('end', function() {
          return debug(CND.lime('input end'));
        });
        input.on('finish', function() {
          return debug(CND.lime('input finish'));
        });
        pipeline.on('end', function() {
          return debug(CND.blue('pipeline end'));
        });
        return pipeline.on('finish', function() {
          return debug(CND.blue('pipeline finish'));
        });
      };
    })(this);
    read_sample((function(_this) {
      return function(error) {
        if (error != null) {
          throw error;
        }
        return setImmediate(function() {
          return done();
        });
      };
    })(this));
    return null;
  };

  this["(v4) streams as transforms and v/v (1)"] = function(T, done) {
    var i, input, len, matcher, probe, probes;
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    input = $(function(data) {});
    input.pipe(D.$collect()).pipe(D.$show()).pipe($((function(_this) {
      return function(lines) {
        if (lines != null) {
          return T.eq(lines, matcher);
        }
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(input, probe);
    }
    D.end(input);
    return null;
  };

  this["(v4) streams as transforms and v/v (2)"] = function(T, done) {
    var i, input, len, matcher, probe, probes, transform;
    probes = ['helo', 'world', '𪉟⿱鹵皿'];
    matcher = ['HELO', 'world', '𪉟⿱鹵皿'];
    transform = (function(_this) {
      return function(line, send) {
        if (line === 'helo') {
          send('HELO');
        } else {
          send(line);
        }
        return null;
      };
    })(this);
    input = $(function(data) {});
    input.pipe(D.new_stream({
      transform: transform
    })).pipe(D.$collect()).pipe(D.new_stream({
      transform: ((function(_this) {
        return function(lines) {
          if (lines != null) {
            return T.eq(lines, matcher);
          }
        };
      })(this))
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      probe = probes[i];
      D.send(input, probe);
    }
    D.end(input);
    return null;
  };


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /* ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */


  /*          ## ## ##          ## ## ##          ## ## ##          ## ## ##          ## ## ## */

  this["(v4) _new_stream_from_pipeline (1a)"] = function(T, done) {
    var MSP, create_frob_tee;
    MSP = require('mississippi');
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var R, add, multiply, sink, source, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            whisper('multiply', data);
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            whisper('add', data);
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            whisper('square', data);
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = MSP.through.obj();
        R = source = MSP.through.obj();
        source = R;
        sink = R;
        R = R.pipe(multiply);
        R = R.pipe(add);
        R = R.pipe(unsquared);
        R = R.pipe(square);
        R['source'] = source;
        R['sink'] = R;
        return R;
      };
    })();
    (function() {
      var frob, output_matchers, output_results, probes, sink, source, write_data_using_push, write_data_using_write;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      output_matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      output_results = [];
      frob = create_frob_tee();
      source = frob.source, sink = frob.sink;
      sink.pipe($((function(_this) {
        return function(data) {
          return help('show #1', data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          send(data);
          return help('show #2', data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            warn("pausing for a second");
            return setTimeout(end, 1000);
          }
        };
      })(this))).pipe($((function(_this) {
        return function(data, send) {
          output_results.push(data);
          return send(data);
        };
      })(this))).pipe($((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
          }
          if (end != null) {
            help("output_results", output_results);
            T.eq(output_results, output_matchers);
            end();
            return done();
          }
        };
      })(this)));
      write_data_using_write = function() {
        var i, len, n;
        for (i = 0, len = probes.length; i < len; i++) {
          n = probes[i];
          urge('write', n);
          source.write(n);
        }
        return source.end();
      };
      write_data_using_push = function() {
        var i, len, n;
        for (i = 0, len = probes.length; i < len; i++) {
          n = probes[i];
          urge('push', n);
          source.push(n);
        }
        return source.push(null);
      };
      write_data_using_push();
      return null;
    })();
    return null;
  };

  this["(v4) _new_stream_from_pipeline (3)"] = function(T, done) {
    var MSP, create_frob_tee;
    MSP = require('mississippi');
    create_frob_tee = null;
    (function() {
      return create_frob_tee = function(settings) {
        var add, multiply, square, unsquared;
        multiply = $((function(_this) {
          return function(data, send) {
            return send(data * 2);
          };
        })(this));
        add = $((function(_this) {
          return function(data, send) {
            return send(data + 2);
          };
        })(this));
        square = $((function(_this) {
          return function(data, send) {
            return send(Math.pow(data, 2));
          };
        })(this));
        unsquared = D.new_stream();
        return D.new_stream({
          pipeline: [multiply, add, unsquared, square]
        });
      };
    })();
    (function() {
      var frob, i, len, matchers, n, probes, results;
      probes = [1, 2, 3, 4, 5, 6, 7, 8, 9];
      matchers = [16, 36, 64, 100, 144, 196, 256, 324, 400];
      results = [];
      frob = create_frob_tee();
      frob.pipe(D.$show()).pipe($((function(_this) {
        return function(data, send) {
          results.push(data);
          return send(data);
        };
      })(this))).pipe(D.$on_end((function(_this) {
        return function() {
          T.eq(results, matchers);
          return done();
        };
      })(this)));
      for (i = 0, len = probes.length; i < len; i++) {
        n = probes[i];
        frob.write(n);
      }
      return frob.end();
    })();
    return null;
  };

  this["(v4) _new_stream_from_pipeline (4)"] = function(T, done) {
    var confluence, i, len, matchers, n, pipeline, probes, results;
    probes = [10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
    matchers = [20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40];
    results = [];
    pipeline = [
      $((function(_this) {
        return function(data, send) {
          return send(n + 2);
        };
      })(this)), $((function(_this) {
        return function(data, send) {
          return send(n * 2);
        };
      })(this))
    ];
    confluence = D.new_stream({
      pipeline: pipeline
    });
    confluence.pipe(D.$show()).pipe($((function(_this) {
      return function(data, send, end) {
        if (data != null) {
          send(data);
          results.push(data);
        }
        if (end != null) {
          T.eq(results, matchers);
          end();
          return done();
        }
      };
    })(this)));
    for (i = 0, len = probes.length; i < len; i++) {
      n = probes[i];
      confluence.write(n);
    }
    confluence.end();
    return null;
  };

  this["(v4) _new_stream_from_text"] = function(T, done) {
    var count, input, text;
    text = "Just in order to stress it, a 'character’ in this chart is equivalent to 'a Unicode\ncodepoint’, so for example 馬 and 马 count as two characters, and 關, 关, 関, 闗, 𨶹 count\nas five characters. Dictionaries will list 馬马 as 'one character with two variants’\nand 關关関闗𨶹 as 'one character with five variants’, but that’s not what we’re counting\nhere.";
    input = D.new_stream({
      text: text
    });
    count = 0;
    input.pipe($(function(data, send, end) {
      if (data != null) {
        T.eq(data, text);
        count += +1;
      }
      if (end != null) {
        T.eq(count, 1);
        end();
        return done();
      }
    }));
    return null;
  };

  this["(v4) _new_stream_from_text doesn't work synchronously"] = function(T, done) {

    /* TAINT behavior changed now that we're using binary-split in place of split2 */
    var collector, input;
    collector = [];
    input = D.new_stream();
    input.pipe(D.$split()).pipe($((function(_this) {
      return function(line, send) {
        send(line);
        return collector.push(line);
      };
    })(this)));
    input.write("first line\nsecond line");
    input.end();
    T.eq(collector, ["first line"]);
    return done();
  };

  this["(v4) _new_stream_from_text (2)"] = function(T, done) {
    var collector, input;
    collector = [];
    input = D.new_stream();
    input.pipe(D.$split()).pipe($((function(_this) {
      return function(line, send) {
        send(line);
        return collector.push(line);
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function() {
        T.eq(collector, ["first line", "second line"]);
        return done();
      };
    })(this)));
    input.write("first line\nsecond line");
    return input.end();
  };

  this["(v4) observer transform called with data `null` on stream end"] = function(T, done) {
    var collector, input, received_null;
    received_null = false;
    collector = [];
    input = D.new_stream();
    input.pipe($((function(_this) {
      return function(data) {
        if (data != null) {
          return collector.push(data);
        } else {
          if (data === null) {
            if (received_null) {
              T.fail("received null, shouldn't happen");
            }
            return received_null = true;
          } else {
            return T.fail("received " + (rpr(data)) + ", shouldn't happen");
          }
        }
      };
    })(this))).pipe(D.$on_end((function(_this) {
      return function() {
        if (!received_null) {
          T.fail("expected to receive null in observer transform");
        }
        T.eq(collector, ["helo", "world"]);
        return done();
      };
    })(this)));
    input.write("helo");
    input.write("world");
    return input.end();
  };

  this["(v4) README demo (1)"] = function(T, done) {
    var $as_text_line, $comment, $summarize, $verify, i, input, len, n, ref;
    $comment = function() {
      var count;
      count = 0;
      return $((function(_this) {
        return function(data) {
          if (data != null) {
            count += +1;
            return info("received event:", data);
          } else {
            return warn("stream has ended; read " + count + " events");
          }
        };
      })(this));
    };
    $as_text_line = function() {
      return $((function(_this) {
        return function(data, send) {
          return send("line: " + (JSON.stringify(data)) + '\n');
        };
      })(this));
    };
    $summarize = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            collector.sort();
            help(title, collector.join(', '));
            return end();
          }
        };
      })(this));
    };
    $verify = function(title) {
      var collector;
      collector = [];
      return $((function(_this) {
        return function(data, send, end) {
          if (data != null) {
            send(data);
            collector.push(JSON.stringify(data));
          }
          if (end != null) {
            T.eq(collector, ['"line: 4\\n"', '"line: 7\\n"', '"line: 9\\n"', '"line: 3\\n"', '"line: 5\\n"', '"line: 6\\n"']);
            return end();
          }
        };
      })(this));
    };
    input = D.new_stream();
    input.pipe($comment()).pipe($((function(_this) {
      return function(data) {
        return log(CND.truth(data != null));
      };
    })(this))).pipe($summarize("position #1:")).pipe($as_text_line()).pipe($verify()).pipe($summarize("position #2:")).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [4, 7, 9, 3, 5, 6];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      input.write(n);
    }
    input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) stream / transform construction with through2 (1)"] = function(T, T_done) {
    var FS, MSP, PATH, delay, input, t2_settings, transform_flush, transform_main;
    FS = require('fs');
    PATH = require('path');
    MSP = require('mississippi');
    t2_settings = {};
    input = FS.createReadStream(PATH.resolve(__dirname, '../package.json'));
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(100, 500);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);

    /* The main transform method accepts a line, takes it out of the stream unless it matches
    either `"name"` or `"version"`, trims it, and emits two events (formatted as lists) per remaining
    line. This method must be free (a.k.a. bound, using a slim arrow) so we can use `@push`.
     */
    transform_main = function(line, encoding, handler) {
      if (encoding !== 'utf8') {
        throw new Error("unknown encoding " + (rpr(encoding)));
      }
      if (!/"(name|version)"/.test(line)) {
        return handler();
      }
      line = line.trim();
      return delay(line, (function(_this) {
        return function() {
          _this.push(['first-chr', (Array.from(line))[0]]);
          return handler(null, ['text', line]);
        };
      })(this));
    };

    /* The 'flush' transform is called once, right before the stream has ended; the callback must be called
    exactly once, and it's possible to put additional 'last-minute' data into the stream by calling `@push`.
    Because we have to access `this`/`@`, the method must again be free and not bound, but of course we
    can set up an alias for `@push`:
     */
    transform_flush = function(done) {
      var push;
      push = this.push.bind(this);
      return delay('flush', (function(_this) {
        return function() {
          push(['message', "ok"]);
          push(['message', "we're done"]);
          return done();
        };
      })(this));
    };
    input.pipe(D.$split()).pipe(MSP.through.obj(t2_settings, transform_main, transform_flush)).pipe(D.$show()).pipe(D.$on_end((function(_this) {
      return function() {
        return T_done();
      };
    })(this)));
    return null;
  };

  this["(v4) stream / transform construction with through2 (2)"] = function(T, T_done) {
    var $collect, $finalize, $retrieve_data_from_db, MSP, S, db, delay, glyph, i, len, read_phrases, ref, t2_settings;
    MSP = require('mississippi');
    t2_settings = {};
    S = {};
    S.input = MSP.through.obj();
    db = CND.shuffle([['千', 'variant', '仟'], ['千', 'variant', '韆'], ['千', 'similarity', '于'], ['千', 'similarity', '干'], ['千', 'usagecode', 'CJKTHM'], ['千', 'strokeorder', '312'], ['千', 'reading', 'qian'], ['千', 'reading', 'foo'], ['千', 'reading', 'bar'], ['仟', 'strokeorder', '32312'], ['仟', 'usagecode', 'CJKTHm'], ['仟', 'reading', 'qian'], ['韆', 'strokeorder', '122125112125221134515454'], ['韆', 'usagecode', 'KTHm'], ['韆', 'reading', 'qian']]);
    delay = (function(_this) {
      return function(name, f) {
        var dt;
        dt = CND.random_integer(1, 100);
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
        return setTimeout(f, dt);
      };
    })(this);
    read_phrases = (function(_this) {
      return function(glyph, handler) {
        return delay(glyph, function() {
          var i, len, obj, phrase, prd, sbj;
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            sbj = phrase[0], prd = phrase[1], obj = phrase[2];
            if (sbj !== glyph) {
              continue;
            }
            handler(null, phrase);
          }
          return handler(null, null);
        });
      };
    })(this);
    $retrieve_data_from_db = (function(_this) {
      return function(S) {
        var flush, main;
        main = function(glyph, encoding, callback) {
          var is_finished, push;
          push = this.push.bind(this);
          push([glyph, 'start']);
          is_finished = false;
          read_phrases(glyph, (function(_this) {
            return function(error, phrase) {
              if (error != null) {
                return callback(error);
              }
              if (phrase != null) {
                return push(phrase);
              }
              push([glyph, 'stop']);
              if (!is_finished) {
                callback();
              }
              return is_finished = true;
            };
          })(this));
          return null;
        };
        flush = function(callback) {
          var push;
          push = this.push.bind(this);
          push(['message', "ok"]);
          push(['message', "we're done"]);
          return callback();
        };
        return MSP.through.obj(t2_settings, main);
      };
    })(this);
    $collect = (function(_this) {
      return function(S) {
        var collector, flush, main, matchers, phrase;
        matchers = new Set((function() {
          var i, len, results1;
          results1 = [];
          for (i = 0, len = db.length; i < len; i++) {
            phrase = db[i];
            results1.push(JSON.stringify(phrase));
          }
          return results1;
        })());
        collector = [];
        main = function(phrase, _, callback) {
          var obj, prd, probe, sbj;
          probe = JSON.stringify(phrase);
          sbj = phrase[0], prd = phrase[1], obj = phrase[2];
          if (!((prd === 'start' || prd === 'stop') || (sbj === 'message'))) {
            T.ok(matchers.has(probe));
            matchers["delete"](probe);
          }
          return callback(null, phrase);
        };
        flush = function(callback) {
          T.eq(matchers.size, 0);
          return callback();
        };
        return MSP.through.obj(t2_settings, main, flush);
      };
    })(this);
    $finalize = (function(_this) {
      return function(S) {
        var flush, main;
        main = null;
        flush = function(callback) {
          help("that’s all");
          T_done();
          return callback();
        };
        return MSP.through.obj(t2_settings, main, flush);
      };
    })(this);
    S.input.pipe($retrieve_data_from_db(S)).pipe($collect(S)).pipe(D.$show()).pipe($finalize(S));

    /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */

    /* TAINT this test causes a timeout for unknown reasons; postponing */
    T.fail("test fails with timeout for unknown reasons");
    return T_done();

    /* !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! */
    ref = Array.from('千仟韆');
    for (i = 0, len = ref.length; i < len; i++) {
      glyph = ref[i];
      S.input.write(glyph);
    }
    S.input.end();
    return null;
  };

  this["(v4) D.new_stream"] = function(T, done) {
    var stream;
    T.ok(isa_stream(stream = D.new_stream()));
    stream.pipe((function(_this) {
      return function() {
        var collector;
        collector = [];
        return $(function(data, send, end) {
          if (data != null) {
            collector.push(data);
          }
          if (end != null) {
            T.eq(collector, ['foo', 'bar', 'baz']);
            end();
            return done();
          }
        });
      };
    })(this)());
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) D._new_stream_from_pipeline"] = function(T, done) {
    var pipeline, stream;
    pipeline = [
      (function(_this) {
        return function() {
          var collector;
          collector = [];
          return $(function(data, send, end) {
            if (data != null) {
              collector.push(data);
            }
            if (end != null) {
              T.eq(collector, ['foo', 'bar', 'baz']);
              end();
              return done();
            }
          });
        };
      })(this)()
    ];
    T.ok(isa_stream(stream = D.new_stream({
      pipeline: pipeline
    })));
    stream.write('foo');
    stream.write('bar');
    stream.write('baz');
    return stream.end();
  };

  this["(v4) $async with method arity 2"] = function(T, done) {
    var $calculate, input;
    $calculate = (function(_this) {
      return function() {
        return $async(function(n, send) {
          return delay("$calculate", function() {
            send(n - 1);
            send(n);
            send(n + 1);
            return send.done();
          });
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe($calculate()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [4, 5, 6, 14, 15, 16, 24, 25, 26]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    D.send(input, 5);
    D.send(input, 15);
    D.send(input, 25);
    D.end(input);
    return null;
  };

  this["(v4) $async with method arity 3"] = function(T, done) {
    var $calculate, $group, input;
    $calculate = (function(_this) {
      return function() {
        return $async(function(n, send) {
          return delay("$calculate", function() {
            send(n - 1);
            send(n);
            send(n + 1);
            return send.done();
          });
        });
      };
    })(this);
    $group = (function(_this) {
      return function() {
        var current_group, last_n;
        last_n = null;
        current_group = null;
        return $async(function(n, send, end) {
          return delay("$group", function() {
            if (n != null) {
              if ((last_n != null) && (Math.abs(n - last_n)) === 1) {
                current_group.push(n);
              } else {
                if (current_group != null) {
                  send(current_group);
                }
                current_group = [n];
              }
              last_n = n;
            }
            if (end != null) {
              if (current_group != null) {
                send(current_group);
              }
              end();
            }
            return send.done();
          });
        });
      };
    })(this);
    input = D.new_stream();
    input.pipe($calculate()).pipe($group()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [[4, 5, 6], [14, 15, 16], [24, 25, 26]]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    D.send(input, 5);
    D.send(input, 15);
    D.send(input, 25);
    D.end(input);
    return null;
  };

  this["(v4) $sort 1"] = function(T, done) {
    var i, input, len, n, ref;
    input = D.new_stream();
    input.pipe(D.$sort()).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [11, 23, 33, 55, 82, 98, 99]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 2"] = function(T, done) {
    var i, input, len, n, ref;
    input = D.new_stream();
    input.pipe(D.$sort()).pipe(D.$show()).pipe(D.$collect({
      collect: true
    })).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [11, 23, 33, 55, 82, 98, 99]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 3"] = function(T, done) {
    var i, input, len, n, ref, sorter;
    sorter = (function(_this) {
      return function(a, b) {
        if (a < b) {
          return +1;
        }
        if (a > b) {
          return -1;
        }
        return 0;
      };
    })(this);
    input = D.new_stream();
    input.pipe(D.$sort(sorter)).pipe(D.$show()).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [99, 98, 82, 55, 33, 23, 11]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $sort 4"] = function(T, done) {
    var i, input, len, n, ref, sorter;
    sorter = (function(_this) {
      return function(a, b) {
        if (a < b) {
          return +1;
        }
        if (a > b) {
          return -1;
        }
        return 0;
      };
    })(this);
    input = D.new_stream();
    input.pipe(D.$sort(sorter, {
      collect: true
    })).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, [99, 98, 82, 55, 33, 23, 11]);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    ref = [55, 82, 99, 23, 11, 98, 33];
    for (i = 0, len = ref.length; i < len; i++) {
      n = ref[i];
      D.send(input, n);
    }
    return D.end(input);
  };

  this["(v4) $lockstep 1"] = function(T, done) {
    var i, input_1, input_2, j, len, len1, matcher, ref, ref1, word;
    input_1 = D.new_stream();
    input_2 = D.new_stream();
    input_1.pipe(D.$lockstep(input_2)).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [['以', 'i'], ['呂', 'ro'], ['波', 'ha'], ['耳', 'ni'], ['本', 'ho'], ['部', 'he'], ['止', 'to']];
    ref = "以 呂 波 耳 本 部 止".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input_1, word);
    }
    ref1 = "i ro ha ni ho he to".split(/\s+/);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      word = ref1[j];
      D.send(input_2, word);
    }
    D.end(input_1);
    D.end(input_2);
    return null;
  };

  this["(v4) $lockstep fails on streams of unequal lengths without fallback"] = function(T, done) {
    var f;
    f = (function(_this) {
      return function() {
        var i, input_1, input_2, j, len, len1, ref, ref1, word;
        input_1 = D.new_stream();
        input_2 = D.new_stream();
        input_1.pipe(D.$lockstep(input_2)).pipe(D.$collect());
        ref = "以 呂 波 耳 本 部 止 千".split(/\s+/);
        for (i = 0, len = ref.length; i < len; i++) {
          word = ref[i];
          D.send(input_1, word);
        }
        ref1 = "i ro ha ni ho he to".split(/\s+/);
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          word = ref1[j];
          D.send(input_2, word);
        }
        D.end(input_1);
        return D.end(input_2);
      };
    })(this);
    D.run(f, (function(_this) {
      return function(error) {
        T.eq(error['message'], "streams of unequal lengths and no fallback value given");
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) $lockstep succeeds on streams of unequal lengths with fallback"] = function(T, done) {
    var i, input_1, input_2, j, len, len1, matcher, ref, ref1, word;
    input_1 = D.new_stream();
    input_2 = D.new_stream();
    input_1.pipe(D.$lockstep(input_2, {
      fallback: null
    })).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [['以', 'i'], ['呂', 'ro'], ['波', 'ha'], ['耳', 'ni'], ['本', 'ho'], ['部', 'he'], ['止', 'to'], ['千', null]];
    ref = "以 呂 波 耳 本 部 止 千".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input_1, word);
    }
    ref1 = "i ro ha ni ho he to".split(/\s+/);
    for (j = 0, len1 = ref1.length; j < len1; j++) {
      word = ref1[j];
      D.send(input_2, word);
    }
    D.end(input_1);
    D.end(input_2);
    return null;
  };

  this["(v4) $batch and $spread"] = function(T, done) {
    var i, input, len, matcher, ref, word;
    input = D.new_stream();
    input.pipe(D.$batch(3)).pipe(D.$spread({
      indexed: true
    })).pipe(D.$collect()).pipe(D.$show()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [[0, '以'], [1, '呂'], [2, '波'], [0, '耳'], [1, '本'], [2, '部'], [0, '止']];
    ref = "以 呂 波 耳 本 部 止".split(/\s+/);
    for (i = 0, len = ref.length; i < len; i++) {
      word = ref[i];
      D.send(input, word);
    }
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (1)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe($split_tsv()).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [["a", "text"], ["with", "a number"], ["of", "lines"], ["u-cjk/9e1f", "鸟", "⿴乌丶"], ["u-cjk/9e20", "鸠", "⿰九鸟"], ["u-cjk/9e21", "鸡", "⿰又鸟"], ["u-cjk/9e22", "鸢", "⿱弋鸟"], ["u-cjk/9e23", "鸣", "⿰口鸟"], ["u-cjk-xa/380b", "㠋", "(⿱山品亏)"], ["㠋", "(⿱山口咢) # first field is empty"]];
    text = [];
    text.push("a\ttext");
    text.push("with\ta number");
    text.push("          ");
    text.push("of\tlines\n");
    text.push("");
    text.push("\t\t# comment");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (2)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe($split_tsv({
      first: 'split'
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [["u-cjk/9e1f", "鸟", "⿴乌丶"], ["u-cjk/9e20", "鸠", "⿰九鸟"], ["u-cjk/9e21", "鸡", "⿰又鸟 # this comment remains in output"], ["u-cjk/9e22", "鸢", "⿱弋鸟"], ["u-cjk-xa/380b", "㠋", "(⿱山品亏)"], ["", "㠋", "(⿱山口咢) # first field is empty"], ["u-cjk/9e23", "鸣", "⿰口鸟"]];
    text = [];
    text.push("# This is a comment");
    text.push("\t\t# two empty fields, comment");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push(" ");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟 # this comment remains in output");
    text.push("");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟\t# this one will be removed");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (3)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe($split_tsv({
      first: 'split',
      names: ['fncr', 'glyph', 'formula']
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [
      {
        "fncr": "u-cjk/9e1f",
        "glyph": "鸟",
        "formula": "⿴乌丶"
      }, {
        "fncr": "u-cjk/9e20",
        "glyph": "鸠",
        "formula": "⿰九鸟"
      }, {
        "fncr": "u-cjk/9e21",
        "glyph": "鸡",
        "formula": "⿰又鸟 # this comment remains in output"
      }, {
        "fncr": "u-cjk/9e22",
        "glyph": "鸢",
        "formula": "⿱弋鸟"
      }, {
        "fncr": "u-cjk-xa/380b",
        "glyph": "㠋",
        "formula": "(⿱山品亏)"
      }, {
        "fncr": "",
        "glyph": "㠋",
        "formula": "(⿱山口咢) # first field is empty"
      }, {
        "fncr": "u-cjk/9e23",
        "glyph": "鸣",
        "formula": "⿰口鸟"
      }
    ];
    text = [];
    text.push("# This is a comment");
    text.push("\t\t# two empty fields, comment");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push(" ");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟 # this comment remains in output");
    text.push("");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟\t# this one will be removed");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) $split_tsv (4)"] = function(T, done) {
    var input, matcher, text;
    input = D.new_stream();
    input.pipe($split_tsv({
      first: 'split',
      names: 'inline'
    })).pipe(D.$collect()).pipe($(function(data) {
      if (data != null) {
        return T.eq(data, matcher);
      }
    })).pipe(D.$on_end((function(_this) {
      return function() {
        return done();
      };
    })(this)));
    matcher = [
      {
        "fncr": "u-cjk/9e1f",
        "glyph": "鸟",
        "formula": "⿴乌丶"
      }, {
        "fncr": "u-cjk/9e20",
        "glyph": "鸠",
        "formula": "⿰九鸟"
      }, {
        "fncr": "u-cjk/9e21",
        "glyph": "鸡",
        "formula": "⿰又鸟 # this comment remains in output"
      }, {
        "fncr": "u-cjk/9e22",
        "glyph": "鸢",
        "formula": "⿱弋鸟"
      }, {
        "fncr": "u-cjk-xa/380b",
        "glyph": "㠋",
        "formula": "(⿱山品亏)"
      }, {
        "fncr": "",
        "glyph": "㠋",
        "formula": "(⿱山口咢) # first field is empty"
      }, {
        "fncr": "u-cjk/9e23",
        "glyph": "鸣",
        "formula": "⿰口鸟"
      }
    ];
    text = [];
    text.push("# This is a comment");
    text.push("\t\t# two empty fields, comment");
    text.push("fncr\tglyph\tformula");
    text.push("u-cjk/9e1f\t鸟\t⿴乌丶");
    text.push(" ");
    text.push("u-cjk/9e20\t鸠\t⿰九鸟");
    text.push("u-cjk/9e21\t鸡\t⿰又鸟 # this comment remains in output");
    text.push("");
    text.push("u-cjk/9e22\t鸢\t⿱弋鸟\t# this one will be removed");
    text.push("u-cjk-xa/380b\t㠋\t(⿱山品亏)");
    text.push("\t㠋\t(⿱山口咢) # first field is empty");
    text.push("u-cjk/9e23\t鸣\t⿰口鸟");
    D.send(input, text.join('\n'));
    D.end(input);
    return null;
  };

  this["(v4) read TSV file (1)"] = function(T, done) {
    var $is_valid_fncr, $verify, input, path, sink;
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    sink = D.new_stream('devnull');
    $is_valid_fncr = function() {
      var errors;
      errors = [];
      return $((function(_this) {
        return function(entry, send, end) {
          var error_message, fncr, fncr_cid, fncr_cid_hex, glyph, glyph_cid, glyph_cid_hex, i, len, message;
          if (entry != null) {
            fncr = entry.fncr, glyph = entry.glyph;
            fncr_cid = parseInt(fncr.replace(/^[^\/]+\/(.+)$/g, '$1'), 16);
            glyph_cid = glyph.codePointAt(0);
            if (fncr_cid !== glyph_cid) {
              fncr_cid_hex = '0x' + fncr_cid.toString(16);
              glyph_cid_hex = '0x' + glyph_cid.toString(16);
              message = "CID mismatch: " + fncr + " (" + fncr_cid_hex + " != " + glyph + " (" + glyph_cid_hex + "))";
              entry['error'] = message;
              errors.push(message);
            }
            send(entry);
          }
          if (end != null) {
            if (errors.length > 0) {
              warn("there were " + errors.length + " CID mismatches");
              urge("(these were deliberately inserted into the data");
              urge("so these error messages are expected):");
              for (i = 0, len = errors.length; i < len; i++) {
                error_message = errors[i];
                warn(error_message);
              }
            }
            end();
          }
          return null;
        };
      })(this));
    };
    $verify = (function(_this) {
      return function() {
        var error_count;
        error_count = 0;
        return $(function(entry, send, end) {
          var error;
          if (entry != null) {
            error = entry.error;
            if (error != null) {
              error_count += +1;
            }
            send(entry);
          }
          if (end != null) {
            T.eq(error_count, 2);
            end();
          }
          return null;
        });
      };
    })(this);
    D.on_finish(sink, done);
    input.pipe($split_tsv({
      first: 'split',
      names: 'inline'
    })).pipe($is_valid_fncr()).pipe($verify()).pipe(sink);
    return null;
  };

  this["(v4) fail to read when thru stream comes before read stream"] = function(T, done) {
    var MSP, input, path, pipeline, ref;
    MSP = require('mississippi');
    path = (require('path')).resolve(__dirname, '../test-data/shape-breakdowwn-formula.txt');
    input = D.new_stream({
      path: path
    });
    pipeline = [
      MSP.through.obj(), (require('fs')).createReadStream(path, {
        encoding: 'utf-8'
      })
    ];
    input = (ref = MSP.pipeline).obj.apply(ref, pipeline);
    input.pipe(D.$show());
    input.on('end', (function(_this) {
      return function() {
        return debug(CND.lime('input end'));
      };
    })(this));
    input.on('finish', (function(_this) {
      return function() {
        return debug(CND.lime('input finish'));
      };
    })(this));
    MSP.finished(input, (function(_this) {
      return function(error) {
        if (error) {
          throw error;
        }
        urge("MSP.finish");
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_url"] = function(T, done) {
    var found, input, sink;
    input = D.new_stream({
      url: 'http://example.com'
    });
    sink = D.new_stream('devnull');
    found = false;
    D.on_finish(sink, (function(_this) {
      return function() {
        T.ok(found);
        return done();
      };
    })(this));
    input.pipe(D.$split()).pipe($(function(line) {
      if (line != null) {
        return found = found || /<h1>Example Domain<\/h1>/.test(line);
      }
    })).pipe(sink);
    return null;
  };

  this["(v4) new_stream README example (1)"] = function(T, done) {
    var input;
    input = D.new_stream();
    input.pipe(D.$split()).pipe(D.$show()).pipe(D.$on_finish(done));
    input.write("helo\nworld");
    input.write("!");
    input.end();
    return null;
  };

  this["(v4) new_stream README example (2)"] = function(T, done) {
    var input, output, thruput;
    input = D.new_stream();
    thruput = D.new_stream();
    output = D.new_stream();
    input.pipe(D.$split()).pipe(thruput).pipe(D.$on_finish(done)).pipe(output);
    thruput.pipe($(function(data) {
      return log('thruput', rpr(data));
    }));
    output.pipe($(function(data) {
      return log('output', rpr(data));
    }));
    input.write("helo\nworld");
    input.write("!");
    input.end();
    return null;
  };

  this["(v4) new_stream README example (3)"] = function(T, done) {
    var input, output, thruput;
    input = D.new_stream();
    thruput = D.new_stream();
    output = D.new_stream();
    input.pipe(D.$split()).pipe(thruput).pipe(D.$on_finish(done)).pipe(output).pipe(D.$show());
    thruput.pipe($(function(data) {
      return log('thruput', rpr(data));
    }));
    output.pipe($(function(data) {
      if (data === 'helo') {
        thruput.write("meh\n");
        input.write("\nmoar\nof the same!\n");
      }
      return log('output', rpr(data));
    }));
    setImmediate((function(_this) {
      return function() {
        return input.write("helo\nworld");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.write("!");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.write("#");
      };
    })(this));
    setImmediate((function(_this) {
      return function() {
        return input.end();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path with encodings"] = function(T, done) {
    var encodings, matcher, matchers, path, probe, read_matchers, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path = resolve_temp_path('_new_stream_from_path with encodings.txt');
    probe = "helo world\näöü\n𪉟⿱鹵皿";
    matcher = ['helo', 'world', '𪉟⿱鹵皿'];
    encodings = [null, 'ascii', 'utf-8', 'ucs2', 'base64', 'binary', 'hex', 'buffer'];
    matchers = {};
    write_sample = (function(_this) {
      return function(handler) {
        var input, output;
        input = D.new_stream();
        output = D.new_stream('write', {
          path: path
        });
        input.pipe(D.$show()).pipe(output).pipe(D.$on_finish(handler));
        D.send(input, probe);
        return D.end(input);
      };
    })(this);
    read_matchers = (function(_this) {
      return function(encoding, handler) {
        var input;
        if (encoding === 'buffer') {
          input = (require('fs')).createReadStream(path);
        } else {
          input = (require('fs')).createReadStream(path, {
            encoding: encoding
          });
        }
        input.pipe(D.$collect()).pipe($(function(data) {
          if (data != null) {
            return matchers[encoding] = data;
          }
        })).pipe(D.$on_finish(handler));
        return null;
      };
    })(this);
    read_sample = (function(_this) {
      return function(encoding, use_hint, handler) {
        var input;
        if (use_hint) {
          if (encoding === null) {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream(encoding, {
              path: path
            });
          }
        } else {
          if (encoding === 'buffer') {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream({
              path: path
            }, {
              encoding: encoding
            });
          }
        }
        input.pipe(D.$collect()).pipe($(function(result) {
          if (result != null) {
            if (CND.equals(result, matchers[encoding])) {
              return T.ok(true);
            } else {
              return T.fail("reading file with encoding " + (rpr(encoding)) + ", use_hint " + use_hint + " failed;\nexpected " + (rpr(matchers[encoding])) + "\ngot      " + (rpr(result)));
            }
          }
        })).pipe(D.$on_finish(handler));
        return null;
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var encoding, i, j, k, len, len1, len2, ref, use_hint;
        (yield write_sample(resume));
        for (i = 0, len = encodings.length; i < len; i++) {
          encoding = encodings[i];
          (yield read_matchers(encoding, resume));
        }
        ref = [false, true];
        for (j = 0, len1 = ref.length; j < len1; j++) {
          use_hint = ref[j];
          for (k = 0, len2 = encodings.length; k < len2; k++) {
            encoding = encodings[k];
            (yield read_sample(encoding, use_hint, resume));
          }
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) _new_stream_from_path (raw)"] = function(T, done) {
    var matcher, path, probe, read_sample, step, write_sample;
    step = (require('coffeenode-suspend')).step;
    path = resolve_temp_path('_new_stream_from_path (raw).txt');
    probe = "helo world\näöü\n𪉟⿱鹵皿";
    matcher = [new Buffer([0x68, 0x65, 0x6c, 0x6f, 0x20, 0x77, 0x6f, 0x72, 0x6c, 0x64, 0x0a, 0xc3, 0xa4, 0xc3, 0xb6, 0xc3, 0xbc, 0x0a, 0xf0, 0xaa, 0x89, 0x9f, 0xe2, 0xbf, 0xb1, 0xe9, 0xb9, 0xb5, 0xe7, 0x9a, 0xbf])];
    write_sample = (function(_this) {
      return function(handler) {
        var input, output;
        input = D.new_stream();
        output = D.new_stream('write', {
          path: path
        });
        input.pipe(D.$show()).pipe(output).pipe(D.$on_finish(handler));
        D.send(input, probe);
        return D.end(input);
      };
    })(this);
    read_sample = (function(_this) {
      return function(encoding, use_hint, handler) {
        var input;
        if (use_hint) {
          if (encoding === null) {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream(encoding, {
              path: path
            });
          }
        } else {
          if (encoding === 'buffer') {
            input = D.new_stream({
              path: path
            });
          } else {
            input = D.new_stream({
              path: path
            }, {
              encoding: encoding
            });
          }
        }
        input.pipe(D.$collect()).pipe(D.$show("using " + encoding + ":")).pipe($(function(result) {
          if (result != null) {
            if (CND.equals(result, matcher)) {
              return T.ok(true);
            } else {
              return T.fail("reading file with encoding " + (rpr(encoding)) + ", use_hint " + use_hint + " failed;\nexpected " + (rpr(matcher)) + "\ngot      " + (rpr(result)));
            }
          }
        })).pipe(D.$on_finish(handler));
        return null;
      };
    })(this);
    step((function(_this) {
      return function*(resume) {
        var encoding, i, j, len, len1, ref, ref1, use_hint;
        (yield write_sample(resume));
        ref = [false, true];
        for (i = 0, len = ref.length; i < len; i++) {
          use_hint = ref[i];
          ref1 = [null, 'buffer'];
          for (j = 0, len1 = ref1.length; j < len1; j++) {
            encoding = ref1[j];
            (yield read_sample(encoding, use_hint, resume));
          }
        }
        return done();
      };
    })(this));
    return null;
  };

  this["(v4) stream sigils"] = function(T, done) {
    help(CND.grey('001'), $((function(_this) {
      return function(d) {};
    })(this)));
    help(CND.grey('002'), $((function(_this) {
      return function(d, s) {};
    })(this)));
    help(CND.grey('003'), $((function(_this) {
      return function(d, s, e) {};
    })(this)));
    help();
    help(CND.grey('004'), D.new_stream());
    help(CND.grey('005'), D.new_stream({
      file: '/tmp/foo'
    }));
    help(CND.grey('006'), D.new_stream('lines', {
      file: '/tmp/foo'
    }));
    help();
    help(CND.grey('007'), D._new_stream$write_to_file('/tmp/foo', {
      encoding: 'utf-8'
    }));
    help(CND.grey('008'), D.$bridge(D._new_stream$write_to_file('/tmp/foo', {
      encoding: 'utf-8'
    })));
    help(CND.grey('009'), D.new_stream('write', {
      file: '/tmp/foo'
    }));
    help(CND.grey('010'), D.new_stream('write', 'lines', {
      file: '/tmp/foo'
    }));
    help();
    help(CND.grey('011'), D.new_stream('devnull'));
    help(CND.grey('011'), D.new_stream({
      pipeline: [
        D.new_stream({
          file: '/tmp/foo'
        }), D.new_stream('devnull')
      ]
    }));
    help();
    help(CND.grey('012'), D._new_stream$split_buffer('\n'));
    help(CND.grey('013'), D.$split({
      matcher: '\n',
      encoding: 'buffer'
    }));
    help(CND.grey('014'), D.$split({
      matcher: '\n'
    }));
    help();
    help(CND.grey('015'), D.new_stream({
      pipeline: [
        $((function(_this) {
          return function(data) {
            return null;
          };
        })(this))
      ]
    }));
    help(CND.grey('016'), $((function(_this) {
      return function(data) {
        return null;
      };
    })(this)));
    help(CND.grey('017'), D.$throttle_bytes(100));
    help(CND.grey('018'), D.$sort());
    help(CND.grey('019'), D.$show());
    help(CND.grey('020'), D.$collect());
    help(CND.grey('021'), D.$spread());
    help(CND.grey('022'), D.new_stream({
      pipeline: [
        D.new_stream('read', 'lines', {
          file: '/tmp/input-foo'
        }), D.$sort(), D.new_stream('write', 'lines', {
          file: '/tmp/output-foo'
        })
      ]
    }));
    return done();
  };

  delay = (function(_this) {
    return function(name, f) {
      var dt;
      if (arguments.length === 1) {
        f = name;
        name = null;
      }
      dt = CND.random_integer(10, 200);
      if (name != null) {
        whisper("delay for " + (rpr(name)) + ": " + dt + "ms");
      }
      return setTimeout(f, dt);
    };
  })(this);

  sleep = (function(_this) {
    return function(dt, handler) {
      return setTimeout(handler, dt);
    };
  })(this);

  isa_stream = function(x) {
    return x instanceof (require('stream')).Stream;
  };

  this._prune = function() {
    var name, value;
    for (name in this) {
      value = this[name];
      if (name.startsWith('_')) {
        continue;
      }
      if (indexOf.call(include, name) < 0) {
        delete this[name];
      }
    }
    return null;
  };

  this._main = function() {
    info("temporary files, if any, written to " + temp_home);
    return test(this, {
      'timeout': 3000
    });
  };

  if (module.parent == null) {
    include = ["(v4) stream sigils"];
    this._prune();
    this._main();
  }

}).call(this);

//# sourceMappingURL=tests.js.map
