{
  "version": 3,
  "file": "group-by.js",
  "sourceRoot": "..",
  "sources": [
    "src/group-by.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,IAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,MAAF,EACE,IADF,EAEE,EAFF,CAAA,GAE4B,GAF5B,EAbA;;;EAiBA,KAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAF5B,EAlBA;;;EAsBA,KAAA,GAA4B,MAAA,CAAO,OAAP;;EAC5B,IAAA,GAA4B,MAAA,CAAO,MAAP,EAvB5B;;;EA0BA,IAAC,CAAA,SAAD,GAAa,QAAA,CAAE,OAAF,CAAA,EAAA;;AACb,QAAA,MAAA,EAAA,KAAA,EAAA,QAAA,EAAA;IACE,QAAA,GAAY;IACZ,MAAA,GAAY;IACZ,IAAA,GAAY,KAHd;;IAKE,KAAA,GAAQ,CAAA,CAAA,GAAA;MACN,MAAc,gBAAA,IAAY,MAAM,CAAC,MAAP,GAAgB,EAA1C;AAAA,eAAA;;MACA,IAAA,CAAK,IAAC,CAAA,SAAD,CAAW,QAAX,EAAqB;QAAE,IAAA,EAAM,QAAR;QAAkB,KAAA,EAAO,MAAM;MAA/B,CAArB,CAAL;aACA,MAAA,GAAS;IAHH,EALV;;AAUE,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,KAAL,CAAA,GAAA;AACvB,UAAA;MAAI,IAAA,GAAO;MACP,IAAkB,CAAA,KAAK,IAAvB;AAAA,eAAO,KAAA,CAAA,EAAP;OADJ;;MAGI,IAAG,CAAE,IAAA,GAAO,OAAA,CAAQ,CAAR,CAAT,CAAA,KAAwB,QAA3B;AACE,eAAO,MAAM,CAAC,IAAP,CAAY,CAAZ,EADT;OAHJ;;MAMI,KAAA,CAAA;MACA,QAAA,GAAY;;QACZ,SAAY;;MACZ,MAAM,CAAC,IAAP,CAAY,CAAZ;AACA,aAAO;IAXY,CAAd;EAXI;AA1Bb",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/DATOMS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  copy\n  jr }                    = CND\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  type_of }               = types\n#...........................................................................................................\nfirst                     = Symbol 'first'\nlast                      = Symbol 'last'\n\n#-----------------------------------------------------------------------------------------------------------\n@$group_by = ( grouper ) ->\n  ### TAINT, simplify, generalize, implement as standard transform `$group_by()` ###\n  prv_name  = null\n  buffer    = null\n  send      = null\n  #.........................................................................................................\n  flush = =>\n    return unless buffer? and buffer.length > 0\n    send @new_datom '^group', { name: prv_name, value: buffer[ .. ], }\n    buffer = null\n  #.........................................................................................................\n  return @$ { last, }, ( d, send_ ) =>\n    send = send_\n    return flush() if d is last\n    #.......................................................................................................\n    if ( name = grouper d ) is prv_name\n      return buffer.push d\n    #.......................................................................................................\n    flush()\n    prv_name  = name\n    buffer   ?= []\n    buffer.push d\n    return null\n"
  ]
}