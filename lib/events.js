// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, assign, badge, copy, debug, echo, help, info, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/EVENTS';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({assign, copy, jr} = CND);

  //-----------------------------------------------------------------------------------------------------------
  this.stamp = function(d) {
    /* Set the `stamped` attribute on event to sigil it as processed. Stamped events will not be selected
    by the `select` method unless tag '#stamped' is used. */
    d.stamped = true;
    return d;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_system = function(d) {
    /* Return whether event is a system event (i.e. whether its `sigil` equals `'~'`). */
    return d.key.match(/^[~\[\]]/);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_stamped = function(d) {
    var ref1;
    /* Return whether event is stamped (i.e. already processed). */
    return (ref1 = d.stamped) != null ? ref1 : false;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_event = function(key, value, ...other) {
    var R;
    /* TAINT should validate key */
    /* When `other` contains a key `$`, it is treated as a hint to copy
    system-level attributes; if the value of key `$` is a POD that has itself a
    key `$`, then a copy of that value is used. This allows to write `new_event
    ..., $: d` to copy system-level attributes such as source locations to a new
    event. */
    if (value != null) {
      R = assign({key, value}, ...other);
    } else {
      R = assign({key}, ...other);
    }
    /* TAINT consider to resolve recursively */
    if ((CND.isa_pod(R.$)) && (CND.isa_pod(R.$.$))) {
      R.$ = copy(R.$.$);
    }
    return R;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_single_event = function(key, value, ...other) {
    return this.new_event(`^${key}`, value, ...other);
  };

  this.new_open_event = function(key, value, ...other) {
    return this.new_event(`<${key}`, value, ...other);
  };

  this.new_close_event = function(key, value, ...other) {
    return this.new_event(`>${key}`, value, ...other);
  };

  this.new_system_event = function(key, value, ...other) {
    return this.new_event(`~${key}`, value, ...other);
  };

  this.new_text_event = function(value, ...other) {
    return this.new_single_event('text', value, ...other);
  };

  this.new_end_event = function() {
    return this.new_system_event('end');
  };

  this.new_flush_event = function() {
    return this.new_system_event('flush');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.new_warning = function(ref, message, d, ...other) {
    return this.new_system_event('warning', d, {ref, message}, ...other);
  };

}).call(this);

//# sourceMappingURL=events.js.map
