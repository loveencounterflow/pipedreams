{
  "version": 3,
  "file": "types.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/types.test.coffee"
  ],
  "names": [],
  "mappings": ";AAEA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,OAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,GAAA,EAAA,OAAA,EAAA,IAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAIA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAb5B;;;EAeA,IAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,EAAA,GAA4B,IAAI,CAAC,UAhBjC;;;EAkBA,CAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,OAAR,EAnB5B;;;;EAsBA,KAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,EAGE,OAHF,EAIE,OAJF,CAAA,GAI4B,KAJ5B,EAvBA;;;EAgCA,IAAC,CAAE,cAAF,CAAD,GAAsB,MAAA,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,KAAA,EAAA,CAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA;IAAE,mBAAA,GAAsB;MACpB,CAAC,CAAA,CAAD;MAAI,KAAJ;MAAU,IAAV,CADoB;MAEpB;QAAC;UAAC,KAAA,EAAM;QAAP,CAAD;QAAgB,IAAhB;QAAqB,IAArB;OAFoB;MAGpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,UAAA,EAAW;QAAzB,CAAD;QAAiC,IAAjC;QAAsC,IAAtC;OAHoB;MAIpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,UAAA,EAAW;QAAzB,CAAD;QAAgC,IAAhC;QAAqC,IAArC;OAJoB;MAKpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,QAAA,EAAS,IAAvB;UAA4B,UAAA,EAAW;QAAvC,CAAD;QAA8C,IAA9C;QAAmD,IAAnD;OALoB;MAMpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,MAAA,EAAO;QAArB,CAAD;QAA0B,KAA1B;QAAgC,IAAhC;OANoB;MAOpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,MAAA,EAAO,CAAC,CAAD;QAAG,CAAH;QAAK,CAAL;QAArB,CAAD;QAA+B,IAA/B;QAAoC,IAApC;OAPoB;MAQpB;QAAC;UAAC,KAAA,EAAM,MAAP;UAAc,MAAA,EAAO,CAAC,CAAD;QAAG,CAAH;QAAK,CAAL;QAArB,CAAD;QAA+B,KAA/B;QAAqC,IAArC;OARoB;MAAxB;;IAWE,KAAA,qDAAA;MAAI,CAAE,KAAF,EAAS,OAAT,EAAkB,KAAlB;MACF,MAAM,CAAC,CAAC,OAAF,CAAU,KAAV,EAAiB,OAAjB,EAA0B,KAA1B,EAAiC,QAAA,CAAA,CAAA;AAAG,eAAO,IAAI,OAAJ,CAAY,QAAA,CAAE,OAAF,EAAW,MAAX,CAAA;UAC3D,OAAA,CAAQ,GAAG,CAAC,QAAJ,CAAa,KAAb,CAAR;AACA,iBAAO;QAFoD,CAAZ;MAAV,CAAjC;IADR;IAIA,IAAA,CAAA;AACA,WAAO;EAjBa,EAhCtB;;;EAoDA,IAAC,CAAE,cAAF,CAAD,GAAsB,QAAA,CAAE,CAAF,EAAK,IAAL,CAAA;AACtB,QAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA;;IACE,EAAA,GAAK,EAAE,CAAC,SAAH,CAAa,YAAb,EAA2B,GAA3B;IACL,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,QAAR,EAAkB,MAAlB;IACA,EAAA,GAAK,EAAE,CAAC,KAAH,CAAS,EAAT;IACL,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,QAAR,EAAkB,IAAlB;IACA,CAAC,CAAC,EAAF,CAAK,EAAA,KAAQ,EAAb;IACA,KAAA,CAAM,QAAN,EAAgB,EAAhB;IACA,KAAA,CAAM,QAAN,EAAgB,EAAhB;IACA,EAAA,GAAK,EAAE,CAAC,SAAH,CAAa,YAAb,EAA2B,GAA3B,EAAgC;MAAA,MAAA,EAAQ;IAAR,CAAhC;IACL,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,GAAR,EAAgB,YAAhB;IACA,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,KAAR,EAAgB,GAAhB;IACA,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,MAAR,EAAgB,IAAhB;IACA,EAAA,GAAK,EAAE,CAAC,SAAH,CAAa,QAAb,EAAuB;MAAE,CAAA,EAAG;IAAL,CAAvB;IACL,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,GAAR,EAAgB,QAAhB;IACA,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,KAAR,EAAgB,MAAhB;IACA,CAAC,CAAC,EAAF,CAAK,EAAE,CAAC,CAAR,EAAgB,GAAhB;IACA,IAAA,CAAA;AACA,WAAO;EAlBa,EApDtB;;;EA6EA,IAAO,qBAAP;IACE,IAAA,CAAK,IAAL,EADF;;;EA7EA;;AAAA",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nL                         = require '../select'\nPD                        = require '../..'\n# { $, $async, }            = PD\n#...........................................................................................................\ntypes                     = require '../_types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"isa.pd_datom\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [{},false,null]\n    [{\"key\":\"^foo\"},true,null]\n    [{\"key\":\"^foo\",\"$stamped\":false},true,null]\n    [{\"key\":\"^foo\",\"$stamped\":true},true,null]\n    [{\"key\":\"^foo\",\"$dirty\":true,\"$stamped\":true},true,null]\n    [{\"key\":\"^foo\",\"$vnr\":[]},false,null]\n    [{\"key\":\"^foo\",\"$vnr\":[1,2,3]},true,null]\n    [{\"key\":\"%foo\",\"$vnr\":[1,2,3]},false,null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n      resolve isa.pd_datom probe\n      return null\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"freezing etc\" ] = ( T, done ) ->\n  #.........................................................................................................\n  d1 = PD.new_datom '^something', 123\n  T.eq d1.$stamped, undefined\n  d2 = PD.stamp d1\n  T.eq d2.$stamped, true\n  T.ok d1 isnt d2\n  debug 'µ33444', d1\n  debug 'µ33444', d2\n  d3 = PD.new_datom '^something', 123, $fresh: true\n  T.eq d3.key,    '^something'\n  T.eq d3.value,  123\n  T.eq d3.$fresh, true\n  d4 = PD.new_datom '^other', { x: 123, }\n  T.eq d4.key,    '^other'\n  T.eq d4.value,  undefined\n  T.eq d4.x,      123\n  done()\n  return null\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n\n\n"
  ]
}