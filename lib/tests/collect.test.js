// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $, $as_event, $async, CND, L, PD, badge, debug, echo, f, help, info, jr, rpr, select, stamp, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/TESTS/SELECT';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  //...........................................................................................................
  L = require('../select');

  PD = require('../..');

  ({$, $async, select, stamp} = PD);

  //-----------------------------------------------------------------------------------------------------------
  f = async function(T, method, probe, matcher, errmsg_pattern) {
    var error, result;
    errmsg_pattern = errmsg_pattern != null ? new RegExp(errmsg_pattern) : null;
    try {
      result = (await method());
    } catch (error1) {
      error = error1;
      // throw error
      if ((errmsg_pattern != null) && (errmsg_pattern.test(error.message))) {
        echo(CND.green(jr([probe, null, errmsg_pattern.source])));
        T.ok(true);
      } else {
        echo(CND.indigo("unexpected exception", jr([probe, null, error.message])));
        T.fail(`unexpected exception for probe ${jr(probe)}:\n${error.message}`);
      }
      // return reject "failed with #{error.message}"
      return null;
    }
    if (CND.equals(result, matcher)) {
      T.ok(true);
      echo(CND.lime(jr([probe, result, null])));
    } else {
      T.fail(`neq: result ${jr(result)}, matcher ${jr(matcher)}`);
      echo(CND.red(jr([probe, result, null])));
    }
    // return resolve result
    return result;
  };

  //-----------------------------------------------------------------------------------------------------------
  $as_event = function() {
    return $(function(x, send) {
      var type;
      type = CND.type_of(x);
      if (type === 'number') {
        return send(PD.new_single_event('number', x));
      }
      if ((type === 'text') && (x.startsWith('~'))) {
        return send(PD.new_system_event(x.slice(1)));
      }
      if (type === 'text') {
        return send(PD.new_single_event('text', x));
      }
      throw new Error(`unhandled type ${rpr(type)}`);
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this["$collect 1"] = async function(T, done) {
    var errmsg_pattern, i, len, matcher, method, probe, probes_and_matchers;
    probes_and_matchers = [
      [
        [[],
        [1,
        2,
        3,
        4,
        5,
        6]],
        [
          {
            "key": "^collection",
            "value": [
              {
                "key": "^number",
                "value": 1
              },
              {
                "key": "^number",
                "value": 2
              },
              {
                "key": "^number",
                "value": 3
              },
              {
                "key": "^number",
                "value": 4
              },
              {
                "key": "^number",
                "value": 5
              },
              {
                "key": "^number",
                "value": 6
              }
            ]
          }
        ],
        null
      ],
      [
        [
          [
            {
              "value": true
            }
          ],
          [1,
          2,
          3,
          4,
          5,
          6]
        ],
        [
          {
            "key": "^collection",
            "value": [1,
          2,
          3,
          4,
          5,
          6]
          }
        ],
        null
      ],
      [
        [
          [
            {
              "value": true
            }
          ],
          [1,
          2,
          3,
          "~collect",
          4,
          5,
          6]
        ],
        [
          {
            "key": "^collection",
            "value": [1,
          2,
          3]
          },
          {
            "key": "^collection",
            "value": [4,
          5,
          6]
          }
        ],
        null
      ]
    ];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, errmsg_pattern] = probes_and_matchers[i];
      method = function() {
        return new Promise(function(resolve, reject) {
          var R, inputs, parameters, pipeline;
          R = [];
          pipeline = [];
          [parameters, inputs] = probe;
          pipeline.push(PD.new_value_source(inputs));
          pipeline.push($as_event());
          pipeline.push(PD.$watch(function(d) {
            return whisper(jr(d));
          }));
          pipeline.push(PD.$collect(...parameters));
          pipeline.push(PD.$watch(function(d) {
            return urge(jr(d));
          }));
          pipeline.push(PD.$watch(function(d) {
            if (!select(d, '~')) {
              return R.push(d);
            }
          }));
          pipeline.push(PD.$drain(function() {
            return resolve(R);
          }));
          return PD.pull(...pipeline);
        });
      };
      await f(T, method, probe, matcher, errmsg_pattern);
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    // include = [
    //   "async 1"
    //   "async 1 paramap"
    //   "async 2"
    //   ]
    // @_prune()
    test(this);
  }

}).call(this);

//# sourceMappingURL=collect.test.js.map
