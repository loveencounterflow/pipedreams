{
  "version": 3,
  "file": "circular-pipelines-a.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/circular-pipelines-a.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/CIRCULAR-PIPELINES-A'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPS                        = require 'pipestreams'\n{ $, $async, }            = PS\nassign                    = Object.assign\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\njr                        = JSON.stringify\ncopy                      = ( P... ) -> assign {}, P...\nrprx                      = ( d ) -> \"#{d.sigil} #{d.key}:: #{jr d.value ? null} #{jr d.stamped ? false}\"\n# echo '{ ' + ( ( name for name of require './recycle' ).sort().join '\\n  ' ) + \" } = require './recycle'\"\nPS2                       = require '../experiments/recycle'\n{ select\n  select_all\n  stamp }                 = PS2\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_collatz = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_number_event = ( value, other... ) ->\n    return PS2.new_single_event 'number', value, other...\n\n  #-----------------------------------------------------------------------------------------------------------\n  @is_one  = ( n ) -> n is 1\n  @is_odd  = ( n ) -> n %% 2 isnt 0\n  @is_even = ( n ) -> n %% 2 is 0\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$odd_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '!', 'number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n        ### If data event matches condition, stamp and send it; then, send new data that has been computed\n        from the event: ###\n        send stamp d\n        send PS2.recycling ( @new_number_event ( d.value * 3 + 1 ), from: d.value )\n      else\n        ### If data event doesn't match condition, just send it on; this will implicitly include\n        any `~sync` events: ###\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$even_numbers = ( S ) ->\n    ### Same as `$odd_numbers()`, just simplified, and with a different condition for data selection: ###\n    return $ ( d, send ) =>\n      return send d unless ( select d, '!', 'number' ) and ( @is_even d.value )\n      send stamp d\n      send PS2.recycling @new_number_event ( d.value / 2 ), from: d.value\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$skip_known = ( S ) ->\n    known = new Set()\n    return $ ( d, send ) =>\n      return send d unless select d, '!', 'number'\n      return null if known.has d.value\n      send d\n      known.add d.value\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$terminate = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select_all d, '!', 'number' ) and ( @is_one d.value )\n        send stamp d\n        send PS2.new_end_event()\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$throw_on_illegal = -> PS.$watch ( d ) ->\n    if ( select_all d, '!', 'number' ) and ( type = CND.type_of d.value ) isnt 'number'\n      throw new Error \"found an illegal #{type} in #{rpr d}\"\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$main = ( S ) ->\n    pipeline = []\n    pipeline.push COLLATZ.$skip_known           S\n    # pipeline.push PS.$delay 0.1\n    pipeline.push COLLATZ.$even_numbers         S\n    pipeline.push COLLATZ.$odd_numbers          S\n    pipeline.push COLLATZ.$throw_on_illegal     S\n    # pipeline.push COLLATZ.$terminate            S\n    return PS.pull pipeline...\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\nCOLLATZ = provide_collatz.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n$collect_numbers = ( S, handler ) ->\n  collector = null\n  return $ ( d, send ) ->\n    collector ?= []\n    if select_all d, '~', 'collect'\n      send stamp d\n      send PS2.new_event '!', 'numbers', collector\n      collector = null\n    else if select_all d, '!', 'number'\n      collector.push d.value\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$call_back = ( S, handler ) ->\n  collector = null\n  return PS.$watch ( d ) ->\n    if select d, '!', 'numbers'\n      collector ?= []\n      collector.push d.value\n    else if select d, '~', 'call_back'\n      handler null, collector\n      collector = null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_collatz_pipeline = ( S, handler ) ->\n  S.source    = PS.new_push_source()\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  pipeline.push PS2.$unwrap_recycled()\n  # pipeline.push PS.$watch ( d ) -> help '37744-4', jr d\n  # pipeline.push PS.$delay 0.25\n  pipeline.push PS.$defer()\n  pipeline.push COLLATZ.$main S\n  pipeline.push PS2.$recycle S.source.push\n  pipeline.push $collect_numbers  S\n  pipeline.push $call_back        S, handler\n  pipeline.push PS.$drain -> help 'ok'\n  PS.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) ->\n    if CND.isa_number value then  S.source.push PS2.new_event '!', 'number', value\n    else                          S.source.push value\n  R.end   = -> S.source.end()\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"collatz-conjecture-A\" ] = ( T, done ) ->\n  S                   = {}\n  probes_and_matchers = [\n    [[2,3,4,5,6,7,8,9,10],[[2,1],[3,10,5,16,8,4],[],[],[6],[7,22,11,34,17,52,26,13,40,20],[],[9,28,14],[]]]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, ] in probes_and_matchers\n    handler = ( error, result ) ->\n      throw error if error?\n      help jr [ probe, result, ]\n      T.eq result, matcher\n      done()\n    #.......................................................................................................\n    send = new_collatz_pipeline S, handler\n    for n in probe\n      do ( n ) ->\n        debug '84756', send n\n        send PS2.new_system_event 'collect'\n    send PS2.new_system_event 'call_back'\n  #.........................................................................................................\n  return null\n\n############################################################################################################\nunless module.parent?\n  test @, { timeout: 30000, }\n\n"
  ]
}