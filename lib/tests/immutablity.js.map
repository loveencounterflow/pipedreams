{
  "version": 3,
  "file": "immutablity.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/immutablity.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/IMMUTABILITY'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nL                         = require '../select'\nPD                        = require '../..'\n# { $, $async, }            = PD\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"datoms are frozen\" ] = ( T, done ) ->\n  debug 'µ33341', d = PD.new_datom '^foo', { x: 42, }\n  T.ok Object.isFrozen d\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"PD.set() sets properties, returns copy\" ] = ( T, done ) ->\n  debug 'µ33341', d = PD.new_datom '^foo', { x: 42, }\n  debug 'µ33341', e = PD.set    d, 'x', 108\n  debug 'µ33341', f = PD.unset  d, 'x'\n  T.ok d.x is 42\n  T.ok e.x is 108\n  T.ok not Object.hasOwnProperty f, 'x'\n  T.ok not Object.hasOwnProperty d, '$dirty'\n  T.ok f.$dirty is true\n  T.ok e.$dirty is true\n  T.ok d isnt e\n  T.ok d isnt f\n  T.ok e isnt f\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"PD.set() accepts objects like assign()\" ] = ( T, done ) ->\n  debug 'µ33341', d = PD.new_datom '^foo', { x: 42, }\n  debug 'µ33341', d = PD.set    d, { x: 556, vnr: [ 1, 2, 4, ], }\n  T.ok d.x is 556\n  T.eq d.vnr, [ 1, 2, 4, ]\n  T.ok d.$dirty is true\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"PD.stamp() performs PD.set() with additional arguments\" ] = ( T, done ) ->\n  debug 'µ33341', d = PD.new_datom '^foo', { x: 42, }\n  debug 'µ33341', d = PD.stamp d, { x: 556, vnr: [ 1, 2, 4, ], }\n  T.ok d.x is 556\n  T.eq d.vnr, [ 1, 2, 4, ]\n  T.ok d.$dirty is true\n  T.ok d.$stamped is true\n  done()\n  return null\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"select ignores values other than PODs\" ] = ( T, done ) ->\n#   probes_and_matchers = [\n#     [[ null, '^number',],false]\n#     [[ 123, '^number',],false]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->\n#       [ d, selector, ] = probe\n#       try\n#         resolve PD.select d, selector\n#       catch error\n#         return resolve error.message\n#       return null\n#   done()\n#   return null\n\n\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"selector keypatterns\" ]\n  # test @[ \"select 2\" ]\n\n\n"
  ]
}