{
  "version": 3,
  "file": "collect.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/collect.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/SELECT'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\n{ jr }                    = CND\n#...........................................................................................................\nL                         = require '../select'\nPD                        = require '../..'\n{ $\n  $async\n  select\n  stamp }                 = PD\ndefer                     = setImmediate\n\n#-----------------------------------------------------------------------------------------------------------\n$add_data_region = ->\n  is_first = true\n  return $ { last: null, }, ( d, send ) ->\n    if is_first\n      send PD.new_event '[data'\n      is_first = false\n    if d? then  send d\n    else        send PD.new_event ']data'\n\n#-----------------------------------------------------------------------------------------------------------\n$as_event = -> $ ( x, send ) ->\n  type = CND.type_of x\n  return send x                                 if ( type is 'pod' )\n  return send PD.new_single_event 'number', x   if ( type is 'number' )\n  return send PD.new_system_event x[ 1 .. ]     if ( type is 'text' ) and ( x.startsWith '~' )\n  return send PD.new_single_event 'text', x     if ( type is 'text' )\n  throw new Error \"Âµ93883 unhandled type #{rpr type}\"\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$collect 1\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[null,[1,2,3,4,5,6]],[{\"key\":\"[data\"},{\"key\":\"^collection\",\"value\":[{\"key\":\"^number\",\"value\":1},{\"key\":\"^number\",\"value\":2},{\"key\":\"^number\",\"value\":3},{\"key\":\"^number\",\"value\":4},{\"key\":\"^number\",\"value\":5},{\"key\":\"^number\",\"value\":6}]},{\"key\":\"]data\"}],null]\n    [[{\"value\":true},[1,2,3,4,5,6]],[{\"key\":\"[data\"},{\"key\":\"^collection\",\"value\":[1,2,3,4,5,6]},{\"key\":\"]data\"}],null]\n    [[{\"value\":true},[1,2,3,\"~collect\",4,5,6]],[{\"key\":\"[data\"},{\"key\":\"^collection\",\"value\":[1,2,3]},{\"key\":\"~collect\"},{\"key\":\"^collection\",\"value\":[4,5,6]},{\"key\":\"]data\"}],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n      [ parameters\n        inputs ]    = probe\n      R             = []\n      pipeline      = []\n      pipeline.push PD.new_value_source inputs\n      pipeline.push $add_data_region()\n      pipeline.push $as_event()\n      pipeline.push PD.$watch ( d ) -> whisper jr d\n      pipeline.push PD.$collect parameters\n      pipeline.push PD.$watch ( d ) -> urge jr d\n      pipeline.push PD.$watch ( d ) -> R.push d\n      pipeline.push PD.$drain -> help 'ok'; resolve R\n      PD.pull pipeline...\n  done()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"$collect with callback\" ] = ( T, done ) ->\n  probes_and_matchers = [\n    [[{\"value\":true},[1,2,3,4,5,6]],[[[1,2,3,4,5,6]],[{\"key\":\"[data\"},{\"key\":\"]data\"}]],null]\n    [[{\"value\":true,\"select\":\"number\"},[1,2,3,\"between\",4,5,6]],[[[1,2,3],[4,5,6]],[{\"key\":\"[data\"},{\"key\":\"^text\",\"value\":\"between\"},{\"key\":\"]data\"}]],null]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, ->\n      new Promise ( resolve, reject ) ->\n        [ parameters\n          inputs ]          = probe\n        collections         = []\n        remaining           = []\n        R                   = [ collections, remaining, ]\n        #...................................................................................................\n        parameters.callback = ( collection ) -> collections.push collection\n        drainer             = -> resolve R\n        #...................................................................................................\n        pipeline            = []\n        pipeline.push PD.new_value_source inputs\n        pipeline.push $add_data_region()\n        pipeline.push $as_event()\n        # pipeline.push PD.$show()\n        pipeline.push PD.$collect parameters\n        pipeline.push PD.$watch ( d ) -> remaining.push d\n        pipeline.push PD.$drain drainer\n        PD.pull pipeline...\n  done()\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  test @\n  # test @[ \"$collect with callback\" ]\n  # test @[ \"$collect 1\" ]\n\n"
  ]
}