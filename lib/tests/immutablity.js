// Generated by CoffeeScript 2.5.1
(function() {
  'use strict';
  var CND, L, PD, badge, debug, echo, help, info, jr, rpr, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/TESTS/IMMUTABILITY';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  //...........................................................................................................
  L = require('../select');

  PD = require('../..');

  // { $, $async, }            = PD

  //-----------------------------------------------------------------------------------------------------------
  this["datoms are frozen"] = function(T, done) {
    var d;
    d = PD.new_datom('^foo', {
      x: 42
    });
    T.ok(Object.isFrozen(d));
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["datoms are not frozen (nofreeze)"] = function(T, done) {
    var PDNF;
    PDNF = PD.create_nofreeze();
    T.ok(Object.isFrozen(PD.new_datom('^foo', {
      x: 42
    })));
    T.ok(!Object.isFrozen(PDNF.new_datom('^foo', {
      x: 42
    })));
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() sets properties, returns copy"] = function(T, done) {
    var d, e, f, g;
    d = PD.new_datom('^foo', {
      x: 42
    });
    e = PD.set(d, 'x', 108);
    f = PD.unset(d, 'x');
    g = PD.lets(f, function(d) {
      return d.$fresh = true;
    });
    T.ok(d.x === 42);
    T.ok(e.x === 108);
    T.ok(f.$fresh === void 0);
    T.ok(g.$fresh === true);
    T.ok(!Object.hasOwnProperty(f, 'x'));
    T.ok(!Object.hasOwnProperty(d, '$dirty'));
    T.ok(f.$dirty === true);
    T.ok(e.$dirty === true);
    T.ok(d !== e);
    T.ok(d !== f);
    T.ok(e !== f);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() sets properties, returns copy (nofreeze)"] = function(T, done) {
    var PDNF, d, e, f, g;
    PDNF = PD.create_nofreeze();
    d = PDNF.new_datom('^foo', {
      x: 42
    });
    e = PDNF.set(d, 'x', 108);
    f = PDNF.unset(d, 'x');
    g = PDNF.lets(f, function(d) {
      return d.$fresh = true;
    });
    T.ok(d.x === 42);
    T.ok(e.x === 108);
    T.ok(f.$fresh === void 0);
    T.ok(g.$fresh === true);
    T.ok(!Object.hasOwnProperty(f, 'x'));
    T.ok(!Object.hasOwnProperty(d, '$dirty'));
    T.ok(f.$dirty === true);
    T.ok(e.$dirty === true);
    T.ok(d !== e);
    T.ok(d !== f);
    T.ok(e !== f);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() accepts objects like assign()"] = function(T, done) {
    var d;
    d = PD.new_datom('^foo', {
      x: 42
    });
    d = PD.set(d, {
      x: 556,
      vnr: [1, 2, 4]
    });
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() accepts objects like assign() (nofreeze)"] = function(T, done) {
    var PDNF, d;
    PDNF = PD.create_nofreeze();
    d = PDNF.new_datom('^foo', {
      x: 42
    });
    T.ok(!Object.isFrozen(d));
    d = PDNF.set(d, {
      x: 556,
      vnr: [1, 2, 4]
    });
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.stamp() performs PD.set() with additional arguments"] = function(T, done) {
    var d;
    d = PD.new_datom('^foo', {
      x: 42
    });
    d = PD.stamp(d, {
      x: 556,
      vnr: [1, 2, 4]
    });
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    T.ok(d.$stamped === true);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.stamp() performs PD.set() with additional arguments (nofreeze)"] = function(T, done) {
    var PDNF, d;
    PDNF = PD.create_nofreeze();
    d = PDNF.new_datom('^foo', {
      x: 42
    });
    d = PDNF.stamp(d, {
      x: 556,
      vnr: [1, 2, 4]
    });
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    T.ok(d.$stamped === true);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["select ignores values other than PODs"] = async function(T, done) {
    var error, i, len, matcher, probe, probes_and_matchers;
    probes_and_matchers = [[[null, '^number'], false], [[123, '^number'], false]];
//.........................................................................................................
    for (i = 0, len = probes_and_matchers.length; i < len; i++) {
      [probe, matcher, error] = probes_and_matchers[i];
      await T.perform(probe, matcher, error, function() {
        return new Promise(function(resolve, reject) {
          var d, selector;
          [d, selector] = probe;
          try {
            resolve(PD.select(d, selector));
          } catch (error1) {
            error = error1;
            return resolve(error.message);
          }
          return null;
        });
      });
    }
    done();
    return null;
  };

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

  // test @[ "datoms are not frozen (nofreeze)" ]
// test @[ "PD.set() sets properties, returns copy (nofreeze)" ]
// test @[ "selector keypatterns" ]
// test @[ "select 2" ]

}).call(this);

//# sourceMappingURL=immutablity.js.map
