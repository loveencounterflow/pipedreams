// Generated by CoffeeScript 2.4.1
(function() {
  'use strict';
  var CND, L, PD, badge, debug, echo, help, info, jr, rpr, test, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/TESTS/IMMUTABILITY';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  test = require('guy-test');

  jr = JSON.stringify;

  //...........................................................................................................
  L = require('../select');

  PD = require('../..');

  // { $, $async, }            = PD

  //-----------------------------------------------------------------------------------------------------------
  this["datoms are frozen"] = function(T, done) {
    var d;
    debug('µ33341', d = PD.new_datom('^foo', {
      x: 42
    }));
    T.ok(Object.isFrozen(d));
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() sets properties, returns copy"] = function(T, done) {
    var d, e, f;
    debug('µ33341', d = PD.new_datom('^foo', {
      x: 42
    }));
    debug('µ33341', e = PD.set(d, 'x', 108));
    debug('µ33341', f = PD.unset(d, 'x'));
    T.ok(d.x === 42);
    T.ok(e.x === 108);
    T.ok(!Object.hasOwnProperty(f, 'x'));
    T.ok(!Object.hasOwnProperty(d, '$dirty'));
    T.ok(f.$dirty === true);
    T.ok(e.$dirty === true);
    T.ok(d !== e);
    T.ok(d !== f);
    T.ok(e !== f);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.set() accepts objects like assign()"] = function(T, done) {
    var d;
    debug('µ33341', d = PD.new_datom('^foo', {
      x: 42
    }));
    debug('µ33341', d = PD.set(d, {
      x: 556,
      vnr: [1, 2, 4]
    }));
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    done();
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this["PD.stamp() performs PD.set() with additional arguments"] = function(T, done) {
    var d;
    debug('µ33341', d = PD.new_datom('^foo', {
      x: 42
    }));
    debug('µ33341', d = PD.stamp(d, {
      x: 556,
      vnr: [1, 2, 4]
    }));
    T.ok(d.x === 556);
    T.eq(d.vnr, [1, 2, 4]);
    T.ok(d.$dirty === true);
    T.ok(d.$stamped === true);
    done();
    return null;
  };

  // #-----------------------------------------------------------------------------------------------------------
  // @[ "select ignores values other than PODs" ] = ( T, done ) ->
  //   probes_and_matchers = [
  //     [[ null, '^number',],false]
  //     [[ 123, '^number',],false]
  //     ]
  //   #.........................................................................................................
  //   for [ probe, matcher, error, ] in probes_and_matchers
  //     await T.perform probe, matcher, error, -> return new Promise ( resolve, reject ) ->
  //       [ d, selector, ] = probe
  //       try
  //         resolve PD.select d, selector
  //       catch error
  //         return resolve error.message
  //       return null
  //   done()
  //   return null

  //###########################################################################################################
  if (module.parent == null) {
    test(this);
  }

  // test @[ "selector keypatterns" ]
// test @[ "select 2" ]

}).call(this);

//# sourceMappingURL=immutablity.js.map
