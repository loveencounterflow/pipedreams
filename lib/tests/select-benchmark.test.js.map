{
  "version": 3,
  "file": "select-benchmark.test.js",
  "sourceRoot": "../..",
  "sources": [
    "src/tests/select-benchmark.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n'use strict'\n\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/SELECT-BENCHMARK'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\ntest                      = require 'guy-test'\njr                        = JSON.stringify\n#...........................................................................................................\nPD                        = require '../..'\n{ select }                = PD\n#...........................................................................................................\n{ datoms\n  selectors }             = require './data-for-select-benchmark'\n\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"benchmark\" ] = ( T, done ) ->\n  count     = 0\n  hits      = 0\n  misses    = 0\n  t0        = Date.now()\n  #.........................................................................................................\n  for d in datoms\n    for selector in selectors\n      count++\n      whisper 'µ34411', count if ( count %% 100000 ) is 0\n      if select d, selector\n        hits++\n      else\n        misses++\n  #.........................................................................................................\n  t1        = Date.now()\n  dt        = t1 - t0\n  dts       = dt / 1000\n  ops       = ( count / dt ) * 1000\n  score     = ops / 100000\n  dts_txt   = dts.toFixed 1\n  ops_txt   = ops.toFixed 1\n  score_txt = score.toFixed 3\n  debug 'µ34422', \"#{hits} hits, #{misses} misses\"\n  debug 'µ34422', \"needed #{dts_txt} s for #{count} operations\"\n  debug 'µ34422', \"#{ops_txt} operations per second\"\n  debug 'µ34422', \"score #{score_txt} (bigger is better)\"\n  done()\n  return null\n\n###\nbefore:\n  00:03 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 6889 hits, 243111 misses\n  00:03 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 needed 1.9 s for 250000 operations\n  00:03 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 134336.4 operations per second\n  00:03 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 score 1.343 (bigger is better)\n\nafter:\n  00:00 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 0 hits, 250000 misses\n  00:00 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 needed 0.2 s for 250000 operations\n  00:00 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 1096491.2 operations per second\n  00:00 PIPEDREAMS/TESTS/SELECT-BENCHMARK  ⚙  µ34422 score 10.965 (bigger is better)\n\n###\n\n\n############################################################################################################\nunless module.parent?\n  test @[ \"benchmark\" ], { timeout: 20, }\n\n  f = ->\n    RandExp   = require 'randexp'\n    randomize = require 'randomatic'\n\n    reshape_re_for_randexp = ( re ) ->\n      pattern = re.source.replace /\\?<[^>]+>/g, ''\n      return new RegExp pattern\n\n    generate_keys_from_patterns = ->\n      keys = [\n        '_datom_keypattern'\n        '_selector_keypattern'\n        '_tag_pattern' ]\n      n = 3\n      for key in keys\n        rex = new RandExp reshape_re_for_randexp PD[ key ]\n        for _ in [ 1 .. n ]\n          probe = rex.gen()\n          if ( match = probe.match PD[ key ] )?\n            info key, probe, { match.groups..., }\n          else\n            warn key, probe\n      return null\n\n    generate_keys_or_selectors = ->\n      n = 3\n      for _ in [ 1 .. n ]\n        prefix  = ( randomize '?', 1, { chars: '<>^~[]', } )\n        suffix  = ( randomize 'aA0', length )\n        length  = CND.random_integer 1, 50\n        debug prefix + suffix\n      return null\n\n\n"
  ]
}