{
  "version": 3,
  "file": "datoms.js",
  "sourceRoot": "..",
  "sources": [
    "src/datoms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/DATOMS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  copy\n  jr }                    = CND\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  type_of }               = types\nLFT                       = require 'letsfreezethat'\nLFT_nofreeze              = LFT.nofreeze\n@_copy                    = LFT_nofreeze._copy.bind LFT\n@_nofreeze                = false\n\n#-----------------------------------------------------------------------------------------------------------\n@create_nofreeze = ->\n  R = new @Pipedreams()\n  R._nofreeze = true\n  return R\n\n#-----------------------------------------------------------------------------------------------------------\n@freeze = ( d ) -> if @_nofreeze then LFT_nofreeze.freeze d else LFT.freeze d\n@thaw   = ( d ) -> if @_nofreeze then LFT_nofreeze.thaw   d else LFT.thaw   d\n\n#-----------------------------------------------------------------------------------------------------------\n@lets = ( original, modifier ) ->\n  if @_nofreeze\n    draft = @_copy original\n    if modifier?\n      modifier draft\n      draft.$dirty = true unless draft.$dirty isnt original.dirty\n    return draft\n  #.........................................................................................................\n  draft = @thaw original\n  if modifier?\n    modifier draft\n    draft.$dirty = true unless draft.$dirty isnt original.dirty\n  return @freeze draft\n\n#-----------------------------------------------------------------------------------------------------------\n@set = ( d, k, P... ) ->\n  if isa.text k\n    throw new Error \"Âµ67663 expected 1 value got #{count}\" unless ( count = P.length ) is 1\n    return @lets d, ( d ) -> d[ k ] = P[ 0 ]\n  return @lets d, ( d ) -> d[ k ]  = v for k, v of assign {}, k, P...\n\n#-----------------------------------------------------------------------------------------------------------\n@unset = ( d, k ) -> @lets d, ( d ) -> delete d[ k ]\n\n#-----------------------------------------------------------------------------------------------------------\n@stamp = ( d, P... ) ->\n  ### Set the `$stamped` attribute on datom to sigil it as processed. Stamped datoms will not be selected\n  by the `select` method unless tag '#stamped' is used. ###\n  return @lets d, ( d ) -> assign d, P..., { $stamped: true, }\n\n#-----------------------------------------------------------------------------------------------------------\n@unstamp = ( d ) ->\n  return d unless d.$stamped\n  return @lets d, ( d ) -> delete d.$stamped\n\n#-----------------------------------------------------------------------------------------------------------\n@is_system = ( d ) ->\n  ### Return whether datom is a system datom (i.e. whether its `sigil` equals `'~'`). ###\n  return d.key.match /^[~\\[\\]]/\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped = ( d ) -> d.$stamped ? false ### i.e. already processed? ###\n@is_fresh   = ( d ) -> d.$fresh   ? false ### i.e. created within stream? ###\n@is_dirty   = ( d ) -> d.$dirty   ? false ### i.e. modified? ###\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( key, value, other... ) ->\n  ### TAINT should validate key ###\n  ### When `other` contains a key `$`, it is treated as a hint to copy\n  system-level attributes; if the value of key `$` is a POD that has itself a\n  key `$`, then a copy of that value is used. This allows to write `new_datom\n  ..., $: d` to copy system-level attributes such as source locations to a new\n  datom. ###\n  validate.pd_datom_key key\n  if value?\n    value = { value, } if not isa.object value\n    R     = assign { key, }, value, other...\n  else\n    R     = assign { key, }, other...\n  while ( isa.object R.$ ) and ( isa.object R.$.$ ) then R.$ = copy R.$.$\n  return @freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_single_datom = ( key, value, other...  ) -> @new_datom         \"^#{key}\",  value, other...\n@new_open_datom   = ( key, value, other...  ) -> @new_datom         \"<#{key}\",  value, other...\n@new_close_datom  = ( key, value, other...  ) -> @new_datom         \">#{key}\",  value, other...\n@new_system_datom = ( key, value, other...  ) -> @new_datom         \"~#{key}\",  value, other...\n@new_text_datom   = (      value, other...  ) -> @new_single_datom  'text',     value, other...\n@new_end_datom    =                           -> @new_system_datom  'end'\n# @new_flush_datom    =                           -> @new_system_datom  'flush'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_warning = ( ref, message, d, other...  ) ->\n  @new_system_datom 'warning', d, { ref, message, }, other...\n\n\n\n"
  ]
}