{
  "version": 3,
  "file": "datoms.js",
  "sourceRoot": "..",
  "sources": [
    "src/datoms.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/DATOMS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  copy\n  jr }                    = CND\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n### Set the `$stamped` attribute on datom to sigil it as processed. Stamped datoms will not be selected\nby the `select` method unless tag '#stamped' is used. ###\n@stamp    = ( d ) -> @set   d, '$stamped', true\n@unstamp  = ( d ) -> @unset d, '$stamped'\n\n#-----------------------------------------------------------------------------------------------------------\n@is_system = ( d ) ->\n  ### Return whether datom is a system datom (i.e. whether its `sigil` equals `'~'`). ###\n  return d.key.match /^[~\\[\\]]/\n\n#-----------------------------------------------------------------------------------------------------------\n@is_stamped = ( d ) -> d.$stamped ? false ### i.e. already processed? ###\n@is_fresh   = ( d ) -> d.$fresh   ? false ### i.e. created within stream? ###\n@is_dirty   = ( d ) -> d.$dirty   ? false ### i.e. modified? ###\n\n#-----------------------------------------------------------------------------------------------------------\n@new_datom = ( key, value, other... ) ->\n  ### TAINT should validate key ###\n  ### When `other` contains a key `$`, it is treated as a hint to copy\n  system-level attributes; if the value of key `$` is a POD that has itself a\n  key `$`, then a copy of that value is used. This allows to write `new_datom\n  ..., $: d` to copy system-level attributes such as source locations to a new\n  datom. ###\n  validate.pd_datom_key key\n  if value?\n    value = { value, } if not isa.object value\n    R     = assign { key, }, value, other...\n  else\n    R     = assign { key, }, other...\n  while ( isa.object R.$ ) and ( isa.object R.$.$ ) then R.$ = copy R.$.$\n  return @freeze R\n\n#-----------------------------------------------------------------------------------------------------------\n@new_single_datom = ( key, value, other...  ) -> @new_datom         \"^#{key}\",  value, other...\n@new_open_datom   = ( key, value, other...  ) -> @new_datom         \"<#{key}\",  value, other...\n@new_close_datom  = ( key, value, other...  ) -> @new_datom         \">#{key}\",  value, other...\n@new_system_datom = ( key, value, other...  ) -> @new_datom         \"~#{key}\",  value, other...\n@new_text_datom   = (      value, other...  ) -> @new_single_datom  'text',     value, other...\n@new_end_datom    =                           -> @new_system_datom  'end'\n# @new_flush_datom    =                           -> @new_system_datom  'flush'\n\n#-----------------------------------------------------------------------------------------------------------\n@new_warning = ( ref, message, d, other...  ) ->\n  @new_system_datom 'warning', d, { ref, message, }, other...\n\n\n\n"
  ]
}