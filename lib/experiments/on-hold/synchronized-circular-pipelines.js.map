{
  "version": 3,
  "file": "synchronized-circular-pipelines.js",
  "sourceRoot": "../../..",
  "sources": [
    "src/experiments/on-hold/synchronized-circular-pipelines.coffee"
  ],
  "names": [],
  "mappings": ";AAC4G;EAAA;AAAA,MAAA,CAAA,EAAA,MAAA,EAAA,GAAA,EAAA,EAAA,EAAA,EAAA,EAAA,IAAA,EAAA,EAAA,EAAA,KAAA,EAAA,KAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,GAAA,EAAA,GAAA,EAAA,SAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA,EAAA;;EAC5G,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,GAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZgF;;;EAc5G,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,EAAA,GAA4B,OAAA,CAAQ,IAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,UAAR,EAjBgF;;;EAmB5G,EAAA,GAA4B,OAAA,CAAQ,OAAR;;EAC5B,CAAA,CAAE,CAAF,EACE,MADF,EAEE,MAFF,EAGE,KAHF,CAAA,GAG4B,EAH5B,EApB4G;;;EAyB5G,CAAA,CAAE,EAAF,EACE,IADF,EAEE,MAFF,CAAA,GAE4B,GAF5B,EAzB4G;;;EA6B5G,KAAA,GAA4B,QAAA,CAAE,GAAF,EAAO,CAAP,CAAA;WAAc,UAAA,CAAW,CAAX,EAAc,GAAA,GAAM,IAApB;EAAd;;EAC5B,KAAA,GAA4B;;EAC5B,SAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;AAAQ,QAAA;WAAC,CAAA,CAAA,CAAG,CAAC,CAAC,GAAL,CAAA,GAAA,CAAA,CAAc,EAAA,iCAAa,IAAb,CAAd,EAAA,CAAA,CAAsC,CAAC,CAAC,OAAL,GAAkB,GAAlB,GAA2B,EAA9D,CAAA;EAAT;;EAC5B,CAAA,CAAE,OAAF,CAAA,GAA4B,OAAA,CAAQ,MAAR,CAA5B;;EACA,IAAA,GAA4B,QAAA,CAAE,CAAF,CAAA;WAAS,OAAA,CAAQ,CAAR,EAAW;MAAE,MAAA,EAAQ,IAAV;MAAe,WAAA,EAAa,KAA5B;MAAsC,cAAA,EAAgB,KAAtD;MAAgE,KAAA,EAAO;IAAvE,CAAX;EAAT,EAjCgF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;EAmE5G,IAAO,qBAAP;;IAEE,IAAA,CAAK,IAAC,CAAE,QAAF,CAAN,EAFF;;AAnE4G",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/SYNCHRONIZED-CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPD                        = require '../..'\n{ $\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n{ jr\n  copy\n  assign }                = CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\nrpr_datom                 = ( d ) -> \"#{d.key}:: #{jr d.value ? null} #{if d.stamped then 'S' else ''}\"\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n\n# #-----------------------------------------------------------------------------------------------------------\n# @[ \"synced\" ] = ( T, done ) ->\n#   S                   = {}\n#   probes_and_matchers = [\n#     [[2,3,4,5,6,7,8,9,10],[[2,1],[3,10,5,16,8,4],[],[],[6],[7,22,11,34,17,52,26,13,40,20],[],[9,28,14],[]]]\n#     ]\n#   #.........................................................................................................\n#   for [ probe, matcher, error, ] in probes_and_matchers\n#     await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n#       values      = probe\n#       collector   = []\n#       refillable  = []\n#       bysource    = PD.new_refillable_source refillable, { repeat: 1, show: true, }\n#       pipeline    = []\n#       pipeline.push PD.new_value_source values\n#       pipeline.push PD.$as_type_datoms()\n#       pipeline.push PD.$wye bysource\n#       pipeline.push PD.$watch ( d ) -> echo rpr_datom d\n#       pipeline.push PD.$collect { collector, }\n#       # pipeline.push PD.$watch ( d ) -> stamp d\n#       # pipeline.push PD.$watch ( d ) -> echo rpr_datom d\n#       # pipeline.push PD.$watch ( d ) -> echo xrpr d\n#       pipeline.push PD.$drain ->\n#         help 'ok'\n#         resolve collector\n#       PD.pull pipeline...\n#   #.........................................................................................................\n#   done()\n#   return null\n\n############################################################################################################\nunless module.parent?\n  # test @, { timeout: 30000, }\n  test @[ \"synced\" ]\n\n"
  ]
}