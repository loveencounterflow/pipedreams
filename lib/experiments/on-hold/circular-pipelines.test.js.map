{
  "version": 3,
  "file": "circular-pipelines.test.js",
  "sourceRoot": "../../..",
  "sources": [
    "src/experiments/on-hold/circular-pipelines.test.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/TESTS/CIRCULAR-PIPELINES'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nFS                        = require 'fs'\nOS                        = require 'os'\ntest                      = require 'guy-test'\n#...........................................................................................................\nPD                        = require '../..'\n{ $\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n{ jr\n  copy\n  assign }                = CND\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout f, dts * 1000\ndefer                     = setImmediate\nrprx                      = ( d ) -> \"#{d.sigil} #{d.key}:: #{jr d.value ? null} #{jr d.stamped ? false}\"\n#...........................................................................................................\ntypes                     = require '../_types'\n{ isa\n  validate\n  declare\n  size_of\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\nprovide_collatz = ->\n\n  #-----------------------------------------------------------------------------------------------------------\n  @new_number_datom = ( value, other... ) ->\n    return PD.new_single_datom 'number', { value, }, other...\n\n  #-----------------------------------------------------------------------------------------------------------\n  @is_one  = ( n ) -> n is 1\n  @is_odd  = ( n ) -> n %% 2 isnt 0\n  @is_even = ( n ) -> n %% 2 is 0\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$odd_numbers = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '^number' ) and ( not @is_one d.value ) and ( @is_odd d.value )\n        ### If data datom matches condition, stamp and send it; then, send new data that has been computed\n        from the datom: ###\n        send stamp d\n        send PD.R.recycling ( @new_number_datom ( d.value * 3 + 1 ), from: d.value )\n      else\n        ### If data datom doesn't match condition, just send it on; this will implicitly include\n        any `~sync` datoms: ###\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$even_numbers = ( S ) ->\n    ### Same as `$odd_numbers()`, just simplified, and with a different condition for data selection: ###\n    return $ ( d, send ) =>\n      return send d unless ( select d, '^number' ) and ( @is_even d.value )\n      send stamp d\n      send PD.R.recycling @new_number_datom ( d.value / 2 ), from: d.value\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$skip_known = ( S ) ->\n    known = new Set()\n    return $ ( d, send ) =>\n      return send d unless select d, '^number'\n      return null if known.has d.value\n      send d\n      known.add d.value\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$terminate = ( S ) ->\n    return $ ( d, send ) =>\n      if ( select d, '^number', '#stamped' ) and ( @is_one d.value )\n        send stamp d\n        send PD.new_end_datom()\n      else\n        send d\n      return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$throw_on_illegal = -> PD.$watch ( d ) ->\n    if ( select d, '^number', '#stamped' ) and ( type = type_of d.value ) isnt 'number'\n      throw new Error \"found an illegal #{type} in #{rpr d}\"\n    return null\n\n  #-----------------------------------------------------------------------------------------------------------\n  @$main = ( S ) ->\n    pipeline = []\n    pipeline.push COLLATZ.$skip_known           S\n    # pipeline.push PD.$delay 0.1\n    pipeline.push COLLATZ.$even_numbers         S\n    pipeline.push COLLATZ.$odd_numbers          S\n    pipeline.push COLLATZ.$throw_on_illegal     S\n    # pipeline.push COLLATZ.$terminate            S\n    return PD.pull pipeline...\n\n  #-----------------------------------------------------------------------------------------------------------\n  return @\nCOLLATZ = provide_collatz.apply {}\n\n#-----------------------------------------------------------------------------------------------------------\n$collect_numbers = ( S ) ->\n  collector = null\n  return $ ( d, send ) ->\n    collector ?= []\n    if select d, '~collect' #, '#stamped'\n      send stamp d\n      send PD.new_single_datom 'numbers', collector\n      collector = null\n    else if select d, '^number', '#stamped'\n      collector.push d.value\n    else\n      send d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n$call_back = ( S, callback ) ->\n  collector       = null\n  handler_called  = false\n  return $ { last: null, }, ( d, send ) ->\n    if d?\n      if select d, '^numbers'\n        collector ?= []\n        collector.push d.value\n      else if select d, '~call_back'\n        handler_called  = true\n        callback collector ? []\n        collector       = null\n    else\n      if collector? or not handler_called\n        handler_called  = true\n        callback collector ? []\n        collector       = null\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nnew_collatz_pipeline = ( S, callback ) ->\n  S.source    = PD.new_push_source()\n  pipeline    = []\n  #.........................................................................................................\n  pipeline.push S.source\n  pipeline.push PD.R.$unwrap_recycled()\n  # pipeline.push PD.$watch ( d ) -> help '37744-4', jr d\n  # pipeline.push PD.$delay 0.25\n  pipeline.push PD.$defer()\n  pipeline.push COLLATZ.$main     S\n  pipeline.push PD.R.$recycle     S.source.send\n  pipeline.push PD.$show()\n  pipeline.push $collect_numbers  S\n  pipeline.push $call_back        S, callback\n  pipeline.push PD.$drain -> help 'ok'\n  PD.pull pipeline...\n  #.........................................................................................................\n  R       = ( value ) ->\n    if CND.isa_number value then  S.source.send PD.new_single_datom 'number', value\n    else                          S.source.send value\n  R.end   = -> S.source.end()\n  return R\n\n\n#-----------------------------------------------------------------------------------------------------------\n@[ \"collatz-conjecture\" ] = ( T, done ) ->\n  S                   = {}\n  probes_and_matchers = [\n    [[2,3,4,5,6,7,8,9,10],[[2,1],[3,10,5,16,8,4],[],[],[6],[7,22,11,34,17,52,26,13,40,20],[],[9,28,14],[]]]\n    ]\n  #.........................................................................................................\n  for [ probe, matcher, error, ] in probes_and_matchers\n    await T.perform probe, matcher, error, -> new Promise ( resolve, reject ) ->\n      callback = ( result ) ->\n        help jr [ probe, result, ]\n        # T.eq result, matcher\n        resolve result\n      #.......................................................................................................\n      send = new_collatz_pipeline S, callback\n      send PD.new_datom '[data'\n      for n in probe\n        do ( n ) ->\n          send n\n          send PD.new_system_datom 'collect', null, $: { n, }\n      send PD.new_datom ']data'\n      send PD.new_system_datom 'call_back'\n  #.........................................................................................................\n  done()\n  return null\n\n############################################################################################################\nunless module.parent?\n  # test @, { timeout: 30000, }\n  test @[ \"collatz-conjecture\" ]\n\n"
  ]
}