{
  "version": 3,
  "file": "wye-demos.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/wye-demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/VARIOUS-PULL-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPD                        = require '../..'\n{ $\n  select\n  $async }                = PD\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n\n# https://pull-stream.github.io/#pull-through\n# nope https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)\n\n# https://github.com/pull-stream/pull-cont\n# https://github.com/pull-stream/pull-defer\n# https://github.com/scrapjs/pull-imux\n\n\n#-----------------------------------------------------------------------------------------------------------\n$as_type_datoms = ->\n  ### Given raw data events (RDEs), turn them into signleton datoms, using the results of `CND.type_of`\n  for the keys, so `'xy'` turns into `{ key: 'text', value: 'xy', }`, and `42` turns into `{ key: 'number',\n  value: 42, }`. ###\n  return $ ( d, send ) =>\n    return send d if CND.isa_pod d\n    type = CND.type_of d\n    send PD.new_event \"^#{type}\", d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_3 = ->\n  #.........................................................................................................\n  get_transform = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PD.new_push_source()\n    byline    = []\n    # byline.push PD.new_value_source \"JUST A FEW WORDS\".split /\\s/\n    byline.push bysource\n    byline.push $ { last: null, }, ( d, send ) ->\n      debug CND.red '22922', jr d\n      send d\n    # byline.push PD.$watch ( d ) -> whisper 'bystream', jr d\n    byline.push $as_type_datoms()\n    bystream = PD.pull byline...\n    #.......................................................................................................\n    mainline = []\n    # mainline.push PD.new_value_source \"just a few words\".split /\\s/\n    mainline.push PD.new_random_async_value_source \"just a few words\".split /\\s/\n    # mainline.push PD.$wye PD.new_value_source \"JUST A FEW WORDS\".split /\\s/\n    mainline.push PD.$wye bystream\n    mainline.push $as_type_datoms()\n    # mainline.push $ { last: null, }, ( d, send ) ->\n    #   debug CND.plum '10109', d\n    #   send PD.new_event '~end' unless d?\n    #   send d\n    mainline.push PD.$show title: 'confluence'\n    mainline.push $async { last: null, }, ( d, send, done ) ->\n      debug CND.lime '33450', d\n      if d?\n        if ( select d, '^text' )\n          defer -> bysource.send d.value.length\n          send d\n          done()\n        else\n          send d\n          done()\n      else\n        defer -> bysource.send null\n        # bysource.end()\n        send d\n        done()\n      return null\n    mainline.push PD.$collect()\n    mainline.push PD.$show title: 'mainstream'\n    mainline.push PD.$drain -> help 'ok'; resolve()\n    PD.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_4 = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PD.new_push_source()\n    byline    = []\n    byline.push bysource\n    byline.push PD.$watch ( d ) -> whisper 'bystream', jr d\n    bystream = PD.pull byline...\n    #.......................................................................................................\n    mainline = []\n    mainline.push PD.new_value_source [ 5, 7, ]\n    mainline.push PD.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PD.$wye bystream\n    mainline.push PD.$show title: 'confluence'\n    mainline.push $ ( d, send ) ->\n      if d < 1.001\n        send null\n      else\n        send d\n        bysource.send Math.sqrt d\n    mainline.push PD.$map ( d ) -> d.toFixed 3\n    mainline.push PD.$collect()\n    mainline.push PD.$show title: 'mainstream'\n    mainline.push PD.$drain -> help 'ok'; resolve()\n    PD.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  debug 'finish'\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  do -> await wye_3()\n  # wye_4()\n\n\n\n\n\n"
  ]
}