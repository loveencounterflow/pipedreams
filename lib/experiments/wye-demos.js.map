{
  "version": 3,
  "file": "wye-demos.js",
  "sourceRoot": "../..",
  "sources": [
    "src/experiments/wye-demos.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPESTREAMS/EXPERIMENTS/VARIOUS-PULL-STREAMS'\nlog                       = CND.get_logger 'plain',     badge\ninfo                      = CND.get_logger 'info',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\nalert                     = CND.get_logger 'alert',     badge\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\nhelp                      = CND.get_logger 'help',      badge\nurge                      = CND.get_logger 'urge',      badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPD                        = require '../..'\n{ $\n  select\n  $async }                = PD\n#...........................................................................................................\nafter                     = ( dts, f ) -> setTimeout  f, dts * 1000\nevery                     = ( dts, f ) -> setInterval f, dts * 1000\ndefer                     = setImmediate\n{ jr\n  is_empty }              = CND\n{ inspect, }              = require 'util'\nxrpr                      = ( x ) -> inspect x, { colors: yes, breakLength: Infinity, maxArrayLength: Infinity, depth: Infinity, }\n\n# https://pull-stream.github.io/#pull-through\n# nope https://github.com/dominictarr/pull-flow (https://github.com/pull-stream/pull-stream/issues/4)\n\n# https://github.com/pull-stream/pull-cont\n# https://github.com/pull-stream/pull-defer\n# https://github.com/scrapjs/pull-imux\n\n\n#-----------------------------------------------------------------------------------------------------------\n$as_type_datoms = ->\n  ### Given raw data events (RDEs), turn them into singleton datoms, using the results of `CND.type_of`\n  for the keys, so `'xy'` turns into `{ key: 'text', value: 'xy', }`, and `42` turns into `{ key: 'number',\n  value: 42, }`. ###\n  return $ ( d, send ) =>\n    debug '29209', d, CND.type_of d\n    return send d if CND.isa_pod d\n    type = CND.type_of d\n    if type is 'text' and d.startsWith '~'\n      send PD.new_datom d, null\n    else\n      send PD.new_datom \"^#{type}\", d\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_3 = ->\n  #.........................................................................................................\n  provide_$end = ->\n    @$end = ->\n      # a sink function: accept a source...\n      return ( read ) ->\n        # ...but return another source!\n        return ( abort, handler ) ->\n          read abort, ( error, data ) ->\n            # if the stream has ended, pass that on.\n            return handler error if error\n            debug @symbols.end\n            return handler true if data is @symbols.end\n            handler null, data\n            return null\n          return null\n        return null\n  provide_$end.apply PD\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PD.new_push_source()\n    byline    = []\n    # byline.push PD.new_value_source \"JUST A FEW WORDS\".split /\\s/\n    byline.push bysource\n    byline.push $ { last: null, }, ( d, send ) ->\n      debug CND.red '22922', jr d\n      send d\n    # byline.push PD.$watch ( d ) -> whisper 'bystream', jr d\n    byline.push $as_type_datoms()\n    bystream = PD.pull byline...\n    #.......................................................................................................\n    mainline = []\n    mainline.push PD.new_random_async_value_source \"just a few words ~stop\".split /\\s+/\n    mainline.push $as_type_datoms()\n    mainline.push $ ( d, send ) -> send if ( select d, '~stop' ) then PD.symbols.end else d\n    mainline.push PD.$wye bystream\n    # mainline.push $ { last: null, }, ( d, send ) ->\n    #   debug CND.plum '10109', d\n    #   send PD.new_datom '~end' unless d?\n    #   send d\n    mainline.push $async { last: null, }, ( d, send, done ) ->\n      echo '33450', xrpr d\n      if d?\n        if ( select d, '^text' )\n          defer -> bysource.send d.value.length\n          send d\n          done()\n        else\n          send d\n          done()\n      else\n        defer -> bysource.send null\n        # bysource.end()\n        send d\n        done()\n      return null\n    mainline.push PD.$collect()\n    mainline.push PD.$show title: 'mainstream'\n    mainline.push PD.$drain -> help 'ok'; resolve()\n    PD.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  return null\n\n#-----------------------------------------------------------------------------------------------------------\nwye_4 = ->\n  #.........................................................................................................\n  demo = -> new Promise ( resolve ) ->\n    bysource  = PD.new_push_source()\n    byline    = []\n    byline.push bysource\n    byline.push PD.$watch ( d ) -> whisper 'bystream', jr d\n    bystream = PD.pull byline...\n    #.......................................................................................................\n    mainline = []\n    mainline.push PD.new_value_source [ 5, 7, ]\n    mainline.push PD.$watch ( d ) -> whisper 'mainstream', jr d\n    mainline.push PD.$wye bystream\n    mainline.push PD.$show title: 'confluence'\n    mainline.push $ ( d, send ) ->\n      if d < 1.001\n        send null\n      else\n        send d\n        bysource.send Math.sqrt d\n    mainline.push PD.$map ( d ) -> d.toFixed 3\n    mainline.push PD.$collect()\n    mainline.push PD.$show title: 'mainstream'\n    mainline.push PD.$drain -> help 'ok'; resolve()\n    PD.pull mainline...\n    #.......................................................................................................\n    return null\n  await demo()\n  debug 'finish'\n  return null\n\n\n#-----------------------------------------------------------------------------------------------------------\n@wye_with_duplex_pair = ->\n  new_duplex_pair     = require 'pull-pair/duplex'\n  [ client, server, ] = new_duplex_pair()\n  clientline          = []\n  serverline          = []\n  refillable          = []\n  extra_stream        = PS.new_refillable_source refillable, { repeat: 10, show: true, }\n  # extra_stream        = PS.new_push_source()\n  #.........................................................................................................\n  # pipe the second duplex stream back to itself.\n  serverline.push PS.new_merged_source server, extra_stream\n  # serverline.push client\n  serverline.push PS.$defer()\n  serverline.push PS.$watch ( d ) -> urge d\n  serverline.push $ ( d, send ) -> send d * 10\n  serverline.push server\n  PS.pull serverline...\n  #.........................................................................................................\n  clientline.push PS.new_value_source [ 1, 2, 3, ]\n  # clientline.push PS.$defer()\n  clientline.push client\n  # clientline.push PS.$watch ( d ) -> extra_stream.send d if d < 30\n  clientline.push PS.$watch ( d ) -> refillable.push d if d < 30\n  clientline.push PS.$collect()\n  clientline.push PS.$show()\n  # clientline.push client\n  clientline.push PS.$drain()\n  PS.pull clientline...\n  #.........................................................................................................\n  return null\n\n\n\n############################################################################################################\nunless module.parent?\n  do ->\n    await wye_3()\n    # await wye_4()\n  # wye_4()\n\n\n\n\n\n"
  ]
}