// Generated by CoffeeScript 1.10.0
(function() {
  var ASYNC, BNP, ME, TRM, alert, badge, debug, echo, help, info, log, rpr, run, urge, warn, whisper,
    slice = [].slice;

  TRM = require('coffeenode-trm');

  rpr = TRM.rpr.bind(TRM);

  badge = 'TEST';

  log = TRM.get_logger('plain', badge);

  info = TRM.get_logger('info', badge);

  whisper = TRM.get_logger('whisper', badge);

  alert = TRM.get_logger('alert', badge);

  debug = TRM.get_logger('debug', badge);

  warn = TRM.get_logger('warn', badge);

  help = TRM.get_logger('help', badge);

  urge = TRM.get_logger('urge', badge);

  echo = TRM.echo.bind(TRM);

  BNP = require('coffeenode-bitsnpieces');

  ASYNC = require('async');

  ME = this;

  this.get_caller_description = function(delta) {
    var locator;
    if (delta == null) {
      delta = 1;
    }
    locator = (BNP.get_caller_locators(delta + 1))[0];
    return BNP.caller_description_from_locator(locator);
  };

  module.exports = run = function(x) {
    var T, check_count, error_handler, fail_count, failures, pass_count, report, supply_caller_to_error, test_count;
    T = {};
    test_count = 0;
    check_count = 0;
    pass_count = 0;
    fail_count = 0;
    failures = {};
    error_handler = (function(_this) {
      return function(error) {

        /* NB `entry[ 'name' ]` should normally match `entry[ 'caller' ][ 'function-name' ]`
        and `entry[ 'caller' ][ 'method-name' ]`
         */
        var caller, entry, target;
        caller = error['caller'];
        entry = {
          'name': name,
          'message': error['message'],
          'caller': caller
        };
        if (caller == null) {
          fail_count += 1;
        }
        target = failures[name] != null ? failures[name] : failures[name] = [];
        return target.push([entry]);
      };
    })(this);
    supply_caller_to_error = (function(_this) {
      return function(delta, error) {
        if (error == null) {
          error = null;
        }
        if (error == null) {
          delta += +1;
        }
        error['caller'] = BNP.get_caller_info(delta, error, true);
        fail_count += 1;
        return error;
      };
    })(this);
    process.on('uncaughtException', function(error) {

      /* TAINT code duplication */
      if (error['caller'] == null) {
        supply_caller_to_error(0, error);
      }
      debug('©ZBBpY', error);
      return error_handler(error);
    });
    T.eq = function() {
      var P, error;
      P = 1 <= arguments.length ? slice.call(arguments, 0) : [];

      /* Tests whether all arguments are pairwise and deeply equal. Uses CoffeeNode Bits'n'Pieces' `equal`
      for testing as (1) Node's `assert` distinguishes—unnecessarily—between shallow and deep equality, and,
      worse, [`assert.equal` and `assert.deepEqual` are broken](https://github.com/joyent/node/issues/7161),
      as they use JavaScript's broken `==` equality operator instead of `===`.
       */
      check_count += 1;
      if (BNP.equals.apply(BNP, P)) {
        return pass_count += 1;
      } else {
        error = new Error("not equal: " + (rpr(P)));
        throw supply_caller_to_error(1, error);
      }
    };
    T.rsvp = function(callback) {
      return (function(_this) {
        return function() {
          var P, error;
          error = arguments[0], P = 2 <= arguments.length ? slice.call(arguments, 1) : [];

          /* TAINT need better error handling */
          if (error != null) {
            throw error;
          }
          return callback.apply(null, P);
        };
      })(this);
    };
    T.ok = function(result) {

      /* Tests whether `result` is strictly `true` (not only true-ish). */
      var error;
      check_count += 1;
      if (result === true) {
        return pass_count += 1;
      } else {
        fail_count += 1;
        error = new Error("not OK: " + (rpr(result)));
        error['caller'] = ME.get_caller_description(1);
        debug('©zYIQA', error);
        throw error;
      }
    };
    T.fail = function(message) {
      throw new Error(message);
    };
    run = function() {
      var arity, error, error1, error2, name, results, test;
      results = [];
      for (name in x) {
        test = x[name];
        test = test.bind(x);
        test_count += 1;
        switch (arity = test.length) {
          case 1:
            try {
              results.push(test(T));
            } catch (error1) {
              error = error1;

              /* TAINT code duplication */
              if (error['caller'] == null) {
                supply_caller_to_error(0, error);
              }
              results.push(error_handler(error));
            }
            break;
          case 2:

            /* TAINT need ASYNC or similar to manage callbacks in concert with synhronous code */
            try {
              results.push(test(T, error_handler));
            } catch (error2) {
              error = error2;

              /* TAINT code duplication */
              if (error['caller'] == null) {
                supply_caller_to_error(0, error);
              }
              results.push(error_handler(error));
            }
            break;
          default:
            throw new Error("expected test with 1 or 2 arguments, got one with " + arity);
        }
      }
      return results;
    };
    report = function() {
      info('test_count:   ', test_count);
      info('check_count:  ', check_count);
      info('pass_count:   ', pass_count);
      info('fail_count:   ', fail_count);
      return info('failures:     ', failures);
    };

    /* TANT `report` must only run on callback from `run` because async */
    run();
    return report();
  };

}).call(this);
