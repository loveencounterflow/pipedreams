{
  "version": 3,
  "file": "wrapsignals.js",
  "sourceRoot": "..",
  "sources": [
    "src/wrapsignals.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,IAAA,EAAA,MAAA,EAAA,KAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,EAAA,EAAA,SAAA,EAAA,YAAA,EAAA,GAAA,EAAA,OAAA,EAAA,KAAA,EAAA,IAAA,EAAA,QAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd,EAZ5B;;;EAcA,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,IAAA,GAA4B,OAAA,CAAQ,MAAR;;EAC5B,SAAA,GAA4B,OAAA,CAAQ,WAAR;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B;;EAEA,YAAA,GAA4B,MAAM,CAAC,GAAP,CAAW,UAAX;;EAC5B,CAAA,GAA4B,KApB5B;;;EAsBA,KAAA,GAA4B,OAAA,CAAQ,UAAR;;EAC5B,CAAA,CAAE,GAAF,EACE,QADF,EAEE,OAFF,CAAA,GAE4B,KAF5B,EAvBA;;;EA4BA,IAAC,CAAA,YAAD,GAAgB,QAAA,CAAA,CAAA,EAAA;;;;;;;;;;;;;;;;;;;;;AAqBd,QAAA,QAAA,EAAA,IAAA,EAAA;IAAA,QAAA,GAAY;IACZ,KAAA,GAAY;IACZ,IAAA,GAAY,MAAA,CAAO,MAAP,EAFZ;;AAIA,WAAO,IAAC,CAAA,CAAD,CAAG,CAAE,IAAF,CAAH,EAAc,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA,EAAA;;MAEnB,IAAG,CAAA,KAAK,IAAR;QACE,IAAG,aAAH;UACE,IAA8C,QAA9C;YAAA,KAAA,GAAgB,IAAC,CAAA,GAAD,CAAK,KAAL,EAAY,QAAZ,EAAsB,IAAtB,EAAhB;;UACA,KAAA,GAAgB,IAAC,CAAA,GAAD,CAAK,KAAL,EAAY,OAAZ,EAAsB,IAAtB;UAChB,IAAA,CAAK,KAAL,EAHF;SADF;OAAA,MAAA;;QAOE,IAAG,aAAH;UACE,IAAA,CAAK,KAAL,EADF;;QAEA,KAAA,GAAmB,CAAE,GAAG,CAAC,MAAJ,CAAW,CAAX,CAAF,CAAH,GAAyB,CAAzB,GAAgC,IAAC,CAAA,MAAD,CAAQ;UAAE,KAAA,EAAO,CAAT;UAAY,GAAA,EAAK;QAAjB,CAAR;QAChD,IAA8C,QAA9C;UAAA,KAAA,GAAgB,IAAC,CAAA,GAAD,CAAK,KAAL,EAAY,QAAZ,EAAsB,IAAtB,EAAhB;;QACA,QAAA,GAAgB,MAXlB;OAAA;;AAaA,aAAO;IAfY,CAAd;EAzBO;AA5BhB",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/WRAPSIGNALS'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n#...........................................................................................................\nPATH                      = require 'path'\nglob                      = require 'glob'\nminimatch                 = require 'minimatch'\n{ assign\n  jr }                    = CND\noverride_sym              = Symbol.for 'override'\nL                         = @\n#...........................................................................................................\ntypes                     = require './_types'\n{ isa\n  validate\n  type_of }               = types\n\n#-----------------------------------------------------------------------------------------------------------\n@$wrapsignals = ->\n  ###\n\n  ```\n  {\"value\":1,\"$first\":true,\"$last\":true}\n  ```\n\n  ```\n  {\"value\":1,\"$first\":true}\n  {\"value\":2,\"$last\":true}\n  ```\n\n  ```\n  {\"value\":1,\"$first\":true}\n  {\"value\":2}\n  {\"value\":3}\n  {\"value\":4}\n  {\"value\":5,\"$last\":true}\n  ```\n\n  ###\n  is_first  = true\n  prv_d     = null\n  last      = Symbol 'last'\n  #.........................................................................................................\n  return @$ { last, }, ( d, send ) =>\n    #.......................................................................................................\n    if d is last\n      if prv_d?\n        prv_d         = @set prv_d, '$first', true if is_first\n        prv_d         = @set prv_d, '$last',  true\n        send prv_d\n    #.......................................................................................................\n    else\n      if prv_d?\n        send prv_d\n      prv_d         = if ( isa.object d ) then d else @freeze { value: d, key: '^value', }\n      prv_d         = @set prv_d, '$first', true if is_first\n      is_first      = false\n    #.......................................................................................................\n    return null\n\n\n\n\n"
  ]
}