// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, L, PATH, acquire, assign, badge, debug, echo, glob, help, info, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  glob = require('globby');

  ({assign, jr} = CND);

  L = this;

  //-----------------------------------------------------------------------------------------------------------
  acquire = function(target, patterns) {
    var i, key, len, method, module, path, paths, settings, value;
    settings = {
      cwd: PATH.join(__dirname),
      deep: false,
      absolute: true
    };
    paths = glob.sync(patterns, settings);
//.........................................................................................................
    for (i = 0, len = paths.length; i < len; i++) {
      path = paths[i];
      module = require(path);
      for (key in module) {
        value = module[key];
        if (L[key] != null) {
          // urge '23233', "#{path}##{key}"
          throw new Error(`duplicate key ${rpr(key)}`);
        }
        if (CND.isa_function(value)) {
          module[key] = method = value.bind(module);
        }
        if (!key.startsWith('_')) {
          L[key] = method;
        }
      }
    }
    return null;
  };

  //###########################################################################################################
  /* Gather methods from submodules, bind all methods to respective submodule, reflect public names into
  main module. */
  acquire(L, ['*.js', '!main.js', '!_*', '!recycle.js']);

  acquire((L.R = {}), 'recycle.js');

}).call(this);

//# sourceMappingURL=main.js.map
