// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var CND, L, PATH, acquire_path, acquire_patterns, assign, badge, debug, echo, glob, help, info, is_bound, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/MAIN';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PATH = require('path');

  glob = require('globby');

  ({assign, jr} = CND);

  L = this;

  //-----------------------------------------------------------------------------------------------------------
  is_bound = function(f) {
    return ((rpr(f)).match(/^\[Function: (?:bound )+\]$/)) != null;
  };

  //-----------------------------------------------------------------------------------------------------------
  acquire_patterns = function(target, patterns) {
    var i, len, path, paths, settings;
    settings = {
      cwd: PATH.join(__dirname),
      deep: false,
      absolute: true
    };
    paths = glob.sync(patterns, settings);
//.........................................................................................................
    for (i = 0, len = paths.length; i < len; i++) {
      path = paths[i];
      acquire_path(target, path);
    }
    return null;
  };

  //-----------------------------------------------------------------------------------------------------------
  acquire_path = function(target, path) {
    var key, module, value;
    module = require(path);
    for (key in module) {
      value = module[key];
      if (L[key] != null) {
        // urge '23233', "#{path}##{key}", value
        throw new Error(`duplicate key ${rpr(key)}`);
      }
      if ((CND.isa_function(value)) && !is_bound(value)) {
        module[key] = value.bind(module);
      }
      if (!key.startsWith('_')) {
        target[key] = module[key];
      }
    }
    // help '23233', "#{path}##{key}", target[ key ]
    return null;
  };

  //###########################################################################################################
  /* Gather methods from submodules, bind all methods to respective submodule, reflect public names into
  main module. */
  L.R = {};

  acquire_path(L, 'pipestreams');

  acquire_patterns(L, ['*.js', '!main.js', '!_*', '!recycle.js']);

  acquire_patterns(L.R, 'recycle.js');

  // debug '37129', ( require 'pipestreams' ).$
// debug '37373', jr Object.keys L
// urge '37312', L.$, CND.isa_function L.$
// urge '37312', L.$split_tsv, CND.isa_function L.$split_tsv
// urge '37312', jr Object.keys $, CND.isa_function $

}).call(this);

//# sourceMappingURL=main.js.map
