// Generated by CoffeeScript 1.8.0
(function() {
  var CND, DS, ES, TYPES, alert, badge, debug, echo, help, info, log, rpr, through2, urge, warn, whisper,
    __slice = [].slice;

  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS2';

  log = CND.get_logger('plain', badge);

  info = CND.get_logger('info', badge);

  whisper = CND.get_logger('whisper', badge);

  alert = CND.get_logger('alert', badge);

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  echo = CND.echo.bind(CND);


  /* https://github.com/rvagg/through2 */

  through2 = require('through2');

  TYPES = require('coffeenode-types');

  DS = require('./densort');


  /* https://github.com/dominictarr/event-stream */

  ES = require('event-stream');

  this.$split = ES.split.bind(ES);

  this.remit = function(method) {
    var arity, cache, get_send, on_data, on_end, send;
    send = null;
    cache = null;
    on_end = null;
    get_send = function(self) {
      var R;
      R = function(data) {
        return self.emit('data', data);
      };
      R.error = function(error) {
        return self.emit('error', error);
      };
      R.end = function() {
        return self.emit('end');
      };
      return R;
    };
    switch (arity = method.length) {
      case 2:
        on_data = function(data) {
          if (send == null) {
            send = get_send(this);
          }
          return method(data, send);
        };
        break;
      case 3:
        cache = [];
        on_data = function(data) {
          var _ref;
          if (cache.length === 0) {
            cache[0] = data;
            return;
          }
          if (send == null) {
            send = get_send(this);
          }
          _ref = [data, cache[0]], cache[0] = _ref[0], data = _ref[1];
          return method(data, send, null);
        };
        on_end = function() {
          var data, end;
          if (send == null) {
            send = get_send(this);
          }
          end = (function(_this) {
            return function() {
              return _this.emit('end');
            };
          })(this);
          if (cache.length === 0) {
            data = null;
          } else {
            data = cache[0];
            cache.length = 0;
          }
          return method(data, send, end);
        };
        break;
      default:
        throw new Error("expected a method with an arity of 2 or 3, got one with an arity of " + arity);
    }
    return ES.through(on_data, on_end);
  };

  this.$skip_first = function(n) {
    var count;
    if (n == null) {
      n = 1;
    }
    count = 0;
    return this.remit(function(data, send) {
      count += +1;
      if (count > n) {
        return send(data);
      }
    });
  };

  this.create_throughstream = function() {
    var P, R;
    P = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
    R = through2.obj.apply(through2, P);
    R.setMaxListeners(0);
    return R;
  };

  this.$count = function(label, handler) {
    var count;
    if (handler == null) {
      handler = null;
    }
    count = 0;
    return this.remit((function(_this) {
      return function(data, send, end) {
        if (data != null) {
          count += 1;
        }
        if (end == null) {
          return send.done(data);
        } else {
          if (handler != null) {
            handler(null, count);
          } else {
            info("encountered " + count + " " + label);
          }
          return end();
        }
      };
    })(this));
  };

  this.$densort = function(key, first_idx, report_handler) {
    var ds, has_ended, send_data, signal_end;
    if (key == null) {
      key = 1;
    }
    if (first_idx == null) {
      first_idx = 0;
    }
    if (report_handler == null) {
      report_handler = null;
    }
    ds = DS.new_densort(key, first_idx, report_handler);
    has_ended = false;
    send_data = (function(_this) {
      return function(send, data) {};
    })(this);
    signal_end = (function(_this) {
      return function(send) {
        if (!has_ended) {
          send.end();
        }
        return has_ended = true;
      };
    })(this);
    return this.remit((function(_this) {
      return function(input_data, send, end) {
        if (input_data != null) {
          ds(input_data, function(error, output_data) {
            if (error != null) {
              return send.error(error);
            }
            return send(output_data);
          });
        }
        if (end != null) {
          return ds(null, function(error, output_data) {
            if (error != null) {
              return send.error(error);
            }
            if (output_data != null) {
              return send(output_data);
            } else {
              return signal_end(send);
            }
          });
        }
      };
    })(this));
  };

  this.$collect = function() {
    var collector;
    collector = [];
    return this.remit((function(_this) {
      return function(event, send, end) {
        if (event != null) {
          collector.push(event);
        }
        if (end != null) {
          send(collector);
          return end();
        }
      };
    })(this));
  };

  this.$show = function(badge) {
    var my_show;
    if (badge == null) {
      badge = null;
    }
    my_show = CND.get_logger('info', badge != null ? badge : '*');
    return this.remit((function(_this) {
      return function(record, send) {
        my_show(rpr(record));
        return send(record);
      };
    })(this));
  };

}).call(this);
