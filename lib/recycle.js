// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $, $async, CND, PD, assign, badge, debug, echo, help, info, is_empty, jr, rpr, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/RECYCLE';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  //...........................................................................................................
  PD = require('..');

  ({$, $async} = PD);

  ({assign, is_empty, jr} = CND);

  //-----------------------------------------------------------------------------------------------------------
  this.new_sync_event = function() {
    return PD.new_system_event('sync');
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$unwrap_recycled = function() {
    /* If the event is a `~recycle` event, send its associated `~sync` event, if any, then its value;
    otherwise, send the event itself. */
    var my_sync, q1, q2/* priority queue for recycled events       */, waiting/* secondary queue for newly arrived events */;
    q1 = [];
    q2 = [];
    waiting = false;
    // sent_sync = false
    my_sync = this.new_sync_event();
    return $((d, send) => {
      // urge '77833-1', "#{d.sigil}#{d.key}:#{jr d.value ? null}"
      //.......................................................................................................
      /* If event is this circle's sync, send next event from q2, followed by my sync, and set state to
      waiting (for the sync to recycle back to here). If there's nothing left in the q2, that means we are
      done for the time being, and can stop waiting. */
      if (d === my_sync) {
        waiting = false;
        // debug '77833-2', jr { waiting, q1, q2, }
        if (!is_empty(q1)) {
          waiting = true;
          send(q1.pop());
          // debug '77833-3', jr { waiting, q1, q2, }
          send(my_sync);
        } else if (!is_empty(q2)) {
          /* TAINT must wrap other circles' syncs so they don't get picked up by this circle's transforms */
          waiting = true;
          send(q2.pop());
          // debug '77833-4', jr { waiting, q1, q2, }
          send(my_sync);
        }
      //.......................................................................................................
      /* If event is recycling, put it into the priority queue to send it right after sync has recycled: */
      } else if (this.is_recycling(d)) {
        if (waiting) {
          q1.unshift(d.value);
        } else {
          // debug '77833-5', jr { waiting, q1, q2, }
          send(d.value);
        }
      // debug '77833-6', jr { waiting, q1, q2, }
      // send d.value
      //.......................................................................................................
      /* If we're in waiting state, q2 the event: */
      } else if (waiting) {
        q2.unshift(d);
      } else {
        // debug '77833-7', jr { waiting, q1, q2, }
        //.......................................................................................................
        waiting = true;
        // debug '77833-8', jr { waiting, q1, q2, }
        send(d);
        send(my_sync);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.$recycle = function(resend) {
    /* Stream transform to send events either down the pipeline (using `send`) or
    to an alternate destination, using the `resend` method ( the only argument to
    this function). Normally, this will be the `send` method of a push source, but
    it could be any function that accepts a single event as argument. */
    return $({
      last: null
    }, (d, send) => {
      if (d == null) {
        return resend(null);
      }
      if (this.is_sync(d)) {
        resend(d);
      } else if (this.is_recycling(d)) {
        resend(d);
      } else {
        send(d);
      }
      return null;
    });
  };

  //-----------------------------------------------------------------------------------------------------------
  this.recycling = function(d, sync = null) {
    return PD.new_system_event('recycle', d, sync != null ? {sync} : null);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_recycling = function(d) {
    /* Return whether event is a recycling wrapper event. */
    return d.key === '~recycle';
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_recycling_sync = function(d) {
    /* Return whether event is a sync event that accompanies a recycling event. */
    return (d.key === '~sync') && (d.value > 0);
  };

  //-----------------------------------------------------------------------------------------------------------
  this.is_sync = function(d) {
    /* Return whether event is a recycling wrapper event. */
    return d.key === '~sync';
  };

}).call(this);

//# sourceMappingURL=recycle.js.map
