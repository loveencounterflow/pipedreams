{
  "version": 3,
  "file": "overrides.js",
  "sourceRoot": "..",
  "sources": [
    "src/overrides.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/OVERRIDES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n#...........................................................................................................\nPS                        = require 'pipestreams'\nPD                        = require '..'\n{ $\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n{ jr\n  copy\n  assign }                = CND\n#...........................................................................................................\noverride_sym              = Symbol.for 'override'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  defaults              = { select: null, key: 'collection', callback: null, value: null, collector: null, }\n  settings              = assign {}, defaults, settings\n  use_custom_collector  = settings.collector?\n  send                  = null\n  last_sym              = Symbol 'last'\n  #.........................................................................................................\n  switch ( type = CND.type_of settings.value ? null )\n    when 'null'         then  get_value = ( d ) -> d\n    when 'boolean'\n      if settings.value then  get_value = ( d ) -> d.value\n      else                    get_value = ( d ) -> d\n    when 'text'         then  get_value = ( d ) -> d[ settings.value ]\n    when 'function'     then  get_value = settings.value\n    else throw new Error \"µ20922 expected a boolean, a text or a function, got a #{type}\"\n  #.........................................................................................................\n  expedite  = ->\n    # debug '37763-1->', collector, settings.callback, settings.key\n    return unless settings.collector?\n    if settings.callback? then  settings.callback                       settings.collector\n    else                        send PD.new_single_event settings.key,  settings.collector\n    settings.collector = null\n  #.........................................................................................................\n  collect = ( d ) ->\n    settings.collector ?= []\n    settings.collector.push ( get_value d ) ? null\n    return null\n  #.........................................................................................................\n  return $ { last: last_sym, }, ( d, _send ) ->\n    send = _send\n    #.......................................................................................................\n    if d is last_sym\n      expedite()\n    #.......................................................................................................\n    else if select d, '~collect'\n      if use_custom_collector\n        throw new Error \"µ110299 unable to use `~collect` symbol with custom collector\"\n      expedite()\n    #.......................................................................................................\n    else\n      return collect d if ( not settings.select? ) and ( not PD.is_system d )\n      return collect d if (     settings.select? ) and ( select d, settings.select )\n      ### At this point we know the current datom will not be collected, so we first send whatever we have\n      collected, if anything, in order not to mess up the relative ordering of events. ###\n      expedite()\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( P... ) ->\n  pipeline = []\n  pipeline.push $ ( d, send ) ->\n    if ( select d, '~end' )\n      send PD.symbols.end\n    else\n      send d\n  pipeline.push PS.$drain P...\n  return PD.pull pipeline...\n\n\n\n############################################################################################################\nL = @\ndo ->\n  ### Mark all methods defined here as overrides: ###\n  for key, value of L\n    value[ override_sym ] = true\n"
  ]
}