{
  "version": 3,
  "file": "overrides.js",
  "sourceRoot": "..",
  "sources": [
    "src/overrides.coffee"
  ],
  "names": [],
  "mappings": ";AACA;EAAA;AAAA,MAAA,GAAA,EAAA,CAAA,EAAA,EAAA,EAAA,MAAA,EAAA,KAAA,EAAA,IAAA,EAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,IAAA,EAAA,EAAA,EAAA,YAAA,EAAA,GAAA,EAAA,IAAA,EAAA,IAAA,EAAA,OAAA;;;EAGA,GAAA,GAA4B,OAAA,CAAQ,KAAR;;EAC5B,GAAA,GAA4B,GAAG,CAAC;;EAChC,KAAA,GAA4B;;EAC5B,KAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,OAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,MAAf,EAA4B,KAA5B;;EAC5B,OAAA,GAA4B,GAAG,CAAC,UAAJ,CAAe,SAAf,EAA4B,KAA5B;;EAC5B,IAAA,GAA4B,GAAG,CAAC,IAAI,CAAC,IAAT,CAAc,GAAd;;EAC5B,CAAA,CAAE,MAAF,EACE,EADF,CAAA,GAC4B,GAD5B,EAbA;;;EAgBA,EAAA,GAA4B,OAAA,CAAQ,aAAR,EAhB5B;;;EAkBA,CAAA,CAAE,EAAF,EACE,IADF,EAEE,MAFF,CAAA,GAE4B,GAF5B,EAlBA;;;EAsBA,YAAA,GAA4B,MAAM,CAAC,GAAP,CAAW,UAAX,EAtB5B;;;EAyBA,IAAC,CAAA,MAAD,GAAU,QAAA,CAAE,SAAS,IAAX,CAAA;AACV,QAAA,CAAA,EAAA;IAAE,QAAA,GAAW;IACX,QAAQ,CAAC,IAAT,CAAc,IAAC,CAAA,CAAD,CAAG,CAAE,CAAF,EAAK,IAAL,CAAA,GAAA;MACf,IAAK,IAAC,CAAA,MAAD,CAAQ,CAAR,EAAW,MAAX,CAAL;eACE,IAAA,CAAK,IAAC,CAAA,OAAO,CAAC,GAAd,EADF;OAAA,MAAA;eAGE,IAAA,CAAK,CAAL,EAHF;;IADe,CAAH,CAAd;IAKA,QAAQ,CAAC,IAAT,CAAc,EAAE,CAAC,MAAH,CAAU,MAAV,CAAd;IACA,CAAA,GAAI,IAAC,CAAA,IAAD,CAAM,GAAA,QAAN;AACJ,WAAO,IAAC,CAAA,YAAD,CAAc,CAAd,EAAiB;MAAE,IAAA,EAAM,QAAR;MAAkB;IAAlB,CAAjB;EATC,EAzBV;;;EAuCA,CAAA,GAAI;;EACD,CAAA,QAAA,CAAA,CAAA;AACH,QAAA,GAAA,EAAA,OAAA,EAAA,KAAA;;AACE;IAAA,KAAA,QAAA;;mBACE,KAAK,CAAE,YAAF,CAAL,GAAwB;IAD1B,CAAA;;EAFC,CAAA;AAxCH",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/OVERRIDES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n#...........................................................................................................\nPS                        = require 'pipestreams'\n#...........................................................................................................\n{ jr\n  copy\n  assign }                = CND\n#...........................................................................................................\noverride_sym              = Symbol.for 'override'\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( on_end = null ) ->\n  pipeline = []\n  pipeline.push @$ ( d, send ) =>\n    if ( @select d, '~end' )\n      send @symbols.end\n    else\n      send d\n  pipeline.push PS.$drain on_end\n  R = @pull pipeline...\n  return @mark_as_sink R, { type: '$drain', on_end, }\n\n\n\n############################################################################################################\nL = @\ndo ->\n  ### Mark all methods defined here as overrides: ###\n  for key, value of L\n    value[ override_sym ] = true\n"
  ]
}