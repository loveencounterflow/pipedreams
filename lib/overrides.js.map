{
  "version": 3,
  "file": "overrides.js",
  "sourceRoot": "..",
  "sources": [
    "src/overrides.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "\n'use strict'\n\n############################################################################################################\nCND                       = require 'cnd'\nrpr                       = CND.rpr\nbadge                     = 'PIPEDREAMS/OVERRIDES'\ndebug                     = CND.get_logger 'debug',     badge\nwarn                      = CND.get_logger 'warn',      badge\ninfo                      = CND.get_logger 'info',      badge\nurge                      = CND.get_logger 'urge',      badge\nhelp                      = CND.get_logger 'help',      badge\nwhisper                   = CND.get_logger 'whisper',   badge\necho                      = CND.echo.bind CND\n{ assign\n  jr }                    = CND\n#...........................................................................................................\nPS                        = require 'pipestreams'\nPD                        = require '..'\n{ $\n  $async\n  select\n  stamp }                 = PD\n#...........................................................................................................\n{ jr\n  copy\n  assign }                = CND\n#...........................................................................................................\noverride_sym              = Symbol.for 'override'\n\n\n#-----------------------------------------------------------------------------------------------------------\n@$collect = ( settings ) ->\n  collector = null\n  defaults  = { select: null, key: 'collection', callback: null, value: null, }\n  settings  = assign {}, defaults, settings\n  send      = null\n  #.........................................................................................................\n  switch ( type = CND.type_of settings.value ? null )\n    when 'null'         then  get_value = ( d ) -> d\n    when 'boolean'\n      if settings.value then  get_value = ( d ) -> d.value\n      else                    get_value = ( d ) -> d\n    when 'text'         then  get_value = ( d ) -> d[ settings.value ]\n    when 'function'     then  get_value = settings.value\n    else throw new Error \"Âµ20922 expected a boolean, a text or a function, got a #{type}\"\n  #.........................................................................................................\n  expedite  = ->\n    debug '37763-1', collector\n    return unless collector?\n    if settings.callback? then  settings.callback collector\n    else                        send PD.new_single_event settings.key, collector\n    collector = null\n  #.........................................................................................................\n  collect = ( d ) ->\n    collector ?= []\n    collector.push ( get_value d ) ? null\n    return null\n  #.........................................................................................................\n  return $ { last: PD.symbols.last, }, ( d, _send ) ->\n    send = _send\n    debug '37763-2', d\n    #.......................................................................................................\n    if d is PD.symbols.last\n      debug '37763-3', d\n      expedite()\n      send PD.symbols.end\n    #.......................................................................................................\n    else if select d, '~collect'\n      expedite()\n      send d\n    #.......................................................................................................\n    else\n      return collect d if ( not settings.select? ) and ( not PD.is_system d )\n      return collect d if (     settings.select? ) and ( select d, settings.select )\n      expedite()\n      send d\n    #.......................................................................................................\n    return null\n\n#-----------------------------------------------------------------------------------------------------------\n@$drain = ( P... ) ->\n  pipeline = []\n  pipeline.push $ ( d, send ) ->\n    if ( select d, '~end' )\n      send PD.symbols.end\n    else\n      send d\n  pipeline.push PS.$drain P...\n  return PD.pull pipeline...\n\n\n\n############################################################################################################\nL = @\ndo ->\n  ### Mark all methods defined here as overrides: ###\n  for key, value of L\n    value[ override_sym ] = true\n"
  ]
}