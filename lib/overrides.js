// Generated by CoffeeScript 2.3.1
(function() {
  'use strict';
  var $, $async, CND, L, PD, assign, badge, copy, debug, echo, help, info, jr, override_sym, rpr, select, stamp, urge, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/OVERRIDES';

  debug = CND.get_logger('debug', badge);

  warn = CND.get_logger('warn', badge);

  info = CND.get_logger('info', badge);

  urge = CND.get_logger('urge', badge);

  help = CND.get_logger('help', badge);

  whisper = CND.get_logger('whisper', badge);

  echo = CND.echo.bind(CND);

  ({assign, jr} = CND);

  //...........................................................................................................
  PD = require('..');

  ({$, $async, select, stamp} = PD);

  //...........................................................................................................
  ({jr, copy, assign} = CND);

  //...........................................................................................................
  override_sym = Symbol.for('override');

  //-----------------------------------------------------------------------------------------------------------
  this.$collect = function(settings) {
    var collect, collector, defaults, expedite, get_value, ref, send, type;
    collector = null;
    defaults = {
      select: null,
      key: 'collection',
      callback: null,
      value: null
    };
    settings = assign({}, defaults, settings);
    send = null;
    //.........................................................................................................
    switch ((type = CND.type_of((ref = settings.value) != null ? ref : null))) {
      case 'null':
        get_value = function(d) {
          return d;
        };
        break;
      case 'boolean':
        if (settings.value) {
          get_value = function(d) {
            return d.value;
          };
        } else {
          get_value = function(d) {
            return d;
          };
        }
        break;
      case 'text':
        get_value = function(d) {
          return d[settings.value];
        };
        break;
      case 'function':
        get_value = settings.value;
        break;
      default:
        throw new Error(`Âµ20922 expected a boolean, a text or a function, got a ${type}`);
    }
    //.........................................................................................................
    expedite = function() {
      if (collector == null) {
        return;
      }
      if (settings.callback != null) {
        settings.callback(collector);
      } else {
        send(PD.new_single_event(settings.key, collector));
      }
      return collector = null;
    };
    //.........................................................................................................
    collect = function(d) {
      var ref1;
      if (collector == null) {
        collector = [];
      }
      collector.push((ref1 = get_value(d)) != null ? ref1 : null);
      return null;
    };
    //.........................................................................................................
    return $('null', function(d, _send) {
      send = _send;
      if (d != null) {
        //.....................................................................................................
        if (select(d, '~collect')) {
          expedite();
          return send(d);
        }
        if ((settings.select == null) && (!PD.is_system(d))) {
          //.....................................................................................................
          return collect(d);
        }
        if ((settings.select != null) && (select(d, settings.select))) {
          return collect(d);
        }
        expedite();
        return send(d);
      } else {
        //.......................................................................................................
        expedite();
      }
      //.......................................................................................................
      return null;
    });
  };

  //###########################################################################################################
  L = this;

  (function() {
    var key, results, value;
/* Mark all methods defined here as overrides: */
    results = [];
    for (key in L) {
      value = L[key];
      results.push(value[override_sym] = true);
    }
    return results;
  })();

}).call(this);

//# sourceMappingURL=overrides.js.map
