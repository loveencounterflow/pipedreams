// Generated by CoffeeScript 2.3.2
(function() {
  'use strict';
  var CND, Emittery, L, alert, badge, debug, help, info, name, ref, rpr, urge, value, warn, whisper;

  //###########################################################################################################
  CND = require('cnd');

  rpr = CND.rpr;

  badge = 'PIPEDREAMS/XEMITTER';

  debug = CND.get_logger('debug', badge);

  alert = CND.get_logger('alert', badge);

  whisper = CND.get_logger('whisper', badge);

  warn = CND.get_logger('warn', badge);

  help = CND.get_logger('help', badge);

  urge = CND.get_logger('urge', badge);

  info = CND.get_logger('info', badge);

  //...........................................................................................................
  /* https://github.com/sindresorhus/emittery */
  Emittery = require('emittery');

  //-----------------------------------------------------------------------------------------------------------
  this._emitter = new Emittery();

  this._has_contractors = {};

  //-----------------------------------------------------------------------------------------------------------
  this._mark_as_primary = function(x) {
    return {
      '~isa': 'XEMITTER/preferred',
      value: x
    };
  };

  this._filter_primary = function(x) {
    return CND.isa(x, 'XEMITTER/preferred');
  };

  this._get_primary = function(values) {
    var ref, ref1;
    return (ref = (ref1 = (values.filter(this._filter_primary))[0]) != null ? ref1.value : void 0) != null ? ref : null;
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_ccl = function(channel, self, listener) {
    var arity;
    switch (arity = arguments.length) {
      case 2:
        [channel, self, listener] = [channel, null, self];
        break;
      case 3:
        [channel, self, listener] = [channel, self, listener];
        break;
      default:
        throw new Error(`expected 2 or 3 arguments, got ${arity}`);
    }
    if (!((CND.isa_text(channel)) && (channel.length > 0))) {
      throw new Error(`expected a non-empty text for channel, got ${rpr(channel)}`);
    }
    return [channel, self, listener];
  };

  //-----------------------------------------------------------------------------------------------------------
  this._get_cl = function(self, listener) {
    var arity;
    switch (arity = arguments.length) {
      case 1:
        [self, listener] = [null, self];
        break;
      case 2:
        [self, listener] = [self, listener];
        break;
      default:
        throw new Error(`expected 1 or 2 arguments, got ${arity}`);
    }
    return [self, listener];
  };

  //-----------------------------------------------------------------------------------------------------------
  this.contract = function(channel, self, listener) {
    [channel, self, listener] = this._get_ccl(...arguments);
    if (this._has_contractors[channel]) {
      throw new Error(`channel ${rpr(channel)} already has a primary listener`);
    }
    this._has_contractors[channel] = true;
    this._emitter.on(channel, async(data) => {
      return this._mark_as_primary((await listener.call(self, data)));
    });
    return listener;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.listen_to = function(channel, self, listener) {
    [channel, self, listener] = this._get_ccl(...arguments);
    this._emitter.on(channel, async function(data) {
      return (await listener.call(self, data));
    });
    return listener;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.listen_to_all = function(self, listener) {
    [self, listener] = this._get_cl(...arguments);
    this._emitter.onAny(async function(channel, data) {
      return (await listener.call(self, channel, data));
    });
    return listener;
  };

  //-----------------------------------------------------------------------------------------------------------
  this.emit = async function(channel, data) {
    return (await this._emitter.emit(channel, data));
  };

  this.delegate = async function(channel, data) {
    return this._get_primary((await this._emitter.emit(channel, data)));
  };

  ref = L = this;
  //###########################################################################################################
  for (name in ref) {
    value = ref[name];
    if (!CND.isa_function(value.bind)) {
      /* TAINT poor man's 'callable' detection */
      continue;
    }
    L[name] = value.bind(L);
  }

}).call(this);

//# sourceMappingURL=xemitter.js.map
